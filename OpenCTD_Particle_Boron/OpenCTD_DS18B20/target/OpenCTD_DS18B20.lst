
/Users/pjb/Dropbox/Particle_Projects/OPO_OpenCTDTest/OpenCTD_DS18B20/target/OpenCTD_DS18B20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f28  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00016fd4  2**0
                  CONTENTS
  3 .data         00000068  2003e390  000d6f40  0000e390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000003f8  2003e3f8  2003e3f8  0001e3f8  2**3
                  ALLOC
  5 .module_info_suffix 00000028  000d6fa8  000d6fa8  00016fa8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d6fd0  000d6fd0  00016fd0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000b640d  00000000  00000000  00016fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00011b62  00000000  00000000  000cd3e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000139de  00000000  00000000  000def43  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001ef0  00000000  00000000  000f2921  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003180  00000000  00000000  000f4811  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00036f1d  00000000  00000000  000f7991  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002c9d1  00000000  00000000  0012e8ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d4f7b  00000000  00000000  0015b27f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000b720  00000000  00000000  002301fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	a4 6b 0d 00                                         .k..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fd59 	bl	d6ae4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fd5e 	bl	d6afa <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e390 	.word	0x2003e390
   d4048:	000d6f40 	.word	0x000d6f40
   d404c:	2003e3f8 	.word	0x2003e3f8
   d4050:	2003e3f8 	.word	0x2003e3f8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fe53 	bl	d5d04 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6f40 	.word	0x000d6f40
   d4080:	000d6ef8 	.word	0x000d6ef8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b816 	b.w	d40b4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8a9 	bl	d41e0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 be05 	b.w	d5ca0 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bdf7 	b.w	d4c88 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bdfd 	b.w	d4c98 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bdfb 	b.w	d4c98 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <setup>:
uint32_t msLastMetric;
uint32_t msLastSample;

SYSTEM_MODE(MANUAL);

void setup() {
   d40b4:	b508      	push	{r3, lr}
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d40b6:	4807      	ldr	r0, [pc, #28]	; (d40d4 <setup+0x20>)
   d40b8:	2300      	movs	r3, #0
   d40ba:	4619      	mov	r1, r3
   d40bc:	461a      	mov	r2, r3
   d40be:	6840      	ldr	r0, [r0, #4]
   d40c0:	f000 fdba 	bl	d4c38 <network_off>
  Cellular.off();
  Serial.begin(115200);
   d40c4:	f001 fda8 	bl	d5c18 <_Z16_fetch_usbserialv>
   d40c8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
}
   d40cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

SYSTEM_MODE(MANUAL);

void setup() {
  Cellular.off();
  Serial.begin(115200);
   d40d0:	f001 bd96 	b.w	d5c00 <_ZN9USBSerial5beginEl>
   d40d4:	2003e480 	.word	0x2003e480

000d40d8 <_Z11publishDatav>:
    Serial.println("Publishing now.");
    publishData();
  }
}

void publishData(){
   d40d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  sprintf(szInfo, "%2.2f", fahrenheit);
   d40da:	4b14      	ldr	r3, [pc, #80]	; (d412c <_Z11publishDatav+0x54>)
   d40dc:	4914      	ldr	r1, [pc, #80]	; (d4130 <_Z11publishDatav+0x58>)
   d40de:	4815      	ldr	r0, [pc, #84]	; (d4134 <_Z11publishDatav+0x5c>)
   d40e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d40e4:	f000 fde0 	bl	d4ca8 <sprintf>
   d40e8:	4b13      	ldr	r3, [pc, #76]	; (d4138 <_Z11publishDatav+0x60>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40ea:	4a12      	ldr	r2, [pc, #72]	; (d4134 <_Z11publishDatav+0x5c>)
   d40ec:	781b      	ldrb	r3, [r3, #0]
   d40ee:	f88d 3000 	strb.w	r3, [sp]
   d40f2:	4912      	ldr	r1, [pc, #72]	; (d413c <_Z11publishDatav+0x64>)
   d40f4:	233c      	movs	r3, #60	; 0x3c
   d40f6:	a802      	add	r0, sp, #8
   d40f8:	f000 ffac 	bl	d5054 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40fc:	9c03      	ldr	r4, [sp, #12]
   d40fe:	b17c      	cbz	r4, d4120 <_Z11publishDatav+0x48>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4100:	6863      	ldr	r3, [r4, #4]
   d4102:	3b01      	subs	r3, #1
   d4104:	6063      	str	r3, [r4, #4]
   d4106:	b95b      	cbnz	r3, d4120 <_Z11publishDatav+0x48>
        {
          _M_dispose();
   d4108:	6823      	ldr	r3, [r4, #0]
   d410a:	4620      	mov	r0, r4
   d410c:	689b      	ldr	r3, [r3, #8]
   d410e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4110:	68a3      	ldr	r3, [r4, #8]
   d4112:	3b01      	subs	r3, #1
   d4114:	60a3      	str	r3, [r4, #8]
   d4116:	b91b      	cbnz	r3, d4120 <_Z11publishDatav+0x48>
            _M_destroy();
   d4118:	6823      	ldr	r3, [r4, #0]
   d411a:	4620      	mov	r0, r4
   d411c:	68db      	ldr	r3, [r3, #12]
   d411e:	4798      	blx	r3
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4120:	f000 fc16 	bl	d4950 <HAL_Timer_Get_Milli_Seconds>
  Particle.publish("dsTmp", szInfo, PRIVATE);
  msLastMetric = millis();
   d4124:	4b06      	ldr	r3, [pc, #24]	; (d4140 <_Z11publishDatav+0x68>)
   d4126:	6018      	str	r0, [r3, #0]
}
   d4128:	b004      	add	sp, #16
   d412a:	bd10      	pop	{r4, pc}
   d412c:	2003e408 	.word	0x2003e408
   d4130:	000d6bb8 	.word	0x000d6bb8
   d4134:	2003e418 	.word	0x2003e418
   d4138:	2003e400 	.word	0x2003e400
   d413c:	000d6bbe 	.word	0x000d6bbe
   d4140:	2003e3fc 	.word	0x2003e3fc

000d4144 <_Z7getTempv>:

void getTemp(){
   d4144:	b510      	push	{r4, lr}
   d4146:	ed2d 8b02 	vpush	{d8}
  float _temp;
  int   i = 0;
   d414a:	2400      	movs	r4, #0

  do {
    _temp = ds18b20.getTemperature();
   d414c:	481e      	ldr	r0, [pc, #120]	; (d41c8 <_Z7getTempv+0x84>)
   d414e:	2100      	movs	r1, #0
   d4150:	f000 f98a 	bl	d4468 <_ZN7DS18B2014getTemperatureEb>
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d4154:	481c      	ldr	r0, [pc, #112]	; (d41c8 <_Z7getTempv+0x84>)
void getTemp(){
  float _temp;
  int   i = 0;

  do {
    _temp = ds18b20.getTemperature();
   d4156:	eeb0 8a40 	vmov.f32	s16, s0
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d415a:	f000 f9bb 	bl	d44d4 <_ZN7DS18B208crcCheckEv>
   d415e:	b9b0      	cbnz	r0, d418e <_Z7getTempv+0x4a>
   d4160:	3401      	adds	r4, #1
   d4162:	2c05      	cmp	r4, #5
   d4164:	d1f2      	bne.n	d414c <_Z7getTempv+0x8>
    celsius = _temp;
    fahrenheit = ds18b20.convertToFahrenheit(_temp);
    Serial.println(fahrenheit);
  }
  else {
    celsius = fahrenheit = NAN;
   d4166:	4b19      	ldr	r3, [pc, #100]	; (d41cc <_Z7getTempv+0x88>)
   d4168:	4919      	ldr	r1, [pc, #100]	; (d41d0 <_Z7getTempv+0x8c>)
   d416a:	2200      	movs	r2, #0
   d416c:	e9c1 2300 	strd	r2, r3, [r1]
   d4170:	4918      	ldr	r1, [pc, #96]	; (d41d4 <_Z7getTempv+0x90>)
   d4172:	e9c1 2300 	strd	r2, r3, [r1]
    Serial.println("Invalid reading");
   d4176:	f001 fd4f 	bl	d5c18 <_Z16_fetch_usbserialv>
   d417a:	4917      	ldr	r1, [pc, #92]	; (d41d8 <_Z7getTempv+0x94>)
   d417c:	f001 fb1b 	bl	d57b6 <_ZN5Print7printlnEPKc>
   d4180:	f000 fbe6 	bl	d4950 <HAL_Timer_Get_Milli_Seconds>
  }
  msLastSample = millis();
   d4184:	4b15      	ldr	r3, [pc, #84]	; (d41dc <_Z7getTempv+0x98>)
   d4186:	6018      	str	r0, [r3, #0]
}
   d4188:	ecbd 8b02 	vpop	{d8}
   d418c:	bd10      	pop	{r4, pc}

  do {
    _temp = ds18b20.getTemperature();
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);

  if (i < MAXRETRY) {
   d418e:	2c04      	cmp	r4, #4
   d4190:	d0e9      	beq.n	d4166 <_Z7getTempv+0x22>
    celsius = _temp;
   d4192:	ee18 0a10 	vmov	r0, s16
   d4196:	f002 f8fb 	bl	d6390 <__aeabi_f2d>
   d419a:	4b0e      	ldr	r3, [pc, #56]	; (d41d4 <_Z7getTempv+0x90>)
    fahrenheit = ds18b20.convertToFahrenheit(_temp);
   d419c:	4c0c      	ldr	r4, [pc, #48]	; (d41d0 <_Z7getTempv+0x8c>)
  do {
    _temp = ds18b20.getTemperature();
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);

  if (i < MAXRETRY) {
    celsius = _temp;
   d419e:	e9c3 0100 	strd	r0, r1, [r3]
    fahrenheit = ds18b20.convertToFahrenheit(_temp);
   d41a2:	eeb0 0a48 	vmov.f32	s0, s16
   d41a6:	4808      	ldr	r0, [pc, #32]	; (d41c8 <_Z7getTempv+0x84>)
   d41a8:	f000 f97a 	bl	d44a0 <_ZN7DS18B2019convertToFahrenheitEf>
   d41ac:	ee10 0a10 	vmov	r0, s0
   d41b0:	f002 f8ee 	bl	d6390 <__aeabi_f2d>
   d41b4:	e9c4 0100 	strd	r0, r1, [r4]
    Serial.println(fahrenheit);
   d41b8:	f001 fd2e 	bl	d5c18 <_Z16_fetch_usbserialv>
   d41bc:	2102      	movs	r1, #2
   d41be:	ed94 0b00 	vldr	d0, [r4]
   d41c2:	f001 fc05 	bl	d59d0 <_ZN5Print7printlnEdi>
   d41c6:	e7db      	b.n	d4180 <_Z7getTempv+0x3c>
   d41c8:	2003e458 	.word	0x2003e458
   d41cc:	7ff80000 	.word	0x7ff80000
   d41d0:	2003e408 	.word	0x2003e408
   d41d4:	2003e410 	.word	0x2003e410
   d41d8:	000d6bc4 	.word	0x000d6bc4
   d41dc:	2003e404 	.word	0x2003e404

000d41e0 <loop>:
void setup() {
  Cellular.off();
  Serial.begin(115200);
}

void loop() {
   d41e0:	b508      	push	{r3, lr}
   d41e2:	f000 fbb5 	bl	d4950 <HAL_Timer_Get_Milli_Seconds>
  if (millis() - msLastSample >= msSAMPLE_INTERVAL){
   d41e6:	4b0e      	ldr	r3, [pc, #56]	; (d4220 <loop+0x40>)
   d41e8:	681b      	ldr	r3, [r3, #0]
   d41ea:	1ac0      	subs	r0, r0, r3
   d41ec:	f640 13c3 	movw	r3, #2499	; 0x9c3
   d41f0:	4298      	cmp	r0, r3
   d41f2:	d901      	bls.n	d41f8 <loop+0x18>
    getTemp();
   d41f4:	f7ff ffa6 	bl	d4144 <_Z7getTempv>
   d41f8:	f000 fbaa 	bl	d4950 <HAL_Timer_Get_Milli_Seconds>
  }

  if (millis() - msLastMetric >= msMETRIC_PUBLISH){
   d41fc:	4b09      	ldr	r3, [pc, #36]	; (d4224 <loop+0x44>)
   d41fe:	681b      	ldr	r3, [r3, #0]
   d4200:	1ac0      	subs	r0, r0, r3
   d4202:	f247 532f 	movw	r3, #29999	; 0x752f
   d4206:	4298      	cmp	r0, r3
   d4208:	d908      	bls.n	d421c <loop+0x3c>
    Serial.println("Publishing now.");
   d420a:	f001 fd05 	bl	d5c18 <_Z16_fetch_usbserialv>
   d420e:	4906      	ldr	r1, [pc, #24]	; (d4228 <loop+0x48>)
   d4210:	f001 fad1 	bl	d57b6 <_ZN5Print7printlnEPKc>
    publishData();
  }
}
   d4214:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    getTemp();
  }

  if (millis() - msLastMetric >= msMETRIC_PUBLISH){
    Serial.println("Publishing now.");
    publishData();
   d4218:	f7ff bf5e 	b.w	d40d8 <_Z11publishDatav>
   d421c:	bd08      	pop	{r3, pc}
   d421e:	bf00      	nop
   d4220:	2003e404 	.word	0x2003e404
   d4224:	2003e3fc 	.word	0x2003e3fc
   d4228:	000d6bd4 	.word	0x000d6bd4

000d422c <_GLOBAL__sub_I_ds18b20>:
  else {
    celsius = fahrenheit = NAN;
    Serial.println("Invalid reading");
  }
  msLastSample = millis();
}
   d422c:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d422e:	4b0e      	ldr	r3, [pc, #56]	; (d4268 <_GLOBAL__sub_I_ds18b20+0x3c>)

const int      MAXRETRY          = 4;
const uint32_t msSAMPLE_INTERVAL = 2500;
const uint32_t msMETRIC_PUBLISH  = 30000;

DS18B20  ds18b20(D2, true); //Sets Pin D2 for Water Temp Sensor and 
   d4230:	4c0e      	ldr	r4, [pc, #56]	; (d426c <_GLOBAL__sub_I_ds18b20+0x40>)
   d4232:	2501      	movs	r5, #1
   d4234:	701d      	strb	r5, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4236:	f000 fb93 	bl	d4960 <HAL_Pin_Map>
   d423a:	462a      	mov	r2, r5
   d423c:	2102      	movs	r1, #2
   d423e:	4620      	mov	r0, r4
   d4240:	f000 f81c 	bl	d427c <_ZN7DS18B20C1Etb>
   d4244:	4a0a      	ldr	r2, [pc, #40]	; (d4270 <_GLOBAL__sub_I_ds18b20+0x44>)
   d4246:	490b      	ldr	r1, [pc, #44]	; (d4274 <_GLOBAL__sub_I_ds18b20+0x48>)
   d4248:	4620      	mov	r0, r4
   d424a:	f001 fded 	bl	d5e28 <__aeabi_atexit>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d424e:	4b0a      	ldr	r3, [pc, #40]	; (d4278 <_GLOBAL__sub_I_ds18b20+0x4c>)
   d4250:	2200      	movs	r2, #0
   d4252:	701a      	strb	r2, [r3, #0]
   d4254:	805a      	strh	r2, [r3, #2]
   d4256:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d425a:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d425c:	2003      	movs	r0, #3
  else {
    celsius = fahrenheit = NAN;
    Serial.println("Invalid reading");
  }
  msLastSample = millis();
}
   d425e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4262:	f000 bc7d 	b.w	d4b60 <set_system_mode>
   d4266:	bf00      	nop
   d4268:	2003e400 	.word	0x2003e400
   d426c:	2003e458 	.word	0x2003e458
   d4270:	2003e3f8 	.word	0x2003e3f8
   d4274:	000d42d9 	.word	0x000d42d9
   d4278:	2003e474 	.word	0x2003e474

000d427c <_ZN7DS18B20C1Etb>:
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d427c:	b570      	push	{r4, r5, r6, lr}
   d427e:	4604      	mov	r4, r0
{
  memset(_data, 0, sizeof(_data));
   d4280:	2300      	movs	r3, #0
   d4282:	6063      	str	r3, [r4, #4]
   d4284:	60a3      	str	r3, [r4, #8]
   d4286:	60e3      	str	r3, [r4, #12]
  memset(_addr, 0, sizeof(_addr));
   d4288:	6123      	str	r3, [r4, #16]
   d428a:	6163      	str	r3, [r4, #20]
  _dataCRC    = 0; 
   d428c:	7623      	strb	r3, [r4, #24]
  _readCRC    = 0;
   d428e:	7663      	strb	r3, [r4, #25]
  _singleDrop = singleDrop;
   d4290:	76a2      	strb	r2, [r4, #26]
  ds          = new OneWire(pin);
   d4292:	200e      	movs	r0, #14
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d4294:	460e      	mov	r6, r1
  memset(_data, 0, sizeof(_data));
  memset(_addr, 0, sizeof(_addr));
  _dataCRC    = 0; 
  _readCRC    = 0;
  _singleDrop = singleDrop;
  ds          = new OneWire(pin);
   d4296:	f7ff fefe 	bl	d4096 <_Znwj>
   d429a:	4605      	mov	r5, r0
   d429c:	b110      	cbz	r0, d42a4 <_ZN7DS18B20C1Etb+0x28>
   d429e:	4631      	mov	r1, r6
   d42a0:	f000 f992 	bl	d45c8 <_ZN7OneWireC1Et>
   d42a4:	6025      	str	r5, [r4, #0]
}
   d42a6:	4620      	mov	r0, r4
   d42a8:	bd70      	pop	{r4, r5, r6, pc}

000d42aa <_ZN7DS18B206searchEPh>:
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
   d42aa:	b538      	push	{r3, r4, r5, lr}
  boolean isSuccess = ds->search(_addr);
   d42ac:	f100 0510 	add.w	r5, r0, #16
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
   d42b0:	460c      	mov	r4, r1
  boolean isSuccess = ds->search(_addr);
   d42b2:	6800      	ldr	r0, [r0, #0]
   d42b4:	4629      	mov	r1, r5
   d42b6:	f000 fa73 	bl	d47a0 <_ZN7OneWire6searchEPh>
   d42ba:	1e03      	subs	r3, r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
   d42bc:	bf1d      	ittte	ne
   d42be:	682b      	ldrne	r3, [r5, #0]
   d42c0:	6023      	strne	r3, [r4, #0]
   d42c2:	686b      	ldrne	r3, [r5, #4]
  else           memset(addr, 0, 8);
   d42c4:	6023      	streq	r3, [r4, #0]
   d42c6:	6063      	str	r3, [r4, #4]
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
   d42c8:	bf14      	ite	ne
   d42ca:	2001      	movne	r0, #1
   d42cc:	2000      	moveq	r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
  return isSuccess;
}
   d42ce:	bd38      	pop	{r3, r4, r5, pc}

000d42d0 <_ZN7DS18B206searchEv>:
  ds          = new OneWire(pin);
}

boolean DS18B20::search()
{
  return search(_addr);
   d42d0:	f100 0110 	add.w	r1, r0, #16
   d42d4:	f7ff bfe9 	b.w	d42aa <_ZN7DS18B206searchEPh>

000d42d8 <_ZN7DS18B20D1Ev>:
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
  return isSuccess;
}

DS18B20::~DS18B20()
   d42d8:	b510      	push	{r4, lr}
   d42da:	4604      	mov	r4, r0
{
  delete(ds);
   d42dc:	6800      	ldr	r0, [r0, #0]
   d42de:	f7ff fedc 	bl	d409a <_ZdlPv>
}
   d42e2:	4620      	mov	r0, r4
   d42e4:	bd10      	pop	{r4, pc}

000d42e6 <_ZN7DS18B2011resetsearchEv>:
  memcpy(_addr, addr, 8);
}

void DS18B20::resetsearch()
{
  ds->reset_search();
   d42e6:	6800      	ldr	r0, [r0, #0]
   d42e8:	f000 ba4e 	b.w	d4788 <_ZN7OneWire12reset_searchEv>

000d42ec <_ZN7DS18B2014getTemperatureEPhb>:
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
   d42ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d42ee:	7e83      	ldrb	r3, [r0, #26]
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
   d42f0:	4604      	mov	r4, r0
   d42f2:	460d      	mov	r5, r1
   d42f4:	4616      	mov	r6, r2
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d42f6:	b91b      	cbnz	r3, d4300 <_ZN7DS18B2014getTemperatureEPhb+0x14>
   d42f8:	780b      	ldrb	r3, [r1, #0]
   d42fa:	2b00      	cmp	r3, #0
   d42fc:	f000 80a6 	beq.w	d444c <_ZN7DS18B2014getTemperatureEPhb+0x160>

  ds->reset();
   d4300:	6820      	ldr	r0, [r4, #0]
   d4302:	f000 f96b 	bl	d45dc <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d4306:	7ea3      	ldrb	r3, [r4, #26]
   d4308:	b123      	cbz	r3, d4314 <_ZN7DS18B2014getTemperatureEPhb+0x28>
   d430a:	b91e      	cbnz	r6, d4314 <_ZN7DS18B2014getTemperatureEPhb+0x28>
    ds->skip();
   d430c:	6820      	ldr	r0, [r4, #0]
   d430e:	f000 fa37 	bl	d4780 <_ZN7OneWire4skipEv>
   d4312:	e003      	b.n	d431c <_ZN7DS18B2014getTemperatureEPhb+0x30>
  else
    ds->select(addr);
   d4314:	4629      	mov	r1, r5
   d4316:	6820      	ldr	r0, [r4, #0]
   d4318:	f000 fa20 	bl	d475c <_ZN7OneWire6selectEPKh>

  ds->write(0x44);        // start conversion, with parasite power on at the end
   d431c:	2200      	movs	r2, #0
   d431e:	2144      	movs	r1, #68	; 0x44
   d4320:	6820      	ldr	r0, [r4, #0]
   d4322:	f000 f9e8 	bl	d46f6 <_ZN7OneWire5writeEhh>
  delay(750);     // maybe 750ms is enough, maybe not
   d4326:	f240 20ee 	movw	r0, #750	; 0x2ee
   d432a:	f000 fcd5 	bl	d4cd8 <delay>
                  // we might do a ds.depower() here, but the reset will take care of it.
  ds->reset();
   d432e:	6820      	ldr	r0, [r4, #0]
   d4330:	f000 f954 	bl	d45dc <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d4334:	7ea3      	ldrb	r3, [r4, #26]
   d4336:	b123      	cbz	r3, d4342 <_ZN7DS18B2014getTemperatureEPhb+0x56>
   d4338:	b91e      	cbnz	r6, d4342 <_ZN7DS18B2014getTemperatureEPhb+0x56>
    ds->skip();
   d433a:	6820      	ldr	r0, [r4, #0]
   d433c:	f000 fa20 	bl	d4780 <_ZN7OneWire4skipEv>
   d4340:	e003      	b.n	d434a <_ZN7DS18B2014getTemperatureEPhb+0x5e>
  else
    ds->select(addr);
   d4342:	4629      	mov	r1, r5
   d4344:	6820      	ldr	r0, [r4, #0]
   d4346:	f000 fa09 	bl	d475c <_ZN7OneWire6selectEPKh>

  ds->write(0xBE);         // Read Scratchpad
   d434a:	2200      	movs	r2, #0
   d434c:	21be      	movs	r1, #190	; 0xbe
   d434e:	6820      	ldr	r0, [r4, #0]
   d4350:	f000 f9d1 	bl	d46f6 <_ZN7OneWire5writeEhh>
  if (addr[0] == WIRE_DS2438) {
   d4354:	782b      	ldrb	r3, [r5, #0]
   d4356:	2b26      	cmp	r3, #38	; 0x26
   d4358:	d104      	bne.n	d4364 <_ZN7DS18B2014getTemperatureEPhb+0x78>
    ds->write(0x00,0);     // DS2438 requires a page to read
   d435a:	2200      	movs	r2, #0
   d435c:	4611      	mov	r1, r2
   d435e:	6820      	ldr	r0, [r4, #0]
   d4360:	f000 f9c9 	bl	d46f6 <_ZN7OneWire5writeEhh>
   d4364:	1ce6      	adds	r6, r4, #3
   d4366:	f104 070c 	add.w	r7, r4, #12
  }

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
   d436a:	6820      	ldr	r0, [r4, #0]
   d436c:	f000 f9e6 	bl	d473c <_ZN7OneWire4readEv>
   d4370:	f806 0f01 	strb.w	r0, [r6, #1]!
  ds->write(0xBE);         // Read Scratchpad
  if (addr[0] == WIRE_DS2438) {
    ds->write(0x00,0);     // DS2438 requires a page to read
  }

  for (int i = 0; i < 9; i++)
   d4374:	42be      	cmp	r6, r7
   d4376:	d1f8      	bne.n	d436a <_ZN7DS18B2014getTemperatureEPhb+0x7e>
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
   d4378:	2108      	movs	r1, #8
   d437a:	1d20      	adds	r0, r4, #4
   d437c:	f000 fa8b 	bl	d4896 <_ZN7OneWire4crc8EPhh>
  _readCRC = (_data[8]);
   d4380:	7b23      	ldrb	r3, [r4, #12]

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
   d4382:	7620      	strb	r0, [r4, #24]
  _readCRC = (_data[8]);
  if (_dataCRC != _readCRC) return NAN;
   d4384:	4298      	cmp	r0, r3
  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
  _readCRC = (_data[8]);
   d4386:	7663      	strb	r3, [r4, #25]
  if (_dataCRC != _readCRC) return NAN;
   d4388:	d160      	bne.n	d444c <_ZN7DS18B2014getTemperatureEPhb+0x160>
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
   d438a:	782b      	ldrb	r3, [r5, #0]
   d438c:	2b22      	cmp	r3, #34	; 0x22
   d438e:	d019      	beq.n	d43c4 <_ZN7DS18B2014getTemperatureEPhb+0xd8>
   d4390:	d814      	bhi.n	d43bc <_ZN7DS18B2014getTemperatureEPhb+0xd0>
   d4392:	2b10      	cmp	r3, #16
   d4394:	d15a      	bne.n	d444c <_ZN7DS18B2014getTemperatureEPhb+0x160>
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d4396:	7ae2      	ldrb	r2, [r4, #11]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d4398:	88a3      	ldrh	r3, [r4, #4]
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d439a:	2a10      	cmp	r2, #16
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d439c:	bf08      	it	eq
   d439e:	7aa2      	ldrbeq	r2, [r4, #10]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d43a0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d43a4:	bf02      	ittt	eq
   d43a6:	f023 030f 	biceq.w	r3, r3, #15
   d43aa:	f1c2 020c 	rsbeq	r2, r2, #12
   d43ae:	189b      	addeq	r3, r3, r2
   d43b0:	b21b      	sxth	r3, r3
      celsius = (float)raw / 16.0;
   d43b2:	ee00 3a10 	vmov	s0, r3
   d43b6:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
      break;
   d43ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
   d43bc:	2b26      	cmp	r3, #38	; 0x26
   d43be:	d01f      	beq.n	d4400 <_ZN7DS18B2014getTemperatureEPhb+0x114>
   d43c0:	2b28      	cmp	r3, #40	; 0x28
   d43c2:	d143      	bne.n	d444c <_ZN7DS18B2014getTemperatureEPhb+0x160>
      celsius = (float)raw / 16.0;
      break;

    case WIRE_DS1822:
    case WIRE_DS18B20:
      switch (_data[4] & 0x60)
   d43c4:	7a22      	ldrb	r2, [r4, #8]
   d43c6:	7923      	ldrb	r3, [r4, #4]
   d43c8:	f002 0260 	and.w	r2, r2, #96	; 0x60
   d43cc:	2a20      	cmp	r2, #32
   d43ce:	d005      	beq.n	d43dc <_ZN7DS18B2014getTemperatureEPhb+0xf0>
   d43d0:	2a40      	cmp	r2, #64	; 0x40
   d43d2:	d006      	beq.n	d43e2 <_ZN7DS18B2014getTemperatureEPhb+0xf6>
   d43d4:	b942      	cbnz	r2, d43e8 <_ZN7DS18B2014getTemperatureEPhb+0xfc>
      { // lower resolution means shorter conversion time, low bits need masking
        case 0x00: _data[0] &= ~0b111; break;           //  9 bit  93.75 ms
   d43d6:	f023 0307 	bic.w	r3, r3, #7
   d43da:	e004      	b.n	d43e6 <_ZN7DS18B2014getTemperatureEPhb+0xfa>
        case 0x20: _data[0] &= ~0b011; break;           // 10 bit 187.50 ms
   d43dc:	f023 0303 	bic.w	r3, r3, #3
   d43e0:	e001      	b.n	d43e6 <_ZN7DS18B2014getTemperatureEPhb+0xfa>
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
   d43e2:	f023 0301 	bic.w	r3, r3, #1
   d43e6:	7123      	strb	r3, [r4, #4]
        default: break;                                 // 12 bit 750.00 ms 
      }
      celsius = (int16_t)((_data[1] << 8) | _data[0]) / 16.0;
   d43e8:	7923      	ldrb	r3, [r4, #4]
   d43ea:	7960      	ldrb	r0, [r4, #5]
   d43ec:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d43f0:	b200      	sxth	r0, r0
   d43f2:	f001 ffbb 	bl	d636c <__aeabi_i2d>
   d43f6:	2200      	movs	r2, #0
   d43f8:	4b16      	ldr	r3, [pc, #88]	; (d4454 <_ZN7DS18B2014getTemperatureEPhb+0x168>)
   d43fa:	f002 f81d 	bl	d6438 <__aeabi_dmul>
   d43fe:	e020      	b.n	d4442 <_ZN7DS18B2014getTemperatureEPhb+0x156>
      break;
      
    case WIRE_DS2438:
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
   d4400:	79a5      	ldrb	r5, [r4, #6]
   d4402:	4628      	mov	r0, r5
   d4404:	f001 ffb2 	bl	d636c <__aeabi_i2d>
   d4408:	4606      	mov	r6, r0
   d440a:	7960      	ldrb	r0, [r4, #5]
   d440c:	10c0      	asrs	r0, r0, #3
   d440e:	ee07 0a90 	vmov	s15, r0
   d4412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4416:	460f      	mov	r7, r1
   d4418:	ee17 0a90 	vmov	r0, s15
   d441c:	f001 ffb8 	bl	d6390 <__aeabi_f2d>
   d4420:	2200      	movs	r2, #0
   d4422:	4b0d      	ldr	r3, [pc, #52]	; (d4458 <_ZN7DS18B2014getTemperatureEPhb+0x16c>)
   d4424:	f002 f808 	bl	d6438 <__aeabi_dmul>
   d4428:	460b      	mov	r3, r1
   d442a:	0629      	lsls	r1, r5, #24
   d442c:	4602      	mov	r2, r0
   d442e:	bf4c      	ite	mi
   d4430:	490a      	ldrmi	r1, [pc, #40]	; (d445c <_ZN7DS18B2014getTemperatureEPhb+0x170>)
   d4432:	490b      	ldrpl	r1, [pc, #44]	; (d4460 <_ZN7DS18B2014getTemperatureEPhb+0x174>)
   d4434:	2000      	movs	r0, #0
   d4436:	f001 ffff 	bl	d6438 <__aeabi_dmul>
   d443a:	4632      	mov	r2, r6
   d443c:	463b      	mov	r3, r7
   d443e:	f001 fe49 	bl	d60d4 <__adddf3>
   d4442:	f002 faf1 	bl	d6a28 <__aeabi_d2f>
   d4446:	ee00 0a10 	vmov	s0, r0
      break;
   d444a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      
    default:
      celsius = NAN;
   d444c:	ed9f 0a05 	vldr	s0, [pc, #20]	; d4464 <_ZN7DS18B2014getTemperatureEPhb+0x178>
      break;                            
  }
  
  return celsius;
}
   d4450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4452:	bf00      	nop
   d4454:	3fb00000 	.word	0x3fb00000
   d4458:	3fa00000 	.word	0x3fa00000
   d445c:	bff00000 	.word	0xbff00000
   d4460:	3ff00000 	.word	0x3ff00000
   d4464:	7fc00000 	.word	0x7fc00000

000d4468 <_ZN7DS18B2014getTemperatureEb>:

  return "impossible";
}

float DS18B20::getTemperature(bool forceSelect)
{
   d4468:	b538      	push	{r3, r4, r5, lr}
  if (_singleDrop && _addr[0] == WIRE_UNKNOWN)
   d446a:	7e83      	ldrb	r3, [r0, #26]

  return "impossible";
}

float DS18B20::getTemperature(bool forceSelect)
{
   d446c:	4604      	mov	r4, r0
   d446e:	460d      	mov	r5, r1
  if (_singleDrop && _addr[0] == WIRE_UNKNOWN)
   d4470:	b93b      	cbnz	r3, d4482 <_ZN7DS18B2014getTemperatureEb+0x1a>
  {
    resetsearch();
    if (!search()) return NAN;
  }
  return getTemperature(_addr, forceSelect);
   d4472:	462a      	mov	r2, r5
   d4474:	f104 0110 	add.w	r1, r4, #16
   d4478:	4620      	mov	r0, r4
}
   d447a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (_singleDrop && _addr[0] == WIRE_UNKNOWN)
  {
    resetsearch();
    if (!search()) return NAN;
  }
  return getTemperature(_addr, forceSelect);
   d447e:	f7ff bf35 	b.w	d42ec <_ZN7DS18B2014getTemperatureEPhb>
  return "impossible";
}

float DS18B20::getTemperature(bool forceSelect)
{
  if (_singleDrop && _addr[0] == WIRE_UNKNOWN)
   d4482:	7c03      	ldrb	r3, [r0, #16]
   d4484:	2b00      	cmp	r3, #0
   d4486:	d1f4      	bne.n	d4472 <_ZN7DS18B2014getTemperatureEb+0xa>
  {
    resetsearch();
   d4488:	f7ff ff2d 	bl	d42e6 <_ZN7DS18B2011resetsearchEv>
    if (!search()) return NAN;
   d448c:	4620      	mov	r0, r4
   d448e:	f7ff ff1f 	bl	d42d0 <_ZN7DS18B206searchEv>
   d4492:	2800      	cmp	r0, #0
   d4494:	d1ed      	bne.n	d4472 <_ZN7DS18B2014getTemperatureEb+0xa>
  }
  return getTemperature(_addr, forceSelect);
}
   d4496:	ed9f 0a01 	vldr	s0, [pc, #4]	; d449c <_ZN7DS18B2014getTemperatureEb+0x34>
   d449a:	bd38      	pop	{r3, r4, r5, pc}
   d449c:	7fc00000 	.word	0x7fc00000

000d44a0 <_ZN7DS18B2019convertToFahrenheitEf>:
  
  return celsius;
}

float DS18B20::convertToFahrenheit(float celsius)
{
   d44a0:	b508      	push	{r3, lr}
  return celsius * 1.8 + 32.0;
   d44a2:	ee10 0a10 	vmov	r0, s0
   d44a6:	f001 ff73 	bl	d6390 <__aeabi_f2d>
   d44aa:	a308      	add	r3, pc, #32	; (adr r3, d44cc <_ZN7DS18B2019convertToFahrenheitEf+0x2c>)
   d44ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44b0:	f001 ffc2 	bl	d6438 <__aeabi_dmul>
   d44b4:	2200      	movs	r2, #0
   d44b6:	4b04      	ldr	r3, [pc, #16]	; (d44c8 <_ZN7DS18B2019convertToFahrenheitEf+0x28>)
   d44b8:	f001 fe0c 	bl	d60d4 <__adddf3>
   d44bc:	f002 fab4 	bl	d6a28 <__aeabi_d2f>
}
   d44c0:	ee00 0a10 	vmov	s0, r0
   d44c4:	bd08      	pop	{r3, pc}
   d44c6:	bf00      	nop
   d44c8:	40400000 	.word	0x40400000
   d44cc:	cccccccd 	.word	0xcccccccd
   d44d0:	3ffccccc 	.word	0x3ffccccc

000d44d4 <_ZN7DS18B208crcCheckEv>:

bool DS18B20::crcCheck()
{
  return (_dataCRC == _readCRC);
   d44d4:	7e02      	ldrb	r2, [r0, #24]
   d44d6:	7e40      	ldrb	r0, [r0, #25]
}
   d44d8:	1a13      	subs	r3, r2, r0
   d44da:	4258      	negs	r0, r3
   d44dc:	4158      	adcs	r0, r3
   d44de:	4770      	bx	lr

000d44e0 <_GLOBAL__sub_I__ZN7DS18B20C2Etb>:
   d44e0:	f000 ba3e 	b.w	d4960 <HAL_Pin_Map>

000d44e4 <_GLOBAL__sub_I__ZN6MS5803C2E11ms5803_addr>:
   d44e4:	f000 ba3c 	b.w	d4960 <HAL_Pin_Map>

000d44e8 <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d44e8:	f000 ba3a 	b.w	d4960 <HAL_Pin_Map>

000d44ec <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d44ec:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d44ee:	6803      	ldr	r3, [r0, #0]
   d44f0:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d44f2:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d44f4:	d904      	bls.n	d4500 <nrf_gpio_pin_port_decode+0x14>
   d44f6:	4a07      	ldr	r2, [pc, #28]	; (d4514 <nrf_gpio_pin_port_decode+0x28>)
   d44f8:	2100      	movs	r1, #0
   d44fa:	200a      	movs	r0, #10
   d44fc:	f000 fb28 	bl	d4b50 <panic_>
#if (GPIO_COUNT == 1)
    // The oldest definition case
    return NRF_GPIO;
#else
    if (*p_pin < P0_PIN_NUM)
   d4500:	6823      	ldr	r3, [r4, #0]
   d4502:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4504:	bf83      	ittte	hi
   d4506:	f003 031f 	andhi.w	r3, r3, #31
   d450a:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d450c:	4802      	ldrhi	r0, [pc, #8]	; (d4518 <nrf_gpio_pin_port_decode+0x2c>)
    // The oldest definition case
    return NRF_GPIO;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d450e:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d4512:	bd10      	pop	{r4, pc}
   d4514:	000d4941 	.word	0x000d4941
   d4518:	50000300 	.word	0x50000300

000d451c <_ZN7OneWire19digitalWriteFastLowEv.isra.0>:
      return HAL_GPIO_Read(_pin);
    }

  #else

    inline void digitalWriteFastLow() {
   d451c:	b507      	push	{r0, r1, r2, lr}
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d451e:	4b0b      	ldr	r3, [pc, #44]	; (d454c <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x30>)
   d4520:	681b      	ldr	r3, [r3, #0]
   d4522:	0100      	lsls	r0, r0, #4
   d4524:	1819      	adds	r1, r3, r0
   d4526:	5c1a      	ldrb	r2, [r3, r0]
   d4528:	784b      	ldrb	r3, [r1, #1]
   d452a:	a802      	add	r0, sp, #8
   d452c:	f003 031f 	and.w	r3, r3, #31
   d4530:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4534:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4538:	f7ff ffd8 	bl	d44ec <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d453c:	9a01      	ldr	r2, [sp, #4]
   d453e:	2301      	movs	r3, #1
   d4540:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4542:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
      pinResetFast(_pin);
    }
   d4546:	b003      	add	sp, #12
   d4548:	f85d fb04 	ldr.w	pc, [sp], #4
   d454c:	2003e47c 	.word	0x2003e47c

000d4550 <_ZN7OneWire20digitalWriteFastHighEv.isra.1>:

    inline void digitalWriteFastHigh() {
   d4550:	b507      	push	{r0, r1, r2, lr}

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4552:	4b0b      	ldr	r3, [pc, #44]	; (d4580 <_ZN7OneWire20digitalWriteFastHighEv.isra.1+0x30>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	0100      	lsls	r0, r0, #4
   d4558:	1819      	adds	r1, r3, r0
   d455a:	5c1a      	ldrb	r2, [r3, r0]
   d455c:	784b      	ldrb	r3, [r1, #1]
   d455e:	a802      	add	r0, sp, #8
   d4560:	f003 031f 	and.w	r3, r3, #31
   d4564:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4568:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d456c:	f7ff ffbe 	bl	d44ec <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4570:	9a01      	ldr	r2, [sp, #4]
   d4572:	2301      	movs	r3, #1
   d4574:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4576:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
      pinSetFast(_pin);
    }
   d457a:	b003      	add	sp, #12
   d457c:	f85d fb04 	ldr.w	pc, [sp], #4
   d4580:	2003e47c 	.word	0x2003e47c

000d4584 <_ZN7OneWire15digitalReadFastEv.isra.4>:
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
    }

    inline uint8_t digitalReadFast(void){
   d4584:	b513      	push	{r0, r1, r4, lr}
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4586:	4b0f      	ldr	r3, [pc, #60]	; (d45c4 <_ZN7OneWire15digitalReadFastEv.isra.4+0x40>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	0100      	lsls	r0, r0, #4
   d458c:	181a      	adds	r2, r3, r0
   d458e:	5c1c      	ldrb	r4, [r3, r0]
   d4590:	7853      	ldrb	r3, [r2, #1]
   d4592:	a802      	add	r0, sp, #8
   d4594:	f003 031f 	and.w	r3, r3, #31
   d4598:	ea43 1444 	orr.w	r4, r3, r4, lsl #5
   d459c:	f840 4d04 	str.w	r4, [r0, #-4]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d45a0:	f7ff ffa4 	bl	d44ec <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d45a4:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
   d45a8:	a802      	add	r0, sp, #8
   d45aa:	f840 4d08 	str.w	r4, [r0, #-8]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d45ae:	f7ff ff9d 	bl	d44ec <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d45b2:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
      return pinReadFast(_pin);
   d45b6:	9800      	ldr	r0, [sp, #0]
   d45b8:	fa23 f000 	lsr.w	r0, r3, r0
    }
   d45bc:	f000 0001 	and.w	r0, r0, #1
   d45c0:	b002      	add	sp, #8
   d45c2:	bd10      	pop	{r4, pc}
   d45c4:	2003e47c 	.word	0x2003e47c

000d45c8 <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
   d45c8:	b538      	push	{r3, r4, r5, lr}
   d45ca:	4604      	mov	r4, r0
   d45cc:	460d      	mov	r5, r1
{
    pinMode(pin, INPUT);
   d45ce:	4628      	mov	r0, r5
   d45d0:	2100      	movs	r1, #0
   d45d2:	f001 fbd5 	bl	d5d80 <pinMode>
    _pin = pin;
   d45d6:	8025      	strh	r5, [r4, #0]
}
   d45d8:	4620      	mov	r0, r4
   d45da:	bd38      	pop	{r3, r4, r5, pc}

000d45dc <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
   d45dc:	b538      	push	{r3, r4, r5, lr}
   d45de:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
   d45e0:	f000 ff1c 	bl	d541c <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d45e4:	2100      	movs	r1, #0
   d45e6:	8828      	ldrh	r0, [r5, #0]
   d45e8:	f000 f9c2 	bl	d4970 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
   d45ec:	f000 ff18 	bl	d5420 <_Z10interruptsv>
   d45f0:	247d      	movs	r4, #125	; 0x7d
   d45f2:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do {
        if (--retries == 0) return 0;
   d45f4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d45f8:	d02b      	beq.n	d4652 <_ZN7OneWire5resetEv+0x76>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d45fa:	2002      	movs	r0, #2
   d45fc:	f000 f9a0 	bl	d4940 <HAL_Delay_Microseconds>

        delayMicroseconds(2);
    } while ( !digitalReadFast());
   d4600:	8828      	ldrh	r0, [r5, #0]
   d4602:	f7ff ffbf 	bl	d4584 <_ZN7OneWire15digitalReadFastEv.isra.4>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do {
   d4606:	2800      	cmp	r0, #0
   d4608:	d0f3      	beq.n	d45f2 <_ZN7OneWire5resetEv+0x16>
        if (--retries == 0) return 0;

        delayMicroseconds(2);
    } while ( !digitalReadFast());

    noInterrupts();
   d460a:	f000 ff07 	bl	d541c <_Z12noInterruptsv>

    digitalWriteFastLow();
   d460e:	8828      	ldrh	r0, [r5, #0]
   d4610:	f7ff ff84 	bl	d451c <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4614:	2101      	movs	r1, #1
   d4616:	8828      	ldrh	r0, [r5, #0]
   d4618:	f000 f9aa 	bl	d4970 <HAL_Pin_Mode>
    pinModeFastOutput();   // drive output low

    interrupts();
   d461c:	f000 ff00 	bl	d5420 <_Z10interruptsv>
   d4620:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   d4624:	f000 f98c 	bl	d4940 <HAL_Delay_Microseconds>
    delayMicroseconds(480);
    noInterrupts();
   d4628:	f000 fef8 	bl	d541c <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d462c:	2100      	movs	r1, #0
   d462e:	8828      	ldrh	r0, [r5, #0]
   d4630:	f000 f99e 	bl	d4970 <HAL_Pin_Mode>
   d4634:	2046      	movs	r0, #70	; 0x46
   d4636:	f000 f983 	bl	d4940 <HAL_Delay_Microseconds>

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
   d463a:	8828      	ldrh	r0, [r5, #0]
   d463c:	f7ff ffa2 	bl	d4584 <_ZN7OneWire15digitalReadFastEv.isra.4>
   d4640:	fab0 f480 	clz	r4, r0

    interrupts();
   d4644:	f000 feec 	bl	d5420 <_Z10interruptsv>
   d4648:	f44f 70cd 	mov.w	r0, #410	; 0x19a

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
   d464c:	0964      	lsrs	r4, r4, #5
   d464e:	f000 f977 	bl	d4940 <HAL_Delay_Microseconds>
    interrupts();

    delayMicroseconds(410);

    return r;
}
   d4652:	4620      	mov	r0, r4
   d4654:	bd38      	pop	{r3, r4, r5, pc}

000d4656 <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
   d4656:	b538      	push	{r3, r4, r5, lr}
    if (v & 1) {
   d4658:	f011 0501 	ands.w	r5, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
   d465c:	4604      	mov	r4, r0
    if (v & 1) {
   d465e:	d013      	beq.n	d4688 <_ZN7OneWire9write_bitEh+0x32>
        noInterrupts();
   d4660:	f000 fedc 	bl	d541c <_Z12noInterruptsv>

        digitalWriteFastLow();
   d4664:	8820      	ldrh	r0, [r4, #0]
   d4666:	f7ff ff59 	bl	d451c <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d466a:	2101      	movs	r1, #1
   d466c:	8820      	ldrh	r0, [r4, #0]
   d466e:	f000 f97f 	bl	d4970 <HAL_Pin_Mode>
   d4672:	200a      	movs	r0, #10
   d4674:	f000 f964 	bl	d4940 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4678:	8820      	ldrh	r0, [r4, #0]
   d467a:	2100      	movs	r1, #0
   d467c:	f000 f978 	bl	d4970 <HAL_Pin_Mode>

        delayMicroseconds(10);

        pinModeFastInput();    // float high

        interrupts();
   d4680:	f000 fece 	bl	d5420 <_Z10interruptsv>
   d4684:	2037      	movs	r0, #55	; 0x37
   d4686:	e012      	b.n	d46ae <_ZN7OneWire9write_bitEh+0x58>

        delayMicroseconds(55);
    } else {
        noInterrupts();
   d4688:	f000 fec8 	bl	d541c <_Z12noInterruptsv>

        digitalWriteFastLow();
   d468c:	8820      	ldrh	r0, [r4, #0]
   d468e:	f7ff ff45 	bl	d451c <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4692:	2101      	movs	r1, #1
   d4694:	8820      	ldrh	r0, [r4, #0]
   d4696:	f000 f96b 	bl	d4970 <HAL_Pin_Mode>
   d469a:	2041      	movs	r0, #65	; 0x41
   d469c:	f000 f950 	bl	d4940 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d46a0:	8820      	ldrh	r0, [r4, #0]
   d46a2:	4629      	mov	r1, r5
   d46a4:	f000 f964 	bl	d4970 <HAL_Pin_Mode>

        delayMicroseconds(65);

        pinModeFastInput();    // float high

        interrupts();
   d46a8:	f000 feba 	bl	d5420 <_Z10interruptsv>
   d46ac:	2005      	movs	r0, #5

        delayMicroseconds(5);
    }
}
   d46ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d46b2:	f000 b945 	b.w	d4940 <HAL_Delay_Microseconds>

000d46b6 <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
   d46b6:	b510      	push	{r4, lr}
   d46b8:	4604      	mov	r4, r0
    uint8_t r;

    noInterrupts();
   d46ba:	f000 feaf 	bl	d541c <_Z12noInterruptsv>

    digitalWriteFastLow();
   d46be:	8820      	ldrh	r0, [r4, #0]
   d46c0:	f7ff ff2c 	bl	d451c <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d46c4:	2101      	movs	r1, #1
   d46c6:	8820      	ldrh	r0, [r4, #0]
   d46c8:	f000 f952 	bl	d4970 <HAL_Pin_Mode>
   d46cc:	2003      	movs	r0, #3
   d46ce:	f000 f937 	bl	d4940 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d46d2:	2100      	movs	r1, #0
   d46d4:	8820      	ldrh	r0, [r4, #0]
   d46d6:	f000 f94b 	bl	d4970 <HAL_Pin_Mode>
   d46da:	200a      	movs	r0, #10
   d46dc:	f000 f930 	bl	d4940 <HAL_Delay_Microseconds>

    pinModeFastInput();    // let pin float, pull up will raise

    delayMicroseconds(10);

    r = digitalReadFast();
   d46e0:	8820      	ldrh	r0, [r4, #0]
   d46e2:	f7ff ff4f 	bl	d4584 <_ZN7OneWire15digitalReadFastEv.isra.4>
   d46e6:	4604      	mov	r4, r0

    interrupts();
   d46e8:	f000 fe9a 	bl	d5420 <_Z10interruptsv>
   d46ec:	2035      	movs	r0, #53	; 0x35
   d46ee:	f000 f927 	bl	d4940 <HAL_Delay_Microseconds>
    delayMicroseconds(53);

    return r;
}
   d46f2:	4620      	mov	r0, r4
   d46f4:	bd10      	pop	{r4, pc}

000d46f6 <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
   d46f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d46fa:	4605      	mov	r5, r0
   d46fc:	4688      	mov	r8, r1
   d46fe:	4617      	mov	r7, r2
   d4700:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4702:	2401      	movs	r4, #1
        OneWire::write_bit( (bitMask & v)?1:0);
   d4704:	ea18 0f04 	tst.w	r8, r4
   d4708:	bf14      	ite	ne
   d470a:	2101      	movne	r1, #1
   d470c:	2100      	moveq	r1, #0
   d470e:	4628      	mov	r0, r5
   d4710:	f7ff ffa1 	bl	d4656 <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4714:	0064      	lsls	r4, r4, #1
   d4716:	3e01      	subs	r6, #1
   d4718:	b2e4      	uxtb	r4, r4
   d471a:	d1f3      	bne.n	d4704 <_ZN7OneWire5writeEhh+0xe>
        OneWire::write_bit( (bitMask & v)?1:0);
    }

    if ( power) {
   d471c:	b167      	cbz	r7, d4738 <_ZN7OneWire5writeEhh+0x42>
        noInterrupts();
   d471e:	f000 fe7d 	bl	d541c <_Z12noInterruptsv>

        digitalWriteFastHigh();
   d4722:	8828      	ldrh	r0, [r5, #0]
   d4724:	f7ff ff14 	bl	d4550 <_ZN7OneWire20digitalWriteFastHighEv.isra.1>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4728:	8828      	ldrh	r0, [r5, #0]
   d472a:	2101      	movs	r1, #1
   d472c:	f000 f920 	bl	d4970 <HAL_Pin_Mode>
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
    }
}
   d4730:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
   d4734:	f000 be74 	b.w	d5420 <_Z10interruptsv>
   d4738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d473c <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read() 
{
   d473c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d473e:	4607      	mov	r7, r0
   d4740:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
   d4742:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4744:	2401      	movs	r4, #1
        if ( OneWire::read_bit()) r |= bitMask;
   d4746:	4638      	mov	r0, r7
   d4748:	f7ff ffb5 	bl	d46b6 <_ZN7OneWire8read_bitEv>
   d474c:	b100      	cbz	r0, d4750 <_ZN7OneWire4readEv+0x14>
   d474e:	4325      	orrs	r5, r4
uint8_t OneWire::read() 
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4750:	0064      	lsls	r4, r4, #1
   d4752:	3e01      	subs	r6, #1
   d4754:	b2e4      	uxtb	r4, r4
   d4756:	d1f6      	bne.n	d4746 <_ZN7OneWire4readEv+0xa>
        if ( OneWire::read_bit()) r |= bitMask;
    }

    return r;
}
   d4758:	4628      	mov	r0, r5
   d475a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d475c <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d475c:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55);           // Choose ROM
   d475e:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4760:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55);           // Choose ROM
   d4762:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4764:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55);           // Choose ROM
   d4766:	f7ff ffc6 	bl	d46f6 <_ZN7OneWire5writeEhh>
   d476a:	1e65      	subs	r5, r4, #1
   d476c:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++) write(rom[i]);
   d476e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d4772:	2200      	movs	r2, #0
   d4774:	4630      	mov	r0, r6
   d4776:	f7ff ffbe 	bl	d46f6 <_ZN7OneWire5writeEhh>
   d477a:	42a5      	cmp	r5, r4
   d477c:	d1f7      	bne.n	d476e <_ZN7OneWire6selectEPKh+0x12>
}
   d477e:	bd70      	pop	{r4, r5, r6, pc}

000d4780 <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC);           // Skip ROM
   d4780:	2200      	movs	r2, #0
   d4782:	21cc      	movs	r1, #204	; 0xcc
   d4784:	f7ff bfb7 	b.w	d46f6 <_ZN7OneWire5writeEhh>

000d4788 <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
   d4788:	2300      	movs	r3, #0
   d478a:	7283      	strb	r3, [r0, #10]
    LastDeviceFlag = FALSE;
   d478c:	7303      	strb	r3, [r0, #12]
    LastFamilyDiscrepancy = 0;
   d478e:	72c3      	strb	r3, [r0, #11]
   d4790:	f100 020a 	add.w	r2, r0, #10
   d4794:	3002      	adds	r0, #2

    for(int i = 7; ; i--) {
        ROM_NO[i] = 0;
   d4796:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if ( i == 0) break;
   d479a:	4282      	cmp	r2, r0
   d479c:	d1fb      	bne.n	d4796 <_ZN7OneWire12reset_searchEv+0xe>
    }
}
   d479e:	4770      	bx	lr

000d47a0 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d47a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d47a4:	7b05      	ldrb	r5, [r0, #12]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d47a6:	4604      	mov	r4, r0
   d47a8:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d47aa:	2d00      	cmp	r5, #0
   d47ac:	d15e      	bne.n	d486c <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset()){
   d47ae:	f7ff ff15 	bl	d45dc <_ZN7OneWire5resetEv>
   d47b2:	b920      	cbnz	r0, d47be <_ZN7OneWire6searchEPh+0x1e>
            // reset the search
            LastDiscrepancy = 0;
   d47b4:	72a0      	strb	r0, [r4, #10]
            LastDeviceFlag = FALSE;
   d47b6:	7320      	strb	r0, [r4, #12]
            LastFamilyDiscrepancy = 0;
   d47b8:	72e0      	strb	r0, [r4, #11]

            return FALSE;
   d47ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
   d47be:	462a      	mov	r2, r5
   d47c0:	21f0      	movs	r1, #240	; 0xf0
   d47c2:	4620      	mov	r0, r4
   d47c4:	f7ff ff97 	bl	d46f6 <_ZN7OneWire5writeEhh>

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
   d47c8:	2601      	movs	r6, #1

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
   d47ca:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d47cc:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
   d47ce:	4620      	mov	r0, r4
   d47d0:	f7ff ff71 	bl	d46b6 <_ZN7OneWire8read_bitEv>
   d47d4:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
   d47d6:	4620      	mov	r0, r4
   d47d8:	f7ff ff6d 	bl	d46b6 <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1)){
   d47dc:	f1b9 0f01 	cmp.w	r9, #1
   d47e0:	d102      	bne.n	d47e8 <_ZN7OneWire6searchEPh+0x48>
   d47e2:	2801      	cmp	r0, #1
   d47e4:	d11b      	bne.n	d481e <_ZN7OneWire6searchEPh+0x7e>
   d47e6:	e037      	b.n	d4858 <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit){
   d47e8:	4581      	cmp	r9, r0
   d47ea:	eb04 0305 	add.w	r3, r4, r5
   d47ee:	d11e      	bne.n	d482e <_ZN7OneWire6searchEPh+0x8e>
                    search_direction = id_bit;  // bit write value for search
                }
                else{
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
   d47f0:	7aa2      	ldrb	r2, [r4, #10]
   d47f2:	4297      	cmp	r7, r2
   d47f4:	d207      	bcs.n	d4806 <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
   d47f6:	789a      	ldrb	r2, [r3, #2]
   d47f8:	4216      	tst	r6, r2
   d47fa:	bf14      	ite	ne
   d47fc:	f04f 0901 	movne.w	r9, #1
   d4800:	f04f 0900 	moveq.w	r9, #0
   d4804:	e004      	b.n	d4810 <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
   d4806:	bf0c      	ite	eq
   d4808:	f04f 0901 	moveq.w	r9, #1
   d480c:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0){
   d4810:	f1b9 0f00 	cmp.w	r9, #0
   d4814:	d103      	bne.n	d481e <_ZN7OneWire6searchEPh+0x7e>
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
   d4816:	2f08      	cmp	r7, #8
   d4818:	d808      	bhi.n	d482c <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
   d481a:	72e7      	strb	r7, [r4, #11]
   d481c:	e006      	b.n	d482c <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
   d481e:	1962      	adds	r2, r4, r5
   d4820:	f04f 0901 	mov.w	r9, #1
   d4824:	7893      	ldrb	r3, [r2, #2]
   d4826:	4333      	orrs	r3, r6
   d4828:	7093      	strb	r3, [r2, #2]
   d482a:	e004      	b.n	d4836 <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d482c:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;
   d482e:	789a      	ldrb	r2, [r3, #2]
   d4830:	ea22 0206 	bic.w	r2, r2, r6
   d4834:	709a      	strb	r2, [r3, #2]

                // serial number search direction write bit
                write_bit(search_direction);
   d4836:	4649      	mov	r1, r9
   d4838:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
   d483a:	0076      	lsls	r6, r6, #1
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
   d483c:	f7ff ff0b 	bl	d4656 <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
   d4840:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
   d4844:	bf04      	itt	eq
   d4846:	3501      	addeq	r5, #1
   d4848:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d484a:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
   d484e:	bf08      	it	eq
   d4850:	2601      	moveq	r6, #1
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
   d4852:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d4854:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
   d4856:	d9ba      	bls.n	d47ce <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
   d4858:	2f40      	cmp	r7, #64	; 0x40
   d485a:	d907      	bls.n	d486c <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
   d485c:	f884 a00a 	strb.w	sl, [r4, #10]

            // check for last device
            if (LastDiscrepancy == 0)
   d4860:	f1ba 0f00 	cmp.w	sl, #0
   d4864:	d112      	bne.n	d488c <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
   d4866:	2301      	movs	r3, #1
   d4868:	7323      	strb	r3, [r4, #12]
   d486a:	e00f      	b.n	d488c <_ZN7OneWire6searchEPh+0xec>
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
        LastDiscrepancy = 0;
   d486c:	2000      	movs	r0, #0
   d486e:	72a0      	strb	r0, [r4, #10]
        LastDeviceFlag = FALSE;
   d4870:	7320      	strb	r0, [r4, #12]
        LastFamilyDiscrepancy = 0;
   d4872:	72e0      	strb	r0, [r4, #11]
   d4874:	1c63      	adds	r3, r4, #1
   d4876:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d487a:	3409      	adds	r4, #9
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
   d487c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   d4880:	f808 2f01 	strb.w	r2, [r8, #1]!
   d4884:	42a3      	cmp	r3, r4
   d4886:	d1f9      	bne.n	d487c <_ZN7OneWire6searchEPh+0xdc>
   d4888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
   d488c:	78a3      	ldrb	r3, [r4, #2]
   d488e:	2b00      	cmp	r3, #0
   d4890:	d0ec      	beq.n	d486c <_ZN7OneWire6searchEPh+0xcc>
   d4892:	2001      	movs	r0, #1
   d4894:	e7ee      	b.n	d4874 <_ZN7OneWire6searchEPh+0xd4>

000d4896 <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
   d4896:	b530      	push	{r4, r5, lr}
   d4898:	4605      	mov	r5, r0
    uint8_t crc = 0;
   d489a:	2000      	movs	r0, #0

    while (len--) {
   d489c:	3901      	subs	r1, #1
   d489e:	b2c9      	uxtb	r1, r1
   d48a0:	29ff      	cmp	r1, #255	; 0xff
   d48a2:	d013      	beq.n	d48cc <_ZN7OneWire4crc8EPhh+0x36>
        uint8_t inbyte = *addr++;
   d48a4:	f815 4b01 	ldrb.w	r4, [r5], #1
   d48a8:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--) {
            uint8_t mix = (crc ^ inbyte) & 0x01;
   d48aa:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix) crc ^= 0x8C;
   d48ae:	f013 0f01 	tst.w	r3, #1
   d48b2:	ea4f 0050 	mov.w	r0, r0, lsr #1
   d48b6:	bf1c      	itt	ne
   d48b8:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
   d48bc:	b2d8      	uxtbne	r0, r3
   d48be:	1e53      	subs	r3, r2, #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
   d48c0:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix) crc ^= 0x8C;
                inbyte >>= 1;
   d48c4:	ea4f 0454 	mov.w	r4, r4, lsr #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
   d48c8:	d1ef      	bne.n	d48aa <_ZN7OneWire4crc8EPhh+0x14>
   d48ca:	e7e7      	b.n	d489c <_ZN7OneWire4crc8EPhh+0x6>
                inbyte >>= 1;
        }
    }

    return crc;
}
   d48cc:	bd30      	pop	{r4, r5, pc}
	...

000d48d0 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d48d0:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d48d2:	f000 f845 	bl	d4960 <HAL_Pin_Map>
   d48d6:	4b01      	ldr	r3, [pc, #4]	; (d48dc <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d48d8:	6018      	str	r0, [r3, #0]
   d48da:	bd08      	pop	{r3, pc}
   d48dc:	2003e47c 	.word	0x2003e47c

000d48e0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b02      	ldr	r3, [pc, #8]	; (d48ec <os_thread_is_current+0xc>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	689b      	ldr	r3, [r3, #8]
   d48e8:	9301      	str	r3, [sp, #4]
   d48ea:	bd08      	pop	{r3, pc}
   d48ec:	00030248 	.word	0x00030248

000d48f0 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d48f0:	b508      	push	{r3, lr}
   d48f2:	4b02      	ldr	r3, [pc, #8]	; (d48fc <os_thread_join+0xc>)
   d48f4:	681b      	ldr	r3, [r3, #0]
   d48f6:	691b      	ldr	r3, [r3, #16]
   d48f8:	9301      	str	r3, [sp, #4]
   d48fa:	bd08      	pop	{r3, pc}
   d48fc:	00030248 	.word	0x00030248

000d4900 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4900:	b508      	push	{r3, lr}
   d4902:	4b02      	ldr	r3, [pc, #8]	; (d490c <os_thread_cleanup+0xc>)
   d4904:	681b      	ldr	r3, [r3, #0]
   d4906:	695b      	ldr	r3, [r3, #20]
   d4908:	9301      	str	r3, [sp, #4]
   d490a:	bd08      	pop	{r3, pc}
   d490c:	00030248 	.word	0x00030248

000d4910 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4910:	b508      	push	{r3, lr}
   d4912:	4b02      	ldr	r3, [pc, #8]	; (d491c <os_mutex_create+0xc>)
   d4914:	681b      	ldr	r3, [r3, #0]
   d4916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4918:	9301      	str	r3, [sp, #4]
   d491a:	bd08      	pop	{r3, pc}
   d491c:	00030248 	.word	0x00030248

000d4920 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4920:	b508      	push	{r3, lr}
   d4922:	4b02      	ldr	r3, [pc, #8]	; (d492c <os_mutex_recursive_create+0xc>)
   d4924:	681b      	ldr	r3, [r3, #0]
   d4926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4928:	9301      	str	r3, [sp, #4]
   d492a:	bd08      	pop	{r3, pc}
   d492c:	00030248 	.word	0x00030248

000d4930 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4930:	b508      	push	{r3, lr}
   d4932:	4b02      	ldr	r3, [pc, #8]	; (d493c <HAL_RNG_GetRandomNumber+0xc>)
   d4934:	681b      	ldr	r3, [r3, #0]
   d4936:	685b      	ldr	r3, [r3, #4]
   d4938:	9301      	str	r3, [sp, #4]
   d493a:	bd08      	pop	{r3, pc}
   d493c:	00030218 	.word	0x00030218

000d4940 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4940:	b508      	push	{r3, lr}
   d4942:	4b02      	ldr	r3, [pc, #8]	; (d494c <HAL_Delay_Microseconds+0xc>)
   d4944:	681b      	ldr	r3, [r3, #0]
   d4946:	68db      	ldr	r3, [r3, #12]
   d4948:	9301      	str	r3, [sp, #4]
   d494a:	bd08      	pop	{r3, pc}
   d494c:	00030218 	.word	0x00030218

000d4950 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4950:	b508      	push	{r3, lr}
   d4952:	4b02      	ldr	r3, [pc, #8]	; (d495c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4954:	681b      	ldr	r3, [r3, #0]
   d4956:	695b      	ldr	r3, [r3, #20]
   d4958:	9301      	str	r3, [sp, #4]
   d495a:	bd08      	pop	{r3, pc}
   d495c:	00030218 	.word	0x00030218

000d4960 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4960:	b508      	push	{r3, lr}
   d4962:	4b02      	ldr	r3, [pc, #8]	; (d496c <HAL_Pin_Map+0xc>)
   d4964:	681b      	ldr	r3, [r3, #0]
   d4966:	681b      	ldr	r3, [r3, #0]
   d4968:	9301      	str	r3, [sp, #4]
   d496a:	bd08      	pop	{r3, pc}
   d496c:	0003022c 	.word	0x0003022c

000d4970 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4970:	b508      	push	{r3, lr}
   d4972:	4b02      	ldr	r3, [pc, #8]	; (d497c <HAL_Pin_Mode+0xc>)
   d4974:	681b      	ldr	r3, [r3, #0]
   d4976:	689b      	ldr	r3, [r3, #8]
   d4978:	9301      	str	r3, [sp, #4]
   d497a:	bd08      	pop	{r3, pc}
   d497c:	0003022c 	.word	0x0003022c

000d4980 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d4980:	b508      	push	{r3, lr}
   d4982:	4b02      	ldr	r3, [pc, #8]	; (d498c <HAL_Interrupts_Enable_All+0xc>)
   d4984:	681b      	ldr	r3, [r3, #0]
   d4986:	6a1b      	ldr	r3, [r3, #32]
   d4988:	9301      	str	r3, [sp, #4]
   d498a:	bd08      	pop	{r3, pc}
   d498c:	0003022c 	.word	0x0003022c

000d4990 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d4990:	b508      	push	{r3, lr}
   d4992:	4b02      	ldr	r3, [pc, #8]	; (d499c <HAL_Interrupts_Disable_All+0xc>)
   d4994:	681b      	ldr	r3, [r3, #0]
   d4996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4998:	9301      	str	r3, [sp, #4]
   d499a:	bd08      	pop	{r3, pc}
   d499c:	0003022c 	.word	0x0003022c

000d49a0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d49a0:	b508      	push	{r3, lr}
   d49a2:	4b02      	ldr	r3, [pc, #8]	; (d49ac <HAL_I2C_Write_Data+0xc>)
   d49a4:	681b      	ldr	r3, [r3, #0]
   d49a6:	6a1b      	ldr	r3, [r3, #32]
   d49a8:	9301      	str	r3, [sp, #4]
   d49aa:	bd08      	pop	{r3, pc}
   d49ac:	00030228 	.word	0x00030228

000d49b0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d49b0:	b508      	push	{r3, lr}
   d49b2:	4b02      	ldr	r3, [pc, #8]	; (d49bc <HAL_I2C_Available_Data+0xc>)
   d49b4:	681b      	ldr	r3, [r3, #0]
   d49b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d49b8:	9301      	str	r3, [sp, #4]
   d49ba:	bd08      	pop	{r3, pc}
   d49bc:	00030228 	.word	0x00030228

000d49c0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d49c0:	b508      	push	{r3, lr}
   d49c2:	4b02      	ldr	r3, [pc, #8]	; (d49cc <HAL_I2C_Read_Data+0xc>)
   d49c4:	681b      	ldr	r3, [r3, #0]
   d49c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d49c8:	9301      	str	r3, [sp, #4]
   d49ca:	bd08      	pop	{r3, pc}
   d49cc:	00030228 	.word	0x00030228

000d49d0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d49d0:	b508      	push	{r3, lr}
   d49d2:	4b02      	ldr	r3, [pc, #8]	; (d49dc <HAL_I2C_Peek_Data+0xc>)
   d49d4:	681b      	ldr	r3, [r3, #0]
   d49d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d49d8:	9301      	str	r3, [sp, #4]
   d49da:	bd08      	pop	{r3, pc}
   d49dc:	00030228 	.word	0x00030228

000d49e0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d49e0:	b508      	push	{r3, lr}
   d49e2:	4b02      	ldr	r3, [pc, #8]	; (d49ec <HAL_I2C_Flush_Data+0xc>)
   d49e4:	681b      	ldr	r3, [r3, #0]
   d49e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d49e8:	9301      	str	r3, [sp, #4]
   d49ea:	bd08      	pop	{r3, pc}
   d49ec:	00030228 	.word	0x00030228

000d49f0 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d49f0:	b508      	push	{r3, lr}
   d49f2:	4b02      	ldr	r3, [pc, #8]	; (d49fc <HAL_I2C_Is_Enabled+0xc>)
   d49f4:	681b      	ldr	r3, [r3, #0]
   d49f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d49f8:	9301      	str	r3, [sp, #4]
   d49fa:	bd08      	pop	{r3, pc}
   d49fc:	00030228 	.word	0x00030228

000d4a00 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b02      	ldr	r3, [pc, #8]	; (d4a0c <HAL_I2C_Init+0xc>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4a08:	9301      	str	r3, [sp, #4]
   d4a0a:	bd08      	pop	{r3, pc}
   d4a0c:	00030228 	.word	0x00030228

000d4a10 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4a10:	b508      	push	{r3, lr}
   d4a12:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <inet_inet_ntop+0xc>)
   d4a14:	681b      	ldr	r3, [r3, #0]
   d4a16:	695b      	ldr	r3, [r3, #20]
   d4a18:	9301      	str	r3, [sp, #4]
   d4a1a:	bd08      	pop	{r3, pc}
   d4a1c:	00030264 	.word	0x00030264

000d4a20 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4a20:	b508      	push	{r3, lr}
   d4a22:	4b02      	ldr	r3, [pc, #8]	; (d4a2c <netdb_freeaddrinfo+0xc>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	689b      	ldr	r3, [r3, #8]
   d4a28:	9301      	str	r3, [sp, #4]
   d4a2a:	bd08      	pop	{r3, pc}
   d4a2c:	00030268 	.word	0x00030268

000d4a30 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b02      	ldr	r3, [pc, #8]	; (d4a3c <netdb_getaddrinfo+0xc>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	68db      	ldr	r3, [r3, #12]
   d4a38:	9301      	str	r3, [sp, #4]
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	00030268 	.word	0x00030268

000d4a40 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <HAL_SPI_Init+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	69db      	ldr	r3, [r3, #28]
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	00030230 	.word	0x00030230

000d4a50 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <HAL_SPI_Is_Enabled+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	6a1b      	ldr	r3, [r3, #32]
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	00030230 	.word	0x00030230

000d4a60 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <HAL_USART_Init+0xc>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	681b      	ldr	r3, [r3, #0]
   d4a68:	9301      	str	r3, [sp, #4]
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	0003023c 	.word	0x0003023c

000d4a70 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <HAL_USART_Write_Data+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	68db      	ldr	r3, [r3, #12]
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	0003023c 	.word	0x0003023c

000d4a80 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <HAL_USART_Available_Data+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	691b      	ldr	r3, [r3, #16]
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	0003023c 	.word	0x0003023c

000d4a90 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <HAL_USART_Read_Data+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	695b      	ldr	r3, [r3, #20]
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	0003023c 	.word	0x0003023c

000d4aa0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <HAL_USART_Peek_Data+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	699b      	ldr	r3, [r3, #24]
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	0003023c 	.word	0x0003023c

000d4ab0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <HAL_USART_Flush_Data+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	69db      	ldr	r3, [r3, #28]
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	0003023c 	.word	0x0003023c

000d4ac0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <HAL_USART_Is_Enabled+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	6a1b      	ldr	r3, [r3, #32]
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	0003023c 	.word	0x0003023c

000d4ad0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <HAL_USART_Available_Data_For_Write+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	0003023c 	.word	0x0003023c

000d4ae0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <HAL_USB_USART_Init+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	681b      	ldr	r3, [r3, #0]
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	0003024c 	.word	0x0003024c

000d4af0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <HAL_USB_USART_Begin+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	685b      	ldr	r3, [r3, #4]
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	0003024c 	.word	0x0003024c

000d4b00 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <HAL_USB_USART_Available_Data+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	691b      	ldr	r3, [r3, #16]
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	0003024c 	.word	0x0003024c

000d4b10 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	695b      	ldr	r3, [r3, #20]
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	0003024c 	.word	0x0003024c

000d4b20 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <HAL_USB_USART_Receive_Data+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	699b      	ldr	r3, [r3, #24]
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	0003024c 	.word	0x0003024c

000d4b30 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <HAL_USB_USART_Send_Data+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	69db      	ldr	r3, [r3, #28]
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	0003024c 	.word	0x0003024c

000d4b40 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <HAL_USB_USART_Flush_Data+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	6a1b      	ldr	r3, [r3, #32]
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	0003024c 	.word	0x0003024c

000d4b50 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4b50:	b508      	push	{r3, lr}
   d4b52:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <panic_+0xc>)
   d4b54:	681b      	ldr	r3, [r3, #0]
   d4b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4b58:	9301      	str	r3, [sp, #4]
   d4b5a:	bd08      	pop	{r3, pc}
   d4b5c:	00030260 	.word	0x00030260

000d4b60 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4b60:	b508      	push	{r3, lr}
   d4b62:	4b02      	ldr	r3, [pc, #8]	; (d4b6c <set_system_mode+0xc>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	685b      	ldr	r3, [r3, #4]
   d4b68:	9301      	str	r3, [sp, #4]
   d4b6a:	bd08      	pop	{r3, pc}
   d4b6c:	00030220 	.word	0x00030220

000d4b70 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4b70:	b508      	push	{r3, lr}
   d4b72:	4b02      	ldr	r3, [pc, #8]	; (d4b7c <system_delay_ms+0xc>)
   d4b74:	681b      	ldr	r3, [r3, #0]
   d4b76:	695b      	ldr	r3, [r3, #20]
   d4b78:	9301      	str	r3, [sp, #4]
   d4b7a:	bd08      	pop	{r3, pc}
   d4b7c:	00030220 	.word	0x00030220

000d4b80 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4b80:	b508      	push	{r3, lr}
   d4b82:	4b02      	ldr	r3, [pc, #8]	; (d4b8c <application_thread_current+0xc>)
   d4b84:	681b      	ldr	r3, [r3, #0]
   d4b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4b88:	9301      	str	r3, [sp, #4]
   d4b8a:	bd08      	pop	{r3, pc}
   d4b8c:	00030220 	.word	0x00030220

000d4b90 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4b90:	b508      	push	{r3, lr}
   d4b92:	4b02      	ldr	r3, [pc, #8]	; (d4b9c <application_thread_invoke+0xc>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4b98:	9301      	str	r3, [sp, #4]
   d4b9a:	bd08      	pop	{r3, pc}
   d4b9c:	00030220 	.word	0x00030220

000d4ba0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4ba0:	b508      	push	{r3, lr}
   d4ba2:	4b03      	ldr	r3, [pc, #12]	; (d4bb0 <system_ctrl_set_app_request_handler+0x10>)
   d4ba4:	681b      	ldr	r3, [r3, #0]
   d4ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4baa:	9301      	str	r3, [sp, #4]
   d4bac:	bd08      	pop	{r3, pc}
   d4bae:	0000      	.short	0x0000
   d4bb0:	00030220 	.word	0x00030220

000d4bb4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4bb4:	b508      	push	{r3, lr}
   d4bb6:	4b03      	ldr	r3, [pc, #12]	; (d4bc4 <system_ctrl_set_result+0x10>)
   d4bb8:	681b      	ldr	r3, [r3, #0]
   d4bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4bbe:	9301      	str	r3, [sp, #4]
   d4bc0:	bd08      	pop	{r3, pc}
   d4bc2:	0000      	.short	0x0000
   d4bc4:	00030220 	.word	0x00030220

000d4bc8 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4bc8:	b508      	push	{r3, lr}
   d4bca:	4b02      	ldr	r3, [pc, #8]	; (d4bd4 <spark_send_event+0xc>)
   d4bcc:	681b      	ldr	r3, [r3, #0]
   d4bce:	6a1b      	ldr	r3, [r3, #32]
   d4bd0:	9301      	str	r3, [sp, #4]
   d4bd2:	bd08      	pop	{r3, pc}
   d4bd4:	00030244 	.word	0x00030244

000d4bd8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4bd8:	b508      	push	{r3, lr}
   d4bda:	4b02      	ldr	r3, [pc, #8]	; (d4be4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4bdc:	681b      	ldr	r3, [r3, #0]
   d4bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4be0:	9301      	str	r3, [sp, #4]
   d4be2:	bd08      	pop	{r3, pc}
   d4be4:	00030244 	.word	0x00030244

000d4be8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4be8:	b508      	push	{r3, lr}
   d4bea:	4b02      	ldr	r3, [pc, #8]	; (d4bf4 <network_connect+0xc>)
   d4bec:	681b      	ldr	r3, [r3, #0]
   d4bee:	685b      	ldr	r3, [r3, #4]
   d4bf0:	9301      	str	r3, [sp, #4]
   d4bf2:	bd08      	pop	{r3, pc}
   d4bf4:	00030240 	.word	0x00030240

000d4bf8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4bf8:	b508      	push	{r3, lr}
   d4bfa:	4b02      	ldr	r3, [pc, #8]	; (d4c04 <network_connecting+0xc>)
   d4bfc:	681b      	ldr	r3, [r3, #0]
   d4bfe:	689b      	ldr	r3, [r3, #8]
   d4c00:	9301      	str	r3, [sp, #4]
   d4c02:	bd08      	pop	{r3, pc}
   d4c04:	00030240 	.word	0x00030240

000d4c08 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4c08:	b508      	push	{r3, lr}
   d4c0a:	4b02      	ldr	r3, [pc, #8]	; (d4c14 <network_disconnect+0xc>)
   d4c0c:	681b      	ldr	r3, [r3, #0]
   d4c0e:	68db      	ldr	r3, [r3, #12]
   d4c10:	9301      	str	r3, [sp, #4]
   d4c12:	bd08      	pop	{r3, pc}
   d4c14:	00030240 	.word	0x00030240

000d4c18 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4c18:	b508      	push	{r3, lr}
   d4c1a:	4b02      	ldr	r3, [pc, #8]	; (d4c24 <network_ready+0xc>)
   d4c1c:	681b      	ldr	r3, [r3, #0]
   d4c1e:	691b      	ldr	r3, [r3, #16]
   d4c20:	9301      	str	r3, [sp, #4]
   d4c22:	bd08      	pop	{r3, pc}
   d4c24:	00030240 	.word	0x00030240

000d4c28 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c28:	b508      	push	{r3, lr}
   d4c2a:	4b02      	ldr	r3, [pc, #8]	; (d4c34 <network_on+0xc>)
   d4c2c:	681b      	ldr	r3, [r3, #0]
   d4c2e:	695b      	ldr	r3, [r3, #20]
   d4c30:	9301      	str	r3, [sp, #4]
   d4c32:	bd08      	pop	{r3, pc}
   d4c34:	00030240 	.word	0x00030240

000d4c38 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c38:	b508      	push	{r3, lr}
   d4c3a:	4b02      	ldr	r3, [pc, #8]	; (d4c44 <network_off+0xc>)
   d4c3c:	681b      	ldr	r3, [r3, #0]
   d4c3e:	699b      	ldr	r3, [r3, #24]
   d4c40:	9301      	str	r3, [sp, #4]
   d4c42:	bd08      	pop	{r3, pc}
   d4c44:	00030240 	.word	0x00030240

000d4c48 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4c48:	b508      	push	{r3, lr}
   d4c4a:	4b02      	ldr	r3, [pc, #8]	; (d4c54 <network_listen+0xc>)
   d4c4c:	681b      	ldr	r3, [r3, #0]
   d4c4e:	69db      	ldr	r3, [r3, #28]
   d4c50:	9301      	str	r3, [sp, #4]
   d4c52:	bd08      	pop	{r3, pc}
   d4c54:	00030240 	.word	0x00030240

000d4c58 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4c58:	b508      	push	{r3, lr}
   d4c5a:	4b02      	ldr	r3, [pc, #8]	; (d4c64 <network_listening+0xc>)
   d4c5c:	681b      	ldr	r3, [r3, #0]
   d4c5e:	6a1b      	ldr	r3, [r3, #32]
   d4c60:	9301      	str	r3, [sp, #4]
   d4c62:	bd08      	pop	{r3, pc}
   d4c64:	00030240 	.word	0x00030240

000d4c68 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4c68:	b508      	push	{r3, lr}
   d4c6a:	4b02      	ldr	r3, [pc, #8]	; (d4c74 <network_set_listen_timeout+0xc>)
   d4c6c:	681b      	ldr	r3, [r3, #0]
   d4c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c70:	9301      	str	r3, [sp, #4]
   d4c72:	bd08      	pop	{r3, pc}
   d4c74:	00030240 	.word	0x00030240

000d4c78 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4c78:	b508      	push	{r3, lr}
   d4c7a:	4b02      	ldr	r3, [pc, #8]	; (d4c84 <network_get_listen_timeout+0xc>)
   d4c7c:	681b      	ldr	r3, [r3, #0]
   d4c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c80:	9301      	str	r3, [sp, #4]
   d4c82:	bd08      	pop	{r3, pc}
   d4c84:	00030240 	.word	0x00030240

000d4c88 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4c88:	b508      	push	{r3, lr}
   d4c8a:	4b02      	ldr	r3, [pc, #8]	; (d4c94 <malloc+0xc>)
   d4c8c:	681b      	ldr	r3, [r3, #0]
   d4c8e:	681b      	ldr	r3, [r3, #0]
   d4c90:	9301      	str	r3, [sp, #4]
   d4c92:	bd08      	pop	{r3, pc}
   d4c94:	0003021c 	.word	0x0003021c

000d4c98 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4c98:	b508      	push	{r3, lr}
   d4c9a:	4b02      	ldr	r3, [pc, #8]	; (d4ca4 <free+0xc>)
   d4c9c:	681b      	ldr	r3, [r3, #0]
   d4c9e:	685b      	ldr	r3, [r3, #4]
   d4ca0:	9301      	str	r3, [sp, #4]
   d4ca2:	bd08      	pop	{r3, pc}
   d4ca4:	0003021c 	.word	0x0003021c

000d4ca8 <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d4ca8:	b508      	push	{r3, lr}
   d4caa:	4b02      	ldr	r3, [pc, #8]	; (d4cb4 <sprintf+0xc>)
   d4cac:	681b      	ldr	r3, [r3, #0]
   d4cae:	68db      	ldr	r3, [r3, #12]
   d4cb0:	9301      	str	r3, [sp, #4]
   d4cb2:	bd08      	pop	{r3, pc}
   d4cb4:	0003021c 	.word	0x0003021c

000d4cb8 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4cb8:	b508      	push	{r3, lr}
   d4cba:	4b02      	ldr	r3, [pc, #8]	; (d4cc4 <abort+0xc>)
   d4cbc:	681b      	ldr	r3, [r3, #0]
   d4cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4cc0:	9301      	str	r3, [sp, #4]
   d4cc2:	bd08      	pop	{r3, pc}
   d4cc4:	0003021c 	.word	0x0003021c

000d4cc8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4cc8:	b508      	push	{r3, lr}
   d4cca:	4b02      	ldr	r3, [pc, #8]	; (d4cd4 <_malloc_r+0xc>)
   d4ccc:	681b      	ldr	r3, [r3, #0]
   d4cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4cd0:	9301      	str	r3, [sp, #4]
   d4cd2:	bd08      	pop	{r3, pc}
   d4cd4:	0003021c 	.word	0x0003021c

000d4cd8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4cd8:	2100      	movs	r1, #0
   d4cda:	f7ff bf49 	b.w	d4b70 <system_delay_ms>

000d4cde <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4cde:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4ce0:	6883      	ldr	r3, [r0, #8]
   d4ce2:	4604      	mov	r4, r0
   d4ce4:	b90b      	cbnz	r3, d4cea <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4ce6:	f001 f8a4 	bl	d5e32 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4cea:	68c3      	ldr	r3, [r0, #12]
   d4cec:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4cee:	68a3      	ldr	r3, [r4, #8]
   d4cf0:	b11b      	cbz	r3, d4cfa <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4cf2:	2203      	movs	r2, #3
   d4cf4:	4621      	mov	r1, r4
   d4cf6:	4620      	mov	r0, r4
   d4cf8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4cfa:	4620      	mov	r0, r4
}
   d4cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4d00:	f7ff b9cb 	b.w	d409a <_ZdlPv>

000d4d04 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4d04:	2200      	movs	r2, #0
   d4d06:	4611      	mov	r1, r2
   d4d08:	6840      	ldr	r0, [r0, #4]
   d4d0a:	f7ff bf85 	b.w	d4c18 <network_ready>

000d4d0e <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4d0e:	2200      	movs	r2, #0
   d4d10:	4611      	mov	r1, r2
   d4d12:	6840      	ldr	r0, [r0, #4]
   d4d14:	f7ff bfa0 	b.w	d4c58 <network_listening>

000d4d18 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4d18:	2200      	movs	r2, #0
   d4d1a:	4611      	mov	r1, r2
   d4d1c:	6840      	ldr	r0, [r0, #4]
   d4d1e:	f7ff bfab 	b.w	d4c78 <network_get_listen_timeout>

000d4d22 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4d22:	2200      	movs	r2, #0
   d4d24:	6840      	ldr	r0, [r0, #4]
   d4d26:	f7ff bf9f 	b.w	d4c68 <network_set_listen_timeout>

000d4d2a <_ZN5spark13CellularClass6listenEb>:
    void clearCredentials() {
        cellular_credentials_clear(nullptr);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4d2a:	2200      	movs	r2, #0
   d4d2c:	f081 0101 	eor.w	r1, r1, #1
   d4d30:	6840      	ldr	r0, [r0, #4]
   d4d32:	f7ff bf89 	b.w	d4c48 <network_listen>

000d4d36 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4d36:	2300      	movs	r3, #0
   d4d38:	461a      	mov	r2, r3
   d4d3a:	4619      	mov	r1, r3
   d4d3c:	6840      	ldr	r0, [r0, #4]
   d4d3e:	f7ff bf7b 	b.w	d4c38 <network_off>

000d4d42 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4d42:	2300      	movs	r3, #0
   d4d44:	461a      	mov	r2, r3
   d4d46:	4619      	mov	r1, r3
   d4d48:	6840      	ldr	r0, [r0, #4]
   d4d4a:	f7ff bf6d 	b.w	d4c28 <network_on>

000d4d4e <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4d4e:	2200      	movs	r2, #0
   d4d50:	4611      	mov	r1, r2
   d4d52:	6840      	ldr	r0, [r0, #4]
   d4d54:	f7ff bf50 	b.w	d4bf8 <network_connecting>

000d4d58 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4d58:	2200      	movs	r2, #0
   d4d5a:	2102      	movs	r1, #2
   d4d5c:	6840      	ldr	r0, [r0, #4]
   d4d5e:	f7ff bf53 	b.w	d4c08 <network_disconnect>

000d4d62 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4d62:	2300      	movs	r3, #0
   d4d64:	461a      	mov	r2, r3
   d4d66:	6840      	ldr	r0, [r0, #4]
   d4d68:	f7ff bf3e 	b.w	d4be8 <network_connect>

000d4d6c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d4d6c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d4d6e:	4d0c      	ldr	r5, [pc, #48]	; (d4da0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
   d4d70:	2428      	movs	r4, #40	; 0x28
   d4d72:	4622      	mov	r2, r4
   d4d74:	2100      	movs	r1, #0
   d4d76:	4628      	mov	r0, r5
   d4d78:	f001 febf 	bl	d6afa <memset>
        cid = -1;
   d4d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4d80:	606b      	str	r3, [r5, #4]
        size = sizeof(*this);
   d4d82:	802c      	strh	r4, [r5, #0]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4d84:	4d07      	ldr	r5, [pc, #28]	; (d4da4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
   d4d86:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d4d88:	4628      	mov	r0, r5
   d4d8a:	606b      	str	r3, [r5, #4]
   d4d8c:	4b06      	ldr	r3, [pc, #24]	; (d4da8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
   d4d8e:	f840 3b08 	str.w	r3, [r0], #8
    char iccid[21];
    char imei[16];

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
   d4d92:	4622      	mov	r2, r4
   d4d94:	2100      	movs	r1, #0
   d4d96:	f001 feb0 	bl	d6afa <memset>
        size = sizeof(*this);
   d4d9a:	812c      	strh	r4, [r5, #8]
   d4d9c:	bd38      	pop	{r3, r4, r5, pc}
   d4d9e:	bf00      	nop
   d4da0:	2003e4b0 	.word	0x2003e4b0
   d4da4:	2003e480 	.word	0x2003e480
   d4da8:	000d6bec 	.word	0x000d6bec

000d4dac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4dac:	4770      	bx	lr

000d4dae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4dae:	2000      	movs	r0, #0
   d4db0:	4770      	bx	lr

000d4db2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4db2:	b510      	push	{r4, lr}
   d4db4:	4604      	mov	r4, r0
   d4db6:	f7ff f970 	bl	d409a <_ZdlPv>
   d4dba:	4620      	mov	r0, r4
   d4dbc:	bd10      	pop	{r4, pc}

000d4dbe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4dbe:	b508      	push	{r3, lr}
      { delete this; }
   d4dc0:	b108      	cbz	r0, d4dc6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d4dc2:	f7ff fff6 	bl	d4db2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4dc6:	bd08      	pop	{r3, pc}

000d4dc8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4dc8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4dca:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4dcc:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4dce:	b113      	cbz	r3, d4dd6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4dd0:	2203      	movs	r2, #3
   d4dd2:	4601      	mov	r1, r0
   d4dd4:	4798      	blx	r3
    }
   d4dd6:	4620      	mov	r0, r4
   d4dd8:	bd10      	pop	{r4, pc}

000d4dda <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4dda:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4ddc:	68c4      	ldr	r4, [r0, #12]
   d4dde:	b1d4      	cbz	r4, d4e16 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4de0:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4de2:	2b02      	cmp	r3, #2
   d4de4:	d102      	bne.n	d4dec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d4de6:	68e0      	ldr	r0, [r4, #12]
   d4de8:	f7ff ff56 	bl	d4c98 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4dec:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4dee:	b12d      	cbz	r5, d4dfc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4df0:	4628      	mov	r0, r5
   d4df2:	f7ff ffe9 	bl	d4dc8 <_ZNSt14_Function_baseD1Ev>
   d4df6:	4628      	mov	r0, r5
   d4df8:	f7ff f94f 	bl	d409a <_ZdlPv>
   d4dfc:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4dfe:	b12d      	cbz	r5, d4e0c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
   d4e00:	4628      	mov	r0, r5
   d4e02:	f7ff ffe1 	bl	d4dc8 <_ZNSt14_Function_baseD1Ev>
   d4e06:	4628      	mov	r0, r5
   d4e08:	f7ff f947 	bl	d409a <_ZdlPv>
   d4e0c:	4620      	mov	r0, r4
   d4e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4e12:	f7ff b942 	b.w	d409a <_ZdlPv>
   d4e16:	bd38      	pop	{r3, r4, r5, pc}

000d4e18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4e18:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4e1a:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4e1c:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4e1e:	b17c      	cbz	r4, d4e40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4e20:	6863      	ldr	r3, [r4, #4]
   d4e22:	3b01      	subs	r3, #1
   d4e24:	6063      	str	r3, [r4, #4]
   d4e26:	b95b      	cbnz	r3, d4e40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4e28:	6823      	ldr	r3, [r4, #0]
   d4e2a:	4620      	mov	r0, r4
   d4e2c:	689b      	ldr	r3, [r3, #8]
   d4e2e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4e30:	68a3      	ldr	r3, [r4, #8]
   d4e32:	3b01      	subs	r3, #1
   d4e34:	60a3      	str	r3, [r4, #8]
   d4e36:	b91b      	cbnz	r3, d4e40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4e38:	6823      	ldr	r3, [r4, #0]
   d4e3a:	4620      	mov	r0, r4
   d4e3c:	68db      	ldr	r3, [r3, #12]
   d4e3e:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4e40:	4628      	mov	r0, r5
   d4e42:	bd38      	pop	{r3, r4, r5, pc}

000d4e44 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d4e44:	b513      	push	{r0, r1, r4, lr}
   d4e46:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d4e48:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d4e4c:	2300      	movs	r3, #0
   d4e4e:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4e50:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d4e52:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d4e54:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4e56:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d4e58:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d4e5a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4e5c:	f7ff ffdc 	bl	d4e18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e60:	4620      	mov	r0, r4
   d4e62:	b002      	add	sp, #8
   d4e64:	bd10      	pop	{r4, pc}

000d4e66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4e66:	680b      	ldr	r3, [r1, #0]
   d4e68:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4e6a:	b113      	cbz	r3, d4e72 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4e6c:	685a      	ldr	r2, [r3, #4]
   d4e6e:	3201      	adds	r2, #1
   d4e70:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4e72:	4770      	bx	lr

000d4e74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d4e74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4e76:	460c      	mov	r4, r1
   d4e78:	ad02      	add	r5, sp, #8
   d4e7a:	f854 3b04 	ldr.w	r3, [r4], #4
   d4e7e:	f845 3d08 	str.w	r3, [r5, #-8]!
   d4e82:	4606      	mov	r6, r0
   d4e84:	460f      	mov	r7, r1
   d4e86:	a801      	add	r0, sp, #4
   d4e88:	4621      	mov	r1, r4
   d4e8a:	f7ff ffec 	bl	d4e66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d4e8e:	4629      	mov	r1, r5
   d4e90:	4630      	mov	r0, r6
   d4e92:	f7ff ffd7 	bl	d4e44 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4e96:	a801      	add	r0, sp, #4
   d4e98:	f7ff ffbe 	bl	d4e18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e9c:	4620      	mov	r0, r4
   d4e9e:	f7ff ffbb 	bl	d4e18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d4ea2:	4638      	mov	r0, r7
   d4ea4:	f7ff f8f9 	bl	d409a <_ZdlPv>
        return p;
    }
   d4ea8:	4630      	mov	r0, r6
   d4eaa:	b003      	add	sp, #12
   d4eac:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4eae <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4eae:	b513      	push	{r0, r1, r4, lr}
   d4eb0:	460b      	mov	r3, r1
   d4eb2:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4eb4:	c803      	ldmia	r0, {r0, r1}
   d4eb6:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4eba:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4ebe:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4ec2:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4ec6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4eca:	b002      	add	sp, #8
   d4ecc:	bd10      	pop	{r4, pc}

000d4ece <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4ece:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4ed0:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4ed2:	b90a      	cbnz	r2, d4ed8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4ed4:	f000 ffad 	bl	d5e32 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4ed8:	68c3      	ldr	r3, [r0, #12]
    }
   d4eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4ede:	4718      	bx	r3

000d4ee0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4ee0:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4ee2:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4ee4:	f100 0110 	add.w	r1, r0, #16
   d4ee8:	f7ff fff1 	bl	d4ece <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4eec:	bd08      	pop	{r3, pc}

000d4eee <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4eee:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d4ef0:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4ef2:	b90a      	cbnz	r2, d4ef8 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4ef4:	f000 ff9d 	bl	d5e32 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4ef8:	68c3      	ldr	r3, [r0, #12]
    }
   d4efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4efe:	4718      	bx	r3

000d4f00 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4f00:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4f02:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4f04:	f100 0110 	add.w	r1, r0, #16
   d4f08:	f7ff fff1 	bl	d4eee <_ZNKSt8functionIFvRKbEEclES1_>
   d4f0c:	bd08      	pop	{r3, pc}

000d4f0e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4f0e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4f10:	2300      	movs	r3, #0
   d4f12:	6083      	str	r3, [r0, #8]
   d4f14:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4f16:	4604      	mov	r4, r0
   d4f18:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4f1a:	b12b      	cbz	r3, d4f28 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4f1c:	2202      	movs	r2, #2
   d4f1e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4f20:	68eb      	ldr	r3, [r5, #12]
   d4f22:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4f24:	68ab      	ldr	r3, [r5, #8]
   d4f26:	60a3      	str	r3, [r4, #8]
	}
    }
   d4f28:	4620      	mov	r0, r4
   d4f2a:	bd38      	pop	{r3, r4, r5, pc}

000d4f2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d4f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d4f30:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d4f34:	b086      	sub	sp, #24
   d4f36:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4f38:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f3c:	808b      	strh	r3, [r1, #4]
   d4f3e:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4f40:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4f42:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f46:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4f48:	f04f 0002 	mov.w	r0, #2
   d4f4c:	e8d4 1f4f 	ldrexb	r1, [r4]
   d4f50:	4299      	cmp	r1, r3
   d4f52:	d103      	bne.n	d4f5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d4f54:	e8c4 0f45 	strexb	r5, r0, [r4]
   d4f58:	2d00      	cmp	r5, #0
   d4f5a:	d1f7      	bne.n	d4f4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d4f5c:	d002      	beq.n	d4f64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d4f5e:	f88d 1000 	strb.w	r1, [sp]
   d4f62:	e06a      	b.n	d503a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d4f64:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4f68:	bf1e      	ittt	ne
   d4f6a:	60e7      	strne	r7, [r4, #12]
   d4f6c:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d4f6e:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4f70:	2301      	movs	r3, #1
   d4f72:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4f76:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4f78:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4f7a:	f104 0308 	add.w	r3, r4, #8
   d4f7e:	f3bf 8f5f 	dmb	sy
   d4f82:	e853 6f00 	ldrex	r6, [r3]
   d4f86:	e843 0200 	strex	r2, r0, [r3]
   d4f8a:	2a00      	cmp	r2, #0
   d4f8c:	d1f9      	bne.n	d4f82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d4f8e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4f92:	2e00      	cmp	r6, #0
   d4f94:	d051      	beq.n	d503a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4f96:	f7ff fdf3 	bl	d4b80 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4f9a:	b120      	cbz	r0, d4fa6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4f9c:	4629      	mov	r1, r5
   d4f9e:	4630      	mov	r0, r6
   d4fa0:	f7ff ff95 	bl	d4ece <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d4fa4:	e043      	b.n	d502e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4fa6:	4631      	mov	r1, r6
   d4fa8:	4668      	mov	r0, sp
   d4faa:	f7ff ffb0 	bl	d4f0e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4fae:	68e0      	ldr	r0, [r4, #12]
   d4fb0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4fb4:	b108      	cbz	r0, d4fba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d4fb6:	f001 fdd1 	bl	d6b5c <strdup>
   d4fba:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4fbc:	2010      	movs	r0, #16
   d4fbe:	f8ad 5014 	strh.w	r5, [sp, #20]
   d4fc2:	f7ff f868 	bl	d4096 <_Znwj>
   d4fc6:	4605      	mov	r5, r0
   d4fc8:	b330      	cbz	r0, d5018 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4fca:	f04f 0800 	mov.w	r8, #0
   d4fce:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4fd2:	2018      	movs	r0, #24
   d4fd4:	f7ff f85f 	bl	d4096 <_Znwj>
   d4fd8:	4604      	mov	r4, r0
   d4fda:	b1c0      	cbz	r0, d500e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4fdc:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4fe0:	4601      	mov	r1, r0
   d4fe2:	4668      	mov	r0, sp
   d4fe4:	f7ff ff63 	bl	d4eae <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4fe8:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d4fea:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4fec:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4fee:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4ff0:	9202      	str	r2, [sp, #8]
   d4ff2:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ff4:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4ff6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d4ffa:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d4ffc:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d5000:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5004:	9b04      	ldr	r3, [sp, #16]
   d5006:	9203      	str	r2, [sp, #12]
   d5008:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d500a:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d500e:	4b0e      	ldr	r3, [pc, #56]	; (d5048 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d5010:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5012:	4b0e      	ldr	r3, [pc, #56]	; (d504c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5014:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5016:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5018:	9804      	ldr	r0, [sp, #16]
   d501a:	f7ff fe3d 	bl	d4c98 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d501e:	4668      	mov	r0, sp
   d5020:	f7ff fed2 	bl	d4dc8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5024:	2200      	movs	r2, #0
   d5026:	4629      	mov	r1, r5
   d5028:	4809      	ldr	r0, [pc, #36]	; (d5050 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d502a:	f7ff fdb1 	bl	d4b90 <application_thread_invoke>
   d502e:	4630      	mov	r0, r6
   d5030:	f7ff feca 	bl	d4dc8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5034:	4630      	mov	r0, r6
   d5036:	f7ff f830 	bl	d409a <_ZdlPv>
   d503a:	4638      	mov	r0, r7
   d503c:	f7ff fe2c 	bl	d4c98 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d5040:	b006      	add	sp, #24
   d5042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5046:	bf00      	nop
   d5048:	000d4ee1 	.word	0x000d4ee1
   d504c:	000d513d 	.word	0x000d513d
   d5050:	000d4cdf 	.word	0x000d4cdf

000d5054 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5058:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d505a:	ad07      	add	r5, sp, #28
   d505c:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5060:	4606      	mov	r6, r0
   d5062:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5064:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5066:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5068:	460f      	mov	r7, r1
   d506a:	4690      	mov	r8, r2
   d506c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5070:	f8c5 b004 	str.w	fp, [r5, #4]
   d5074:	f8c5 b008 	str.w	fp, [r5, #8]
   d5078:	9307      	str	r3, [sp, #28]
   d507a:	f7ff f80c 	bl	d4096 <_Znwj>
   d507e:	4604      	mov	r4, r0
   d5080:	b138      	cbz	r0, d5092 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5082:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5086:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d508a:	f8c0 b004 	str.w	fp, [r0, #4]
   d508e:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5092:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5094:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5096:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d5098:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d509a:	f7fe fffc 	bl	d4096 <_Znwj>
   d509e:	b128      	cbz	r0, d50ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d50a0:	2301      	movs	r3, #1
   d50a2:	6043      	str	r3, [r0, #4]
   d50a4:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d50a6:	4b23      	ldr	r3, [pc, #140]	; (d5134 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d50a8:	6003      	str	r3, [r0, #0]
   d50aa:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d50ac:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d50ae:	4b22      	ldr	r3, [pc, #136]	; (d5138 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d50b0:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d50b2:	2008      	movs	r0, #8
   d50b4:	f7fe ffef 	bl	d4096 <_Znwj>
   d50b8:	4604      	mov	r4, r0
   d50ba:	b128      	cbz	r0, d50c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d50bc:	9b03      	ldr	r3, [sp, #12]
   d50be:	f840 3b04 	str.w	r3, [r0], #4
   d50c2:	a904      	add	r1, sp, #16
   d50c4:	f7ff fecf 	bl	d4e66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d50c8:	9500      	str	r5, [sp, #0]
   d50ca:	fa5f f38a 	uxtb.w	r3, sl
   d50ce:	464a      	mov	r2, r9
   d50d0:	4641      	mov	r1, r8
   d50d2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d50d4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d50d6:	f7ff fd77 	bl	d4bc8 <spark_send_event>
   d50da:	b9b8      	cbnz	r0, d510c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d50dc:	9b03      	ldr	r3, [sp, #12]
   d50de:	785b      	ldrb	r3, [r3, #1]
   d50e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d50e4:	b993      	cbnz	r3, d510c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d50e6:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d50ea:	a905      	add	r1, sp, #20
   d50ec:	a803      	add	r0, sp, #12
   d50ee:	9205      	str	r2, [sp, #20]
   d50f0:	f8ad 3018 	strh.w	r3, [sp, #24]
   d50f4:	f7ff ff1a 	bl	d4f2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d50f8:	9805      	ldr	r0, [sp, #20]
   d50fa:	f7ff fdcd 	bl	d4c98 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d50fe:	a805      	add	r0, sp, #20
   d5100:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5102:	f7ff feb7 	bl	d4e74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5106:	a806      	add	r0, sp, #24
   d5108:	f7ff fe86 	bl	d4e18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d510c:	9b03      	ldr	r3, [sp, #12]
   d510e:	9305      	str	r3, [sp, #20]
   d5110:	a904      	add	r1, sp, #16
   d5112:	a806      	add	r0, sp, #24
   d5114:	f7ff fea7 	bl	d4e66 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5118:	a905      	add	r1, sp, #20
   d511a:	4630      	mov	r0, r6
   d511c:	f7ff fe92 	bl	d4e44 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5120:	a806      	add	r0, sp, #24
   d5122:	f7ff fe79 	bl	d4e18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5126:	a804      	add	r0, sp, #16
   d5128:	f7ff fe76 	bl	d4e18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d512c:	4630      	mov	r0, r6
   d512e:	b00b      	add	sp, #44	; 0x2c
   d5130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5134:	000d6c20 	.word	0x000d6c20
   d5138:	000d52a5 	.word	0x000d52a5

000d513c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d513c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d513e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5140:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5142:	d006      	beq.n	d5152 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5144:	2a03      	cmp	r2, #3
   d5146:	d017      	beq.n	d5178 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5148:	2a01      	cmp	r2, #1
   d514a:	d120      	bne.n	d518e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d514c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d514e:	6003      	str	r3, [r0, #0]
	      break;
   d5150:	e01d      	b.n	d518e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5152:	2018      	movs	r0, #24
   d5154:	680e      	ldr	r6, [r1, #0]
   d5156:	f7fe ff9e 	bl	d4096 <_Znwj>
   d515a:	4605      	mov	r5, r0
   d515c:	b150      	cbz	r0, d5174 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d515e:	4631      	mov	r1, r6
   d5160:	f7ff fed5 	bl	d4f0e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5164:	6930      	ldr	r0, [r6, #16]
   d5166:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d516a:	b108      	cbz	r0, d5170 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d516c:	f001 fcf6 	bl	d6b5c <strdup>
   d5170:	6128      	str	r0, [r5, #16]
   d5172:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5174:	6025      	str	r5, [r4, #0]
   d5176:	e00a      	b.n	d518e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5178:	6804      	ldr	r4, [r0, #0]
   d517a:	b144      	cbz	r4, d518e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d517c:	6920      	ldr	r0, [r4, #16]
   d517e:	f7ff fd8b 	bl	d4c98 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5182:	4620      	mov	r0, r4
   d5184:	f7ff fe20 	bl	d4dc8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5188:	4620      	mov	r0, r4
   d518a:	f7fe ff86 	bl	d409a <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d518e:	2000      	movs	r0, #0
   d5190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5192 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5192:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5194:	2300      	movs	r3, #0
   d5196:	6083      	str	r3, [r0, #8]
   d5198:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d519a:	4604      	mov	r4, r0
   d519c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d519e:	b12b      	cbz	r3, d51ac <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d51a0:	2202      	movs	r2, #2
   d51a2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d51a4:	68eb      	ldr	r3, [r5, #12]
   d51a6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d51a8:	68ab      	ldr	r3, [r5, #8]
   d51aa:	60a3      	str	r3, [r4, #8]
	}
    }
   d51ac:	4620      	mov	r0, r4
   d51ae:	bd38      	pop	{r3, r4, r5, pc}

000d51b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d51b0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d51b2:	b570      	push	{r4, r5, r6, lr}
   d51b4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d51b6:	d006      	beq.n	d51c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d51b8:	2a03      	cmp	r2, #3
   d51ba:	d011      	beq.n	d51e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d51bc:	2a01      	cmp	r2, #1
   d51be:	d117      	bne.n	d51f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d51c0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d51c2:	6003      	str	r3, [r0, #0]
	      break;
   d51c4:	e014      	b.n	d51f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d51c6:	2014      	movs	r0, #20
   d51c8:	680e      	ldr	r6, [r1, #0]
   d51ca:	f7fe ff64 	bl	d4096 <_Znwj>
   d51ce:	4605      	mov	r5, r0
   d51d0:	b120      	cbz	r0, d51dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d51d2:	4631      	mov	r1, r6
   d51d4:	f7ff ffdd 	bl	d5192 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d51d8:	7c33      	ldrb	r3, [r6, #16]
   d51da:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d51dc:	6025      	str	r5, [r4, #0]
   d51de:	e007      	b.n	d51f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d51e0:	6804      	ldr	r4, [r0, #0]
   d51e2:	b12c      	cbz	r4, d51f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d51e4:	4620      	mov	r0, r4
   d51e6:	f7ff fdef 	bl	d4dc8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d51ea:	4620      	mov	r0, r4
   d51ec:	f7fe ff55 	bl	d409a <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d51f0:	2000      	movs	r0, #0
   d51f2:	bd70      	pop	{r4, r5, r6, pc}

000d51f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d51f4:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d51f6:	2300      	movs	r3, #0
   d51f8:	b087      	sub	sp, #28
   d51fa:	460c      	mov	r4, r1
   d51fc:	f3bf 8f5f 	dmb	sy
   d5200:	e850 6f00 	ldrex	r6, [r0]
   d5204:	e840 3200 	strex	r2, r3, [r0]
   d5208:	2a00      	cmp	r2, #0
   d520a:	d1f9      	bne.n	d5200 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d520c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5210:	2e00      	cmp	r6, #0
   d5212:	d03e      	beq.n	d5292 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5214:	4618      	mov	r0, r3
   d5216:	f7ff fcb3 	bl	d4b80 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d521a:	4607      	mov	r7, r0
   d521c:	b120      	cbz	r0, d5228 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d521e:	4621      	mov	r1, r4
   d5220:	4630      	mov	r0, r6
   d5222:	f7ff fe64 	bl	d4eee <_ZNKSt8functionIFvRKbEEclES1_>
   d5226:	e02e      	b.n	d5286 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5228:	4631      	mov	r1, r6
   d522a:	a801      	add	r0, sp, #4
   d522c:	f7ff ffb1 	bl	d5192 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5230:	7823      	ldrb	r3, [r4, #0]
   d5232:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5236:	2010      	movs	r0, #16
   d5238:	f7fe ff2d 	bl	d4096 <_Znwj>
   d523c:	4605      	mov	r5, r0
   d523e:	b1d0      	cbz	r0, d5276 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5240:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5242:	2014      	movs	r0, #20
   d5244:	f7fe ff27 	bl	d4096 <_Znwj>
   d5248:	4604      	mov	r4, r0
   d524a:	b178      	cbz	r0, d526c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d524c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d524e:	4601      	mov	r1, r0
   d5250:	a801      	add	r0, sp, #4
   d5252:	f7ff fe2c 	bl	d4eae <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5256:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5258:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d525a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d525c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d525e:	9203      	str	r2, [sp, #12]
   d5260:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5262:	60e3      	str	r3, [r4, #12]
   d5264:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5268:	9204      	str	r2, [sp, #16]
   d526a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d526c:	4b0a      	ldr	r3, [pc, #40]	; (d5298 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d526e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5270:	4b0a      	ldr	r3, [pc, #40]	; (d529c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5272:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5274:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5276:	a801      	add	r0, sp, #4
   d5278:	f7ff fda6 	bl	d4dc8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d527c:	2200      	movs	r2, #0
   d527e:	4629      	mov	r1, r5
   d5280:	4807      	ldr	r0, [pc, #28]	; (d52a0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d5282:	f7ff fc85 	bl	d4b90 <application_thread_invoke>
   d5286:	4630      	mov	r0, r6
   d5288:	f7ff fd9e 	bl	d4dc8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d528c:	4630      	mov	r0, r6
   d528e:	f7fe ff04 	bl	d409a <_ZdlPv>
        }
    }
   d5292:	b007      	add	sp, #28
   d5294:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5296:	bf00      	nop
   d5298:	000d4f01 	.word	0x000d4f01
   d529c:	000d51b1 	.word	0x000d51b1
   d52a0:	000d4cdf 	.word	0x000d4cdf

000d52a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d52a4:	b530      	push	{r4, r5, lr}
   d52a6:	b085      	sub	sp, #20
   d52a8:	4604      	mov	r4, r0
   d52aa:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d52ac:	4668      	mov	r0, sp
   d52ae:	4611      	mov	r1, r2
   d52b0:	f7ff fde0 	bl	d4e74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d52b4:	b17c      	cbz	r4, d52d6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d52b6:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d52b8:	4628      	mov	r0, r5
   d52ba:	b10d      	cbz	r5, d52c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d52bc:	f001 fc4e 	bl	d6b5c <strdup>
   d52c0:	9002      	str	r0, [sp, #8]
   d52c2:	a902      	add	r1, sp, #8
   d52c4:	4668      	mov	r0, sp
   d52c6:	f8ad 400c 	strh.w	r4, [sp, #12]
   d52ca:	f7ff fe2f 	bl	d4f2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d52ce:	9802      	ldr	r0, [sp, #8]
   d52d0:	f7ff fce2 	bl	d4c98 <free>
   d52d4:	e01d      	b.n	d5312 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d52d6:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d52d8:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d52dc:	f04f 0201 	mov.w	r2, #1
   d52e0:	e8d0 3f4f 	ldrexb	r3, [r0]
   d52e4:	42a3      	cmp	r3, r4
   d52e6:	d103      	bne.n	d52f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d52e8:	e8c0 2f41 	strexb	r1, r2, [r0]
   d52ec:	2900      	cmp	r1, #0
   d52ee:	d1f7      	bne.n	d52e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d52f0:	d002      	beq.n	d52f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d52f2:	f88d 3008 	strb.w	r3, [sp, #8]
   d52f6:	e00c      	b.n	d5312 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d52f8:	f110 010c 	adds.w	r1, r0, #12
   d52fc:	f04f 0301 	mov.w	r3, #1
   d5300:	bf18      	it	ne
   d5302:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5304:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5308:	3004      	adds	r0, #4
   d530a:	f800 3c03 	strb.w	r3, [r0, #-3]
   d530e:	f7ff ff71 	bl	d51f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5312:	a801      	add	r0, sp, #4
   d5314:	f7ff fd80 	bl	d4e18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5318:	b005      	add	sp, #20
   d531a:	bd30      	pop	{r4, r5, pc}

000d531c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d531c:	2200      	movs	r2, #0
   d531e:	4611      	mov	r1, r2
   d5320:	6840      	ldr	r0, [r0, #4]
   d5322:	f7ff bc99 	b.w	d4c58 <network_listening>

000d5326 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5326:	2200      	movs	r2, #0
   d5328:	4611      	mov	r1, r2
   d532a:	6840      	ldr	r0, [r0, #4]
   d532c:	f7ff bca4 	b.w	d4c78 <network_get_listen_timeout>

000d5330 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5330:	2200      	movs	r2, #0
   d5332:	6840      	ldr	r0, [r0, #4]
   d5334:	f7ff bc98 	b.w	d4c68 <network_set_listen_timeout>

000d5338 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5338:	2200      	movs	r2, #0
   d533a:	f081 0101 	eor.w	r1, r1, #1
   d533e:	6840      	ldr	r0, [r0, #4]
   d5340:	f7ff bc82 	b.w	d4c48 <network_listen>

000d5344 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5344:	2300      	movs	r3, #0
   d5346:	461a      	mov	r2, r3
   d5348:	4619      	mov	r1, r3
   d534a:	6840      	ldr	r0, [r0, #4]
   d534c:	f7ff bc74 	b.w	d4c38 <network_off>

000d5350 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5350:	2300      	movs	r3, #0
   d5352:	461a      	mov	r2, r3
   d5354:	4619      	mov	r1, r3
   d5356:	6840      	ldr	r0, [r0, #4]
   d5358:	f7ff bc66 	b.w	d4c28 <network_on>

000d535c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d535c:	2200      	movs	r2, #0
   d535e:	4611      	mov	r1, r2
   d5360:	6840      	ldr	r0, [r0, #4]
   d5362:	f7ff bc59 	b.w	d4c18 <network_ready>

000d5366 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5366:	2200      	movs	r2, #0
   d5368:	4611      	mov	r1, r2
   d536a:	6840      	ldr	r0, [r0, #4]
   d536c:	f7ff bc44 	b.w	d4bf8 <network_connecting>

000d5370 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5370:	2200      	movs	r2, #0
   d5372:	2102      	movs	r1, #2
   d5374:	6840      	ldr	r0, [r0, #4]
   d5376:	f7ff bc47 	b.w	d4c08 <network_disconnect>

000d537a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d537a:	2300      	movs	r3, #0
   d537c:	461a      	mov	r2, r3
   d537e:	6840      	ldr	r0, [r0, #4]
   d5380:	f7ff bc32 	b.w	d4be8 <network_connect>

000d5384 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d5384:	4b02      	ldr	r3, [pc, #8]	; (d5390 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5386:	2203      	movs	r2, #3
   d5388:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d538a:	4a02      	ldr	r2, [pc, #8]	; (d5394 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d538c:	601a      	str	r2, [r3, #0]
   d538e:	4770      	bx	lr
   d5390:	2003e4d8 	.word	0x2003e4d8
   d5394:	000d6c3c 	.word	0x000d6c3c

000d5398 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5398:	4770      	bx	lr

000d539a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d539a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d539c:	4606      	mov	r6, r0
   d539e:	4615      	mov	r5, r2
   d53a0:	460c      	mov	r4, r1
   d53a2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d53a4:	42bc      	cmp	r4, r7
   d53a6:	d006      	beq.n	d53b6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d53a8:	6833      	ldr	r3, [r6, #0]
   d53aa:	f814 1b01 	ldrb.w	r1, [r4], #1
   d53ae:	689b      	ldr	r3, [r3, #8]
   d53b0:	4630      	mov	r0, r6
   d53b2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d53b4:	e7f6      	b.n	d53a4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d53b6:	4628      	mov	r0, r5
   d53b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53ba <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d53ba:	2200      	movs	r2, #0
   d53bc:	7c00      	ldrb	r0, [r0, #16]
   d53be:	f7ff baef 	b.w	d49a0 <HAL_I2C_Write_Data>

000d53c2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d53c2:	2100      	movs	r1, #0
   d53c4:	7c00      	ldrb	r0, [r0, #16]
   d53c6:	f7ff baf3 	b.w	d49b0 <HAL_I2C_Available_Data>

000d53ca <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d53ca:	2100      	movs	r1, #0
   d53cc:	7c00      	ldrb	r0, [r0, #16]
   d53ce:	f7ff baf7 	b.w	d49c0 <HAL_I2C_Read_Data>

000d53d2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d53d2:	2100      	movs	r1, #0
   d53d4:	7c00      	ldrb	r0, [r0, #16]
   d53d6:	f7ff bafb 	b.w	d49d0 <HAL_I2C_Peek_Data>

000d53da <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d53da:	2100      	movs	r1, #0
   d53dc:	7c00      	ldrb	r0, [r0, #16]
   d53de:	f7ff baff 	b.w	d49e0 <HAL_I2C_Flush_Data>

000d53e2 <_ZN7TwoWireD0Ev>:
   d53e2:	b510      	push	{r4, lr}
   d53e4:	4604      	mov	r4, r0
   d53e6:	f7fe fe58 	bl	d409a <_ZdlPv>
   d53ea:	4620      	mov	r0, r4
   d53ec:	bd10      	pop	{r4, pc}
	...

000d53f0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d53f0:	b510      	push	{r4, lr}
   d53f2:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d53f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d53f8:	4608      	mov	r0, r1
   d53fa:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d53fc:	2100      	movs	r1, #0
   d53fe:	4b04      	ldr	r3, [pc, #16]	; (d5410 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5400:	7420      	strb	r0, [r4, #16]
   d5402:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5404:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5406:	f7ff fafb 	bl	d4a00 <HAL_I2C_Init>

}
   d540a:	4620      	mov	r0, r4
   d540c:	bd10      	pop	{r4, pc}
   d540e:	bf00      	nop
   d5410:	000d6c70 	.word	0x000d6c70

000d5414 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5414:	2100      	movs	r1, #0
   d5416:	7c00      	ldrb	r0, [r0, #16]
   d5418:	f7ff baea 	b.w	d49f0 <HAL_I2C_Is_Enabled>

000d541c <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d541c:	f7ff bab8 	b.w	d4990 <HAL_Interrupts_Disable_All>

000d5420 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d5420:	f7ff baae 	b.w	d4980 <HAL_Interrupts_Enable_All>

000d5424 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5424:	4770      	bx	lr

000d5426 <_ZN9IPAddressD0Ev>:
   d5426:	b510      	push	{r4, lr}
   d5428:	4604      	mov	r4, r0
   d542a:	f7fe fe36 	bl	d409a <_ZdlPv>
   d542e:	4620      	mov	r0, r4
   d5430:	bd10      	pop	{r4, pc}

000d5432 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5432:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d5434:	7d03      	ldrb	r3, [r0, #20]
   d5436:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5438:	b08d      	sub	sp, #52	; 0x34
   d543a:	460e      	mov	r6, r1
   d543c:	f100 0704 	add.w	r7, r0, #4
   d5440:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d5444:	d002      	beq.n	d544c <_ZNK9IPAddress7printToER5Print+0x1a>
   d5446:	f100 0508 	add.w	r5, r0, #8
   d544a:	e018      	b.n	d547e <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d544c:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d544e:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5450:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5454:	232f      	movs	r3, #47	; 0x2f
   d5456:	462a      	mov	r2, r5
   d5458:	200a      	movs	r0, #10
   d545a:	f7ff fad9 	bl	d4a10 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d545e:	4628      	mov	r0, r5
   d5460:	f001 fb97 	bl	d6b92 <strlen>
   d5464:	6833      	ldr	r3, [r6, #0]
   d5466:	4602      	mov	r2, r0
   d5468:	68db      	ldr	r3, [r3, #12]
   d546a:	4629      	mov	r1, r5
   d546c:	4630      	mov	r0, r6
   d546e:	4798      	blx	r3
   d5470:	e00f      	b.n	d5492 <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5472:	b124      	cbz	r4, d547e <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5474:	212e      	movs	r1, #46	; 0x2e
   d5476:	4630      	mov	r0, r6
   d5478:	f000 f98e 	bl	d5798 <_ZN5Print5printEc>
   d547c:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d547e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5482:	220a      	movs	r2, #10
   d5484:	4630      	mov	r0, r6
   d5486:	f000 f9cd 	bl	d5824 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d548a:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d548c:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d548e:	d1f0      	bne.n	d5472 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5490:	4620      	mov	r0, r4
    }
    return n;
}
   d5492:	b00d      	add	sp, #52	; 0x34
   d5494:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5498 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d5498:	b510      	push	{r4, lr}
   d549a:	4b05      	ldr	r3, [pc, #20]	; (d54b0 <_ZN9IPAddressC1Ev+0x18>)
   d549c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d549e:	2211      	movs	r2, #17
   d54a0:	f840 3b04 	str.w	r3, [r0], #4
   d54a4:	2100      	movs	r1, #0
   d54a6:	f001 fb28 	bl	d6afa <memset>
{
    clear();
}
   d54aa:	4620      	mov	r0, r4
   d54ac:	bd10      	pop	{r4, pc}
   d54ae:	bf00      	nop
   d54b0:	000d6c98 	.word	0x000d6c98

000d54b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d54b4:	4603      	mov	r3, r0
   d54b6:	4a07      	ldr	r2, [pc, #28]	; (d54d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d54b8:	b510      	push	{r4, lr}
   d54ba:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d54be:	f101 0210 	add.w	r2, r1, #16
   d54c2:	f851 4b04 	ldr.w	r4, [r1], #4
   d54c6:	f843 4b04 	str.w	r4, [r3], #4
   d54ca:	4291      	cmp	r1, r2
   d54cc:	d1f9      	bne.n	d54c2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d54ce:	780a      	ldrb	r2, [r1, #0]
   d54d0:	701a      	strb	r2, [r3, #0]
}
   d54d2:	bd10      	pop	{r4, pc}
   d54d4:	000d6c98 	.word	0x000d6c98

000d54d8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d54d8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d54da:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d54de:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d54e2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d54e6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d54ea:	2304      	movs	r3, #4
   d54ec:	6041      	str	r1, [r0, #4]
   d54ee:	7503      	strb	r3, [r0, #20]
   d54f0:	bd10      	pop	{r4, pc}

000d54f2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d54f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d54f4:	780d      	ldrb	r5, [r1, #0]
   d54f6:	788b      	ldrb	r3, [r1, #2]
   d54f8:	784a      	ldrb	r2, [r1, #1]
   d54fa:	78c9      	ldrb	r1, [r1, #3]
   d54fc:	9100      	str	r1, [sp, #0]
   d54fe:	4629      	mov	r1, r5
   d5500:	f7ff ffea 	bl	d54d8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5504:	b003      	add	sp, #12
   d5506:	bd30      	pop	{r4, r5, pc}

000d5508 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5508:	4b01      	ldr	r3, [pc, #4]	; (d5510 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d550a:	4a02      	ldr	r2, [pc, #8]	; (d5514 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d550c:	601a      	str	r2, [r3, #0]
   d550e:	4770      	bx	lr
   d5510:	2003e4e0 	.word	0x2003e4e0
   d5514:	000d6d5a 	.word	0x000d6d5a

000d5518 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5518:	2200      	movs	r2, #0
   d551a:	4611      	mov	r1, r2
   d551c:	6840      	ldr	r0, [r0, #4]
   d551e:	f7ff bb9b 	b.w	d4c58 <network_listening>

000d5522 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5522:	2200      	movs	r2, #0
   d5524:	4611      	mov	r1, r2
   d5526:	6840      	ldr	r0, [r0, #4]
   d5528:	f7ff bba6 	b.w	d4c78 <network_get_listen_timeout>

000d552c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d552c:	2200      	movs	r2, #0
   d552e:	6840      	ldr	r0, [r0, #4]
   d5530:	f7ff bb9a 	b.w	d4c68 <network_set_listen_timeout>

000d5534 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5534:	2200      	movs	r2, #0
   d5536:	f081 0101 	eor.w	r1, r1, #1
   d553a:	6840      	ldr	r0, [r0, #4]
   d553c:	f7ff bb84 	b.w	d4c48 <network_listen>

000d5540 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5540:	2300      	movs	r3, #0
   d5542:	461a      	mov	r2, r3
   d5544:	4619      	mov	r1, r3
   d5546:	6840      	ldr	r0, [r0, #4]
   d5548:	f7ff bb76 	b.w	d4c38 <network_off>

000d554c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d554c:	2300      	movs	r3, #0
   d554e:	461a      	mov	r2, r3
   d5550:	4619      	mov	r1, r3
   d5552:	6840      	ldr	r0, [r0, #4]
   d5554:	f7ff bb68 	b.w	d4c28 <network_on>

000d5558 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5558:	2200      	movs	r2, #0
   d555a:	4611      	mov	r1, r2
   d555c:	6840      	ldr	r0, [r0, #4]
   d555e:	f7ff bb5b 	b.w	d4c18 <network_ready>

000d5562 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5562:	2200      	movs	r2, #0
   d5564:	4611      	mov	r1, r2
   d5566:	6840      	ldr	r0, [r0, #4]
   d5568:	f7ff bb46 	b.w	d4bf8 <network_connecting>

000d556c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d556c:	2200      	movs	r2, #0
   d556e:	2102      	movs	r1, #2
   d5570:	6840      	ldr	r0, [r0, #4]
   d5572:	f7ff bb49 	b.w	d4c08 <network_disconnect>

000d5576 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5576:	2300      	movs	r3, #0
   d5578:	461a      	mov	r2, r3
   d557a:	6840      	ldr	r0, [r0, #4]
   d557c:	f7ff bb34 	b.w	d4be8 <network_connect>

000d5580 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5580:	b110      	cbz	r0, d5588 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d5582:	6803      	ldr	r3, [r0, #0]
   d5584:	685b      	ldr	r3, [r3, #4]
   d5586:	4718      	bx	r3
   d5588:	4770      	bx	lr

000d558a <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d558a:	b538      	push	{r3, r4, r5, lr}
   d558c:	4604      	mov	r4, r0
   d558e:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d5590:	b1d0      	cbz	r0, d55c8 <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d5592:	f7ff f9a5 	bl	d48e0 <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d5596:	b9b8      	cbnz	r0, d55c8 <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d5598:	7c23      	ldrb	r3, [r4, #16]
   d559a:	b91b      	cbnz	r3, d55a4 <_ZN6Thread7disposeEv+0x1a>
   d559c:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d559e:	b108      	cbz	r0, d55a4 <_ZN6Thread7disposeEv+0x1a>
   d55a0:	f7ff f9a6 	bl	d48f0 <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d55a4:	6865      	ldr	r5, [r4, #4]
   d55a6:	b155      	cbz	r5, d55be <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d55a8:	68ab      	ldr	r3, [r5, #8]
   d55aa:	b11b      	cbz	r3, d55b4 <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d55ac:	2203      	movs	r2, #3
   d55ae:	4629      	mov	r1, r5
   d55b0:	4628      	mov	r0, r5
   d55b2:	4798      	blx	r3
            delete wrapper;
   d55b4:	4628      	mov	r0, r5
   d55b6:	f7fe fd70 	bl	d409a <_ZdlPv>
            wrapper = NULL;
   d55ba:	2300      	movs	r3, #0
   d55bc:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d55be:	6820      	ldr	r0, [r4, #0]
   d55c0:	f7ff f99e 	bl	d4900 <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d55c4:	2300      	movs	r3, #0
   d55c6:	6023      	str	r3, [r4, #0]
   d55c8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d55cc <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d55cc:	b538      	push	{r3, r4, r5, lr}
   d55ce:	4b0b      	ldr	r3, [pc, #44]	; (d55fc <_ZN5spark9MeshClassD1Ev+0x30>)
   d55d0:	6003      	str	r3, [r0, #0]
   d55d2:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d55d4:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d55d8:	b108      	cbz	r0, d55de <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d55da:	f7fe fd60 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d55de:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d55e2:	b12d      	cbz	r5, d55f0 <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d55e4:	4628      	mov	r0, r5
   d55e6:	f7ff ffd0 	bl	d558a <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d55ea:	4628      	mov	r0, r5
   d55ec:	f7fe fd55 	bl	d409a <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d55f0:	68a0      	ldr	r0, [r4, #8]
   d55f2:	b108      	cbz	r0, d55f8 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d55f4:	f7ff ffc4 	bl	d5580 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d55f8:	4620      	mov	r0, r4
   d55fa:	bd38      	pop	{r3, r4, r5, pc}
   d55fc:	000d6d8c 	.word	0x000d6d8c

000d5600 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5600:	b538      	push	{r3, r4, r5, lr}
   d5602:	4c0d      	ldr	r4, [pc, #52]	; (d5638 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5604:	4b0d      	ldr	r3, [pc, #52]	; (d563c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d5606:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5608:	2500      	movs	r5, #0
   d560a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d560c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5610:	6063      	str	r3, [r4, #4]
   d5612:	60a5      	str	r5, [r4, #8]
   d5614:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5618:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d561c:	f7ff f980 	bl	d4920 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5620:	4b07      	ldr	r3, [pc, #28]	; (d5640 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5622:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5626:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5628:	4620      	mov	r0, r4
   d562a:	4a06      	ldr	r2, [pc, #24]	; (d5644 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d562c:	4906      	ldr	r1, [pc, #24]	; (d5648 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d562e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5632:	f000 bbf9 	b.w	d5e28 <__aeabi_atexit>
   d5636:	bf00      	nop
   d5638:	2003e4e4 	.word	0x2003e4e4
   d563c:	000d6dc0 	.word	0x000d6dc0
   d5640:	000d6d8c 	.word	0x000d6d8c
   d5644:	2003e3f8 	.word	0x2003e3f8
   d5648:	000d55cd 	.word	0x000d55cd

000d564c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d564c:	2300      	movs	r3, #0
   d564e:	461a      	mov	r2, r3
   d5650:	6840      	ldr	r0, [r0, #4]
   d5652:	f7ff bac9 	b.w	d4be8 <network_connect>

000d5656 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5656:	2200      	movs	r2, #0
   d5658:	2102      	movs	r1, #2
   d565a:	6840      	ldr	r0, [r0, #4]
   d565c:	f7ff bad4 	b.w	d4c08 <network_disconnect>

000d5660 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5660:	2200      	movs	r2, #0
   d5662:	4611      	mov	r1, r2
   d5664:	6840      	ldr	r0, [r0, #4]
   d5666:	f7ff bac7 	b.w	d4bf8 <network_connecting>

000d566a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d566a:	2200      	movs	r2, #0
   d566c:	4611      	mov	r1, r2
   d566e:	6840      	ldr	r0, [r0, #4]
   d5670:	f7ff bad2 	b.w	d4c18 <network_ready>

000d5674 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5674:	2300      	movs	r3, #0
   d5676:	461a      	mov	r2, r3
   d5678:	4619      	mov	r1, r3
   d567a:	6840      	ldr	r0, [r0, #4]
   d567c:	f7ff bad4 	b.w	d4c28 <network_on>

000d5680 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5680:	2300      	movs	r3, #0
   d5682:	461a      	mov	r2, r3
   d5684:	4619      	mov	r1, r3
   d5686:	6840      	ldr	r0, [r0, #4]
   d5688:	f7ff bad6 	b.w	d4c38 <network_off>

000d568c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d568c:	2200      	movs	r2, #0
   d568e:	f081 0101 	eor.w	r1, r1, #1
   d5692:	6840      	ldr	r0, [r0, #4]
   d5694:	f7ff bad8 	b.w	d4c48 <network_listen>

000d5698 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5698:	2200      	movs	r2, #0
   d569a:	6840      	ldr	r0, [r0, #4]
   d569c:	f7ff bae4 	b.w	d4c68 <network_set_listen_timeout>

000d56a0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d56a0:	2200      	movs	r2, #0
   d56a2:	4611      	mov	r1, r2
   d56a4:	6840      	ldr	r0, [r0, #4]
   d56a6:	f7ff bae7 	b.w	d4c78 <network_get_listen_timeout>

000d56aa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d56aa:	2200      	movs	r2, #0
   d56ac:	4611      	mov	r1, r2
   d56ae:	6840      	ldr	r0, [r0, #4]
   d56b0:	f7ff bad2 	b.w	d4c58 <network_listening>

000d56b4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d56b4:	b570      	push	{r4, r5, r6, lr}
   d56b6:	b08c      	sub	sp, #48	; 0x30
   d56b8:	4614      	mov	r4, r2
   d56ba:	4606      	mov	r6, r0
    IPAddress addr;
   d56bc:	f7ff feec 	bl	d5498 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d56c0:	ab0c      	add	r3, sp, #48	; 0x30
   d56c2:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d56c4:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d56c6:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d56ca:	4620      	mov	r0, r4
   d56cc:	f7ff f9b0 	bl	d4a30 <netdb_getaddrinfo>
    if (!r && ai) {
   d56d0:	4601      	mov	r1, r0
   d56d2:	bb58      	cbnz	r0, d572c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d56d4:	9b00      	ldr	r3, [sp, #0]
   d56d6:	b34b      	cbz	r3, d572c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d56d8:	685a      	ldr	r2, [r3, #4]
   d56da:	2a02      	cmp	r2, #2
   d56dc:	d00e      	beq.n	d56fc <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d56de:	2a0a      	cmp	r2, #10
   d56e0:	d124      	bne.n	d572c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d56e2:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d56e4:	2211      	movs	r2, #17
   d56e6:	a801      	add	r0, sp, #4
   d56e8:	f001 fa07 	bl	d6afa <memset>
                a.v = 6;
   d56ec:	2306      	movs	r3, #6
   d56ee:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d56f2:	ad01      	add	r5, sp, #4
   d56f4:	f104 0308 	add.w	r3, r4, #8
   d56f8:	3418      	adds	r4, #24
   d56fa:	e005      	b.n	d5708 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d56fc:	6959      	ldr	r1, [r3, #20]
   d56fe:	4630      	mov	r0, r6
   d5700:	3104      	adds	r1, #4
   d5702:	f7ff fef6 	bl	d54f2 <_ZN9IPAddressaSEPKh>
                break;
   d5706:	e011      	b.n	d572c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5708:	6818      	ldr	r0, [r3, #0]
   d570a:	6859      	ldr	r1, [r3, #4]
   d570c:	462a      	mov	r2, r5
   d570e:	c203      	stmia	r2!, {r0, r1}
   d5710:	3308      	adds	r3, #8
   d5712:	42a3      	cmp	r3, r4
   d5714:	4615      	mov	r5, r2
   d5716:	d1f7      	bne.n	d5708 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d5718:	a901      	add	r1, sp, #4
   d571a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d571c:	ad07      	add	r5, sp, #28
   d571e:	f7ff fec9 	bl	d54b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5724:	1d34      	adds	r4, r6, #4
   d5726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5728:	682b      	ldr	r3, [r5, #0]
   d572a:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d572c:	9800      	ldr	r0, [sp, #0]
   d572e:	f7ff f977 	bl	d4a20 <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5732:	4630      	mov	r0, r6
   d5734:	b00c      	add	sp, #48	; 0x30
   d5736:	bd70      	pop	{r4, r5, r6, pc}

000d5738 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5738:	4b02      	ldr	r3, [pc, #8]	; (d5744 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d573a:	4a03      	ldr	r2, [pc, #12]	; (d5748 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d573c:	601a      	str	r2, [r3, #0]
   d573e:	2200      	movs	r2, #0
   d5740:	605a      	str	r2, [r3, #4]
   d5742:	4770      	bx	lr
   d5744:	2003e6b4 	.word	0x2003e6b4
   d5748:	000d6dc0 	.word	0x000d6dc0

000d574c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d574c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d574e:	4606      	mov	r6, r0
   d5750:	460d      	mov	r5, r1
   d5752:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5754:	2400      	movs	r4, #0
  while (size--) {
   d5756:	42bd      	cmp	r5, r7
   d5758:	d00c      	beq.n	d5774 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d575a:	6833      	ldr	r3, [r6, #0]
   d575c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5760:	689b      	ldr	r3, [r3, #8]
   d5762:	4630      	mov	r0, r6
   d5764:	4798      	blx	r3
     if (chunk>=0)
   d5766:	2800      	cmp	r0, #0
   d5768:	db01      	blt.n	d576e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d576a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d576c:	e7f3      	b.n	d5756 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d576e:	2c00      	cmp	r4, #0
   d5770:	bf08      	it	eq
   d5772:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5774:	4620      	mov	r0, r4
   d5776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5778 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5778:	b570      	push	{r4, r5, r6, lr}
   d577a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d577c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d577e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5780:	b149      	cbz	r1, d5796 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5782:	f001 fa06 	bl	d6b92 <strlen>
   d5786:	682b      	ldr	r3, [r5, #0]
   d5788:	4602      	mov	r2, r0
   d578a:	4621      	mov	r1, r4
   d578c:	4628      	mov	r0, r5
   d578e:	68db      	ldr	r3, [r3, #12]
    }
   d5790:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5794:	4718      	bx	r3
    }
   d5796:	bd70      	pop	{r4, r5, r6, pc}

000d5798 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5798:	6803      	ldr	r3, [r0, #0]
   d579a:	689b      	ldr	r3, [r3, #8]
   d579c:	4718      	bx	r3

000d579e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d579e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d57a0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d57a2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d57a4:	f7ff fff8 	bl	d5798 <_ZN5Print5printEc>
  n += print('\n');
   d57a8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d57aa:	4604      	mov	r4, r0
  n += print('\n');
   d57ac:	4628      	mov	r0, r5
   d57ae:	f7ff fff3 	bl	d5798 <_ZN5Print5printEc>
  return n;
}
   d57b2:	4420      	add	r0, r4
   d57b4:	bd38      	pop	{r3, r4, r5, pc}

000d57b6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d57b6:	b538      	push	{r3, r4, r5, lr}
   d57b8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d57ba:	f7ff ffdd 	bl	d5778 <_ZN5Print5writeEPKc>
   d57be:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d57c0:	4628      	mov	r0, r5
   d57c2:	f7ff ffec 	bl	d579e <_ZN5Print7printlnEv>
  return n;
}
   d57c6:	4420      	add	r0, r4
   d57c8:	bd38      	pop	{r3, r4, r5, pc}

000d57ca <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d57ca:	b530      	push	{r4, r5, lr}
   d57cc:	b08b      	sub	sp, #44	; 0x2c
   d57ce:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d57d0:	2100      	movs	r1, #0
   d57d2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d57d6:	2a01      	cmp	r2, #1
   d57d8:	bf98      	it	ls
   d57da:	220a      	movls	r2, #10
   d57dc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d57e0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d57e4:	fb05 3312 	mls	r3, r5, r2, r3
   d57e8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d57ec:	2b09      	cmp	r3, #9
   d57ee:	bf94      	ite	ls
   d57f0:	3330      	addls	r3, #48	; 0x30
   d57f2:	3337      	addhi	r3, #55	; 0x37
   d57f4:	b2db      	uxtb	r3, r3
   d57f6:	4621      	mov	r1, r4
   d57f8:	f804 3901 	strb.w	r3, [r4], #-1
   d57fc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d57fe:	2d00      	cmp	r5, #0
   d5800:	d1ee      	bne.n	d57e0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5802:	f7ff ffb9 	bl	d5778 <_ZN5Print5writeEPKc>
}
   d5806:	b00b      	add	sp, #44	; 0x2c
   d5808:	bd30      	pop	{r4, r5, pc}

000d580a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d580a:	b410      	push	{r4}
  if (base == 0) return write(n);
   d580c:	b92a      	cbnz	r2, d581a <_ZN5Print5printEmi+0x10>
   d580e:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5810:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5814:	689b      	ldr	r3, [r3, #8]
   d5816:	b2c9      	uxtb	r1, r1
   d5818:	4718      	bx	r3
  else return printNumber(n, base);
   d581a:	b2d2      	uxtb	r2, r2
}
   d581c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5820:	f7ff bfd3 	b.w	d57ca <_ZN5Print11printNumberEmh>

000d5824 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5824:	f7ff bff1 	b.w	d580a <_ZN5Print5printEmi>

000d5828 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d5828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d582c:	4607      	mov	r7, r0
   d582e:	460e      	mov	r6, r1
  if (base == 0) {
   d5830:	4615      	mov	r5, r2
   d5832:	b92a      	cbnz	r2, d5840 <_ZN5Print5printEli+0x18>
    return write(n);
   d5834:	6803      	ldr	r3, [r0, #0]
   d5836:	b2c9      	uxtb	r1, r1
   d5838:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d583a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d583e:	4718      	bx	r3
  } else if (base == 10) {
   d5840:	2a0a      	cmp	r2, #10
   d5842:	d102      	bne.n	d584a <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d5844:	2900      	cmp	r1, #0
   d5846:	da01      	bge.n	d584c <_ZN5Print5printEli+0x24>
   d5848:	e004      	b.n	d5854 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d584a:	b2d2      	uxtb	r2, r2
  }
}
   d584c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d5850:	f7ff bfbb 	b.w	d57ca <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d5854:	212d      	movs	r1, #45	; 0x2d
   d5856:	f7ff ff9f 	bl	d5798 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d585a:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d585c:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d585e:	4271      	negs	r1, r6
   d5860:	4638      	mov	r0, r7
   d5862:	f7ff ffb2 	bl	d57ca <_ZN5Print11printNumberEmh>
   d5866:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d5868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d586c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d586c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5870:	ec57 6b10 	vmov	r6, r7, d0
   d5874:	4682      	mov	sl, r0
   d5876:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d5878:	ee10 2a10 	vmov	r2, s0
   d587c:	463b      	mov	r3, r7
   d587e:	ee10 0a10 	vmov	r0, s0
   d5882:	4639      	mov	r1, r7
   d5884:	f001 f872 	bl	d696c <__aeabi_dcmpun>
   d5888:	b108      	cbz	r0, d588e <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d588a:	4948      	ldr	r1, [pc, #288]	; (d59ac <_ZN5Print10printFloatEdh+0x140>)
   d588c:	e012      	b.n	d58b4 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d588e:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d5892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5896:	4b46      	ldr	r3, [pc, #280]	; (d59b0 <_ZN5Print10printFloatEdh+0x144>)
   d5898:	4630      	mov	r0, r6
   d589a:	4649      	mov	r1, r9
   d589c:	f001 f866 	bl	d696c <__aeabi_dcmpun>
   d58a0:	b968      	cbnz	r0, d58be <_ZN5Print10printFloatEdh+0x52>
   d58a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d58a6:	4b42      	ldr	r3, [pc, #264]	; (d59b0 <_ZN5Print10printFloatEdh+0x144>)
   d58a8:	4630      	mov	r0, r6
   d58aa:	4649      	mov	r1, r9
   d58ac:	f001 f840 	bl	d6930 <__aeabi_dcmple>
   d58b0:	b928      	cbnz	r0, d58be <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d58b2:	4940      	ldr	r1, [pc, #256]	; (d59b4 <_ZN5Print10printFloatEdh+0x148>)
   d58b4:	4650      	mov	r0, sl
   d58b6:	f7ff ff5f 	bl	d5778 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d58ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d58be:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d58c2:	4b3d      	ldr	r3, [pc, #244]	; (d59b8 <_ZN5Print10printFloatEdh+0x14c>)
   d58c4:	4630      	mov	r0, r6
   d58c6:	4639      	mov	r1, r7
   d58c8:	f001 f846 	bl	d6958 <__aeabi_dcmpgt>
   d58cc:	b108      	cbz	r0, d58d2 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d58ce:	493b      	ldr	r1, [pc, #236]	; (d59bc <_ZN5Print10printFloatEdh+0x150>)
   d58d0:	e7f0      	b.n	d58b4 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d58d2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d58d6:	4b3a      	ldr	r3, [pc, #232]	; (d59c0 <_ZN5Print10printFloatEdh+0x154>)
   d58d8:	4630      	mov	r0, r6
   d58da:	4639      	mov	r1, r7
   d58dc:	f001 f81e 	bl	d691c <__aeabi_dcmplt>
   d58e0:	2800      	cmp	r0, #0
   d58e2:	d1f4      	bne.n	d58ce <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d58e4:	2200      	movs	r2, #0
   d58e6:	2300      	movs	r3, #0
   d58e8:	4630      	mov	r0, r6
   d58ea:	4639      	mov	r1, r7
   d58ec:	f001 f816 	bl	d691c <__aeabi_dcmplt>
   d58f0:	b140      	cbz	r0, d5904 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d58f2:	212d      	movs	r1, #45	; 0x2d
   d58f4:	4650      	mov	r0, sl
   d58f6:	f7ff ff4f 	bl	d5798 <_ZN5Print5printEc>
     number = -number;
   d58fa:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d58fe:	4604      	mov	r4, r0
     number = -number;
   d5900:	461f      	mov	r7, r3
   d5902:	e000      	b.n	d5906 <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5904:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d5906:	492f      	ldr	r1, [pc, #188]	; (d59c4 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d5908:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d590c:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d590e:	fa5f f388 	uxtb.w	r3, r8
   d5912:	429d      	cmp	r5, r3
   d5914:	d906      	bls.n	d5924 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d5916:	2200      	movs	r2, #0
   d5918:	4b2b      	ldr	r3, [pc, #172]	; (d59c8 <_ZN5Print10printFloatEdh+0x15c>)
   d591a:	f000 feb7 	bl	d668c <__aeabi_ddiv>
   d591e:	f108 0801 	add.w	r8, r8, #1
   d5922:	e7f4      	b.n	d590e <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d5924:	4632      	mov	r2, r6
   d5926:	463b      	mov	r3, r7
   d5928:	f000 fbd4 	bl	d60d4 <__adddf3>
   d592c:	460f      	mov	r7, r1
   d592e:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d5930:	f001 f85a 	bl	d69e8 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5934:	220a      	movs	r2, #10
   d5936:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d5938:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d593a:	4650      	mov	r0, sl
   d593c:	f7ff ff45 	bl	d57ca <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d5940:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d5942:	b37d      	cbz	r5, d59a4 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d5944:	4640      	mov	r0, r8
   d5946:	f000 fd01 	bl	d634c <__aeabi_ui2d>
   d594a:	4602      	mov	r2, r0
   d594c:	460b      	mov	r3, r1
   d594e:	4630      	mov	r0, r6
   d5950:	4639      	mov	r1, r7
   d5952:	f000 fbbd 	bl	d60d0 <__aeabi_dsub>
   d5956:	4606      	mov	r6, r0
   d5958:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d595a:	4650      	mov	r0, sl
   d595c:	491b      	ldr	r1, [pc, #108]	; (d59cc <_ZN5Print10printFloatEdh+0x160>)
   d595e:	f7ff ff0b 	bl	d5778 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d5962:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d5964:	4b18      	ldr	r3, [pc, #96]	; (d59c8 <_ZN5Print10printFloatEdh+0x15c>)
   d5966:	2200      	movs	r2, #0
   d5968:	4630      	mov	r0, r6
   d596a:	4639      	mov	r1, r7
   d596c:	f000 fd64 	bl	d6438 <__aeabi_dmul>
   d5970:	460f      	mov	r7, r1
   d5972:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d5974:	f001 f810 	bl	d6998 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d5978:	220a      	movs	r2, #10
   d597a:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d597c:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d597e:	4650      	mov	r0, sl
   d5980:	f7ff ff52 	bl	d5828 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d5984:	4404      	add	r4, r0
    remainder -= toPrint;
   d5986:	4640      	mov	r0, r8
   d5988:	f000 fcf0 	bl	d636c <__aeabi_i2d>
   d598c:	4602      	mov	r2, r0
   d598e:	460b      	mov	r3, r1
   d5990:	4630      	mov	r0, r6
   d5992:	4639      	mov	r1, r7
   d5994:	f000 fb9c 	bl	d60d0 <__aeabi_dsub>
   d5998:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d599a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d599e:	4606      	mov	r6, r0
   d59a0:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d59a2:	d1df      	bne.n	d5964 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d59a4:	4620      	mov	r0, r4
   d59a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d59aa:	bf00      	nop
   d59ac:	000d6dec 	.word	0x000d6dec
   d59b0:	7fefffff 	.word	0x7fefffff
   d59b4:	000d6df4 	.word	0x000d6df4
   d59b8:	41efffff 	.word	0x41efffff
   d59bc:	000d6df0 	.word	0x000d6df0
   d59c0:	c1efffff 	.word	0xc1efffff
   d59c4:	3fe00000 	.word	0x3fe00000
   d59c8:	40240000 	.word	0x40240000
   d59cc:	000d6be2 	.word	0x000d6be2

000d59d0 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d59d0:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d59d2:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d59d4:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d59d6:	f7ff ff49 	bl	d586c <_ZN5Print10printFloatEdh>
   d59da:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d59dc:	4628      	mov	r0, r5
   d59de:	f7ff fede 	bl	d579e <_ZN5Print7printlnEv>
  return n;
}
   d59e2:	4420      	add	r0, r4
   d59e4:	bd38      	pop	{r3, r4, r5, pc}

000d59e6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d59e6:	b510      	push	{r4, lr}
   d59e8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d59ea:	f7ff f9ed 	bl	d4dc8 <_ZNSt14_Function_baseD1Ev>
   d59ee:	4620      	mov	r0, r4
   d59f0:	bd10      	pop	{r4, pc}
	...

000d59f4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d59f4:	4803      	ldr	r0, [pc, #12]	; (d5a04 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d59f6:	4a04      	ldr	r2, [pc, #16]	; (d5a08 <_GLOBAL__sub_I_RGB+0x14>)
   d59f8:	4904      	ldr	r1, [pc, #16]	; (d5a0c <_GLOBAL__sub_I_RGB+0x18>)
   d59fa:	2300      	movs	r3, #0
   d59fc:	6083      	str	r3, [r0, #8]
   d59fe:	f000 ba13 	b.w	d5e28 <__aeabi_atexit>
   d5a02:	bf00      	nop
   d5a04:	2003e6bc 	.word	0x2003e6bc
   d5a08:	2003e3f8 	.word	0x2003e3f8
   d5a0c:	000d59e7 	.word	0x000d59e7

000d5a10 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5a10:	4770      	bx	lr

000d5a12 <_ZN8SPIClassD0Ev>:
   d5a12:	b510      	push	{r4, lr}
   d5a14:	4604      	mov	r4, r0
   d5a16:	f7fe fb40 	bl	d409a <_ZdlPv>
   d5a1a:	4620      	mov	r0, r4
   d5a1c:	bd10      	pop	{r4, pc}
	...

000d5a20 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5a20:	b570      	push	{r4, r5, r6, lr}
   d5a22:	4b08      	ldr	r3, [pc, #32]	; (d5a44 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5a24:	6003      	str	r3, [r0, #0]
   d5a26:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5a28:	2500      	movs	r5, #0
   d5a2a:	460e      	mov	r6, r1
   d5a2c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5a30:	f7fe ff6e 	bl	d4910 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5a34:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5a36:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5a38:	f7ff f802 	bl	d4a40 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5a3c:	60a5      	str	r5, [r4, #8]
}
   d5a3e:	4620      	mov	r0, r4
   d5a40:	bd70      	pop	{r4, r5, r6, pc}
   d5a42:	bf00      	nop
   d5a44:	000d6e00 	.word	0x000d6e00

000d5a48 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5a48:	7900      	ldrb	r0, [r0, #4]
   d5a4a:	f7ff b801 	b.w	d4a50 <HAL_SPI_Is_Enabled>
	...

000d5a50 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5a50:	4b04      	ldr	r3, [pc, #16]	; (d5a64 <_GLOBAL__sub_I_System+0x14>)
   d5a52:	2000      	movs	r0, #0
   d5a54:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5a58:	7018      	strb	r0, [r3, #0]
   d5a5a:	8058      	strh	r0, [r3, #2]
   d5a5c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5a5e:	f7ff b87f 	b.w	d4b60 <set_system_mode>
   d5a62:	bf00      	nop
   d5a64:	2003e6cc 	.word	0x2003e6cc

000d5a68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5a68:	4b02      	ldr	r3, [pc, #8]	; (d5a74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5a6a:	681a      	ldr	r2, [r3, #0]
   d5a6c:	4b02      	ldr	r3, [pc, #8]	; (d5a78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5a6e:	601a      	str	r2, [r3, #0]
   d5a70:	4770      	bx	lr
   d5a72:	bf00      	nop
   d5a74:	2003e390 	.word	0x2003e390
   d5a78:	2003e6d4 	.word	0x2003e6d4

000d5a7c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5a7c:	4770      	bx	lr

000d5a7e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5a7e:	7441      	strb	r1, [r0, #17]
   d5a80:	4770      	bx	lr

000d5a82 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d5a82:	7c00      	ldrb	r0, [r0, #16]
   d5a84:	f7ff b824 	b.w	d4ad0 <HAL_USART_Available_Data_For_Write>

000d5a88 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d5a88:	7c00      	ldrb	r0, [r0, #16]
   d5a8a:	f7fe bff9 	b.w	d4a80 <HAL_USART_Available_Data>

000d5a8e <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d5a8e:	7c00      	ldrb	r0, [r0, #16]
   d5a90:	f7ff b806 	b.w	d4aa0 <HAL_USART_Peek_Data>

000d5a94 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d5a94:	7c00      	ldrb	r0, [r0, #16]
   d5a96:	f7fe bffb 	b.w	d4a90 <HAL_USART_Read_Data>

000d5a9a <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5a9a:	7c00      	ldrb	r0, [r0, #16]
   d5a9c:	f7ff b808 	b.w	d4ab0 <HAL_USART_Flush_Data>

000d5aa0 <_ZN11USARTSerialD0Ev>:
   d5aa0:	b510      	push	{r4, lr}
   d5aa2:	4604      	mov	r4, r0
   d5aa4:	f7fe faf9 	bl	d409a <_ZdlPv>
   d5aa8:	4620      	mov	r0, r4
   d5aaa:	bd10      	pop	{r4, pc}

000d5aac <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5aac:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5aae:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5ab0:	4604      	mov	r4, r0
   d5ab2:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5ab4:	b925      	cbnz	r5, d5ac0 <_ZN11USARTSerial5writeEh+0x14>
   d5ab6:	7c00      	ldrb	r0, [r0, #16]
   d5ab8:	f7ff f80a 	bl	d4ad0 <HAL_USART_Available_Data_For_Write>
   d5abc:	2800      	cmp	r0, #0
   d5abe:	dd05      	ble.n	d5acc <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5ac0:	4631      	mov	r1, r6
   d5ac2:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5ac4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5ac8:	f7fe bfd2 	b.w	d4a70 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5acc:	4628      	mov	r0, r5
   d5ace:	bd70      	pop	{r4, r5, r6, pc}

000d5ad0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5ad0:	b510      	push	{r4, lr}
   d5ad2:	4604      	mov	r4, r0
   d5ad4:	4608      	mov	r0, r1
   d5ad6:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5ad8:	2200      	movs	r2, #0
   d5ada:	6062      	str	r2, [r4, #4]
   d5adc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5ae0:	60a2      	str	r2, [r4, #8]
   d5ae2:	4a05      	ldr	r2, [pc, #20]	; (d5af8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5ae4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5ae6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5ae8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5aea:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5aec:	461a      	mov	r2, r3
   d5aee:	f7fe ffb7 	bl	d4a60 <HAL_USART_Init>
}
   d5af2:	4620      	mov	r0, r4
   d5af4:	bd10      	pop	{r4, pc}
   d5af6:	bf00      	nop
   d5af8:	000d6e3c 	.word	0x000d6e3c

000d5afc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5afc:	7c00      	ldrb	r0, [r0, #16]
   d5afe:	f7fe bfdf 	b.w	d4ac0 <HAL_USART_Is_Enabled>
	...

000d5b04 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d5b06:	4c19      	ldr	r4, [pc, #100]	; (d5b6c <_Z22__fetch_global_Serial1v+0x68>)
   d5b08:	6825      	ldr	r5, [r4, #0]
   d5b0a:	b94d      	cbnz	r5, d5b20 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d5b0c:	2084      	movs	r0, #132	; 0x84
   d5b0e:	f7fe fac2 	bl	d4096 <_Znwj>
   d5b12:	4606      	mov	r6, r0
   d5b14:	b118      	cbz	r0, d5b1e <_Z22__fetch_global_Serial1v+0x1a>
   d5b16:	2284      	movs	r2, #132	; 0x84
   d5b18:	4629      	mov	r1, r5
   d5b1a:	f000 ffee 	bl	d6afa <memset>
   d5b1e:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d5b20:	4d13      	ldr	r5, [pc, #76]	; (d5b70 <_Z22__fetch_global_Serial1v+0x6c>)
   d5b22:	682e      	ldr	r6, [r5, #0]
   d5b24:	b94e      	cbnz	r6, d5b3a <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d5b26:	2084      	movs	r0, #132	; 0x84
   d5b28:	f7fe fab5 	bl	d4096 <_Znwj>
   d5b2c:	4607      	mov	r7, r0
   d5b2e:	b118      	cbz	r0, d5b38 <_Z22__fetch_global_Serial1v+0x34>
   d5b30:	2284      	movs	r2, #132	; 0x84
   d5b32:	4631      	mov	r1, r6
   d5b34:	f000 ffe1 	bl	d6afa <memset>
   d5b38:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d5b3a:	4f0e      	ldr	r7, [pc, #56]	; (d5b74 <_Z22__fetch_global_Serial1v+0x70>)
   d5b3c:	6839      	ldr	r1, [r7, #0]
   d5b3e:	f011 0601 	ands.w	r6, r1, #1
   d5b42:	d111      	bne.n	d5b68 <_Z22__fetch_global_Serial1v+0x64>
   d5b44:	4638      	mov	r0, r7
   d5b46:	f7fe faac 	bl	d40a2 <__cxa_guard_acquire>
   d5b4a:	b168      	cbz	r0, d5b68 <_Z22__fetch_global_Serial1v+0x64>
   d5b4c:	6822      	ldr	r2, [r4, #0]
   d5b4e:	682b      	ldr	r3, [r5, #0]
   d5b50:	4809      	ldr	r0, [pc, #36]	; (d5b78 <_Z22__fetch_global_Serial1v+0x74>)
   d5b52:	4631      	mov	r1, r6
   d5b54:	f7ff ffbc 	bl	d5ad0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5b58:	4638      	mov	r0, r7
   d5b5a:	f7fe faa7 	bl	d40ac <__cxa_guard_release>
   d5b5e:	4a07      	ldr	r2, [pc, #28]	; (d5b7c <_Z22__fetch_global_Serial1v+0x78>)
   d5b60:	4907      	ldr	r1, [pc, #28]	; (d5b80 <_Z22__fetch_global_Serial1v+0x7c>)
   d5b62:	4805      	ldr	r0, [pc, #20]	; (d5b78 <_Z22__fetch_global_Serial1v+0x74>)
   d5b64:	f000 f960 	bl	d5e28 <__aeabi_atexit>
#endif
	return serial1;
}
   d5b68:	4803      	ldr	r0, [pc, #12]	; (d5b78 <_Z22__fetch_global_Serial1v+0x74>)
   d5b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5b6c:	2003e6f4 	.word	0x2003e6f4
   d5b70:	2003e6ec 	.word	0x2003e6ec
   d5b74:	2003e6f0 	.word	0x2003e6f0
   d5b78:	2003e6d8 	.word	0x2003e6d8
   d5b7c:	2003e3f8 	.word	0x2003e3f8
   d5b80:	000d5a7d 	.word	0x000d5a7d

000d5b84 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5b84:	7441      	strb	r1, [r0, #17]
   d5b86:	4770      	bx	lr

000d5b88 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5b88:	4770      	bx	lr

000d5b8a <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d5b8a:	2100      	movs	r1, #0
   d5b8c:	7c00      	ldrb	r0, [r0, #16]
   d5b8e:	f7fe bfc7 	b.w	d4b20 <HAL_USB_USART_Receive_Data>

000d5b92 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d5b92:	2101      	movs	r1, #1
   d5b94:	7c00      	ldrb	r0, [r0, #16]
   d5b96:	f7fe bfc3 	b.w	d4b20 <HAL_USB_USART_Receive_Data>

000d5b9a <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d5b9a:	7c00      	ldrb	r0, [r0, #16]
   d5b9c:	f7fe bfb8 	b.w	d4b10 <HAL_USB_USART_Available_Data_For_Write>

000d5ba0 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d5ba0:	7c00      	ldrb	r0, [r0, #16]
   d5ba2:	f7fe bfad 	b.w	d4b00 <HAL_USB_USART_Available_Data>

000d5ba6 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d5ba6:	b538      	push	{r3, r4, r5, lr}
   d5ba8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5baa:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d5bac:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5bae:	f7fe ffaf 	bl	d4b10 <HAL_USB_USART_Available_Data_For_Write>
   d5bb2:	2800      	cmp	r0, #0
   d5bb4:	dc01      	bgt.n	d5bba <_ZN9USBSerial5writeEh+0x14>
   d5bb6:	7c60      	ldrb	r0, [r4, #17]
   d5bb8:	b120      	cbz	r0, d5bc4 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d5bba:	4629      	mov	r1, r5
   d5bbc:	7c20      	ldrb	r0, [r4, #16]
   d5bbe:	f7fe ffb7 	bl	d4b30 <HAL_USB_USART_Send_Data>
    return 1;
   d5bc2:	2001      	movs	r0, #1
  }
  return 0;
}
   d5bc4:	bd38      	pop	{r3, r4, r5, pc}

000d5bc6 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5bc6:	7c00      	ldrb	r0, [r0, #16]
   d5bc8:	f7fe bfba 	b.w	d4b40 <HAL_USB_USART_Flush_Data>

000d5bcc <_ZN9USBSerialD0Ev>:
   d5bcc:	b510      	push	{r4, lr}
   d5bce:	4604      	mov	r4, r0
   d5bd0:	f7fe fa63 	bl	d409a <_ZdlPv>
   d5bd4:	4620      	mov	r0, r4
   d5bd6:	bd10      	pop	{r4, pc}

000d5bd8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5bd8:	b510      	push	{r4, lr}
   d5bda:	4604      	mov	r4, r0
   d5bdc:	2300      	movs	r3, #0
   d5bde:	6063      	str	r3, [r4, #4]
   d5be0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5be4:	60a3      	str	r3, [r4, #8]
   d5be6:	4b05      	ldr	r3, [pc, #20]	; (d5bfc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5be8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5bea:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5bec:	4608      	mov	r0, r1
{
  _serial = serial;
   d5bee:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5bf0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5bf2:	4611      	mov	r1, r2
   d5bf4:	f7fe ff74 	bl	d4ae0 <HAL_USB_USART_Init>
}
   d5bf8:	4620      	mov	r0, r4
   d5bfa:	bd10      	pop	{r4, pc}
   d5bfc:	000d6e6c 	.word	0x000d6e6c

000d5c00 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5c00:	2200      	movs	r2, #0
   d5c02:	7c00      	ldrb	r0, [r0, #16]
   d5c04:	f7fe bf74 	b.w	d4af0 <HAL_USB_USART_Begin>

000d5c08 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5c08:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5c0a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5c0c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5c0e:	2100      	movs	r1, #0
   d5c10:	f000 ff73 	bl	d6afa <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5c14:	4620      	mov	r0, r4
   d5c16:	bd10      	pop	{r4, pc}

000d5c18 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5c18:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5c1a:	4d0e      	ldr	r5, [pc, #56]	; (d5c54 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5c1c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5c1e:	a801      	add	r0, sp, #4
   d5c20:	f7ff fff2 	bl	d5c08 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5c24:	6829      	ldr	r1, [r5, #0]
   d5c26:	f011 0401 	ands.w	r4, r1, #1
   d5c2a:	d110      	bne.n	d5c4e <_Z16_fetch_usbserialv+0x36>
   d5c2c:	4628      	mov	r0, r5
   d5c2e:	f7fe fa38 	bl	d40a2 <__cxa_guard_acquire>
   d5c32:	b160      	cbz	r0, d5c4e <_Z16_fetch_usbserialv+0x36>
   d5c34:	aa01      	add	r2, sp, #4
   d5c36:	4621      	mov	r1, r4
   d5c38:	4807      	ldr	r0, [pc, #28]	; (d5c58 <_Z16_fetch_usbserialv+0x40>)
   d5c3a:	f7ff ffcd 	bl	d5bd8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5c3e:	4628      	mov	r0, r5
   d5c40:	f7fe fa34 	bl	d40ac <__cxa_guard_release>
   d5c44:	4a05      	ldr	r2, [pc, #20]	; (d5c5c <_Z16_fetch_usbserialv+0x44>)
   d5c46:	4906      	ldr	r1, [pc, #24]	; (d5c60 <_Z16_fetch_usbserialv+0x48>)
   d5c48:	4803      	ldr	r0, [pc, #12]	; (d5c58 <_Z16_fetch_usbserialv+0x40>)
   d5c4a:	f000 f8ed 	bl	d5e28 <__aeabi_atexit>
	return _usbserial;
}
   d5c4e:	4802      	ldr	r0, [pc, #8]	; (d5c58 <_Z16_fetch_usbserialv+0x40>)
   d5c50:	b007      	add	sp, #28
   d5c52:	bd30      	pop	{r4, r5, pc}
   d5c54:	2003e6f8 	.word	0x2003e6f8
   d5c58:	2003e6fc 	.word	0x2003e6fc
   d5c5c:	2003e3f8 	.word	0x2003e3f8
   d5c60:	000d5b89 	.word	0x000d5b89

000d5c64 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5c64:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5c66:	4b0c      	ldr	r3, [pc, #48]	; (d5c98 <serialEventRun+0x34>)
   d5c68:	b133      	cbz	r3, d5c78 <serialEventRun+0x14>
   d5c6a:	f7ff ffd5 	bl	d5c18 <_Z16_fetch_usbserialv>
   d5c6e:	6803      	ldr	r3, [r0, #0]
   d5c70:	691b      	ldr	r3, [r3, #16]
   d5c72:	4798      	blx	r3
   d5c74:	2800      	cmp	r0, #0
   d5c76:	dc09      	bgt.n	d5c8c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5c78:	4b08      	ldr	r3, [pc, #32]	; (d5c9c <serialEventRun+0x38>)
   d5c7a:	b163      	cbz	r3, d5c96 <serialEventRun+0x32>
   d5c7c:	f7ff ff42 	bl	d5b04 <_Z22__fetch_global_Serial1v>
   d5c80:	6803      	ldr	r3, [r0, #0]
   d5c82:	691b      	ldr	r3, [r3, #16]
   d5c84:	4798      	blx	r3
   d5c86:	2800      	cmp	r0, #0
   d5c88:	dc03      	bgt.n	d5c92 <serialEventRun+0x2e>
   d5c8a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5c8c:	f3af 8000 	nop.w
   d5c90:	e7f2      	b.n	d5c78 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5c92:	f3af 8000 	nop.w
   d5c96:	bd08      	pop	{r3, pc}
	...

000d5ca0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5ca0:	b508      	push	{r3, lr}
	serialEventRun();
   d5ca2:	f7ff ffdf 	bl	d5c64 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5ca6:	f7fe fe53 	bl	d4950 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5caa:	4b01      	ldr	r3, [pc, #4]	; (d5cb0 <_post_loop+0x10>)
   d5cac:	6018      	str	r0, [r3, #0]
   d5cae:	bd08      	pop	{r3, pc}
   d5cb0:	2003e714 	.word	0x2003e714

000d5cb4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5cb4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5cb6:	2300      	movs	r3, #0
   d5cb8:	9300      	str	r3, [sp, #0]
   d5cba:	461a      	mov	r2, r3
   d5cbc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5cc0:	f7fe ff78 	bl	d4bb4 <system_ctrl_set_result>
}
   d5cc4:	b003      	add	sp, #12
   d5cc6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5ccc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5ccc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5cce:	8843      	ldrh	r3, [r0, #2]
   d5cd0:	2b0a      	cmp	r3, #10
   d5cd2:	d008      	beq.n	d5ce6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5cd4:	2b50      	cmp	r3, #80	; 0x50
   d5cd6:	d109      	bne.n	d5cec <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5cd8:	4b09      	ldr	r3, [pc, #36]	; (d5d00 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5cda:	681b      	ldr	r3, [r3, #0]
   d5cdc:	b13b      	cbz	r3, d5cee <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d5cde:	b003      	add	sp, #12
   d5ce0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5ce4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5ce6:	f7ff ffe5 	bl	d5cb4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5cea:	e006      	b.n	d5cfa <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5cec:	2300      	movs	r3, #0
   d5cee:	9300      	str	r3, [sp, #0]
   d5cf0:	461a      	mov	r2, r3
   d5cf2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5cf6:	f7fe ff5d 	bl	d4bb4 <system_ctrl_set_result>
        break;
    }
}
   d5cfa:	b003      	add	sp, #12
   d5cfc:	f85d fb04 	ldr.w	pc, [sp], #4
   d5d00:	2003e710 	.word	0x2003e710

000d5d04 <module_user_init_hook>:

void module_user_init_hook()
{
   d5d04:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5d06:	f7fe fe13 	bl	d4930 <HAL_RNG_GetRandomNumber>
   d5d0a:	4604      	mov	r4, r0
    srand(seed);
   d5d0c:	f000 fefe 	bl	d6b0c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5d10:	4b07      	ldr	r3, [pc, #28]	; (d5d30 <module_user_init_hook+0x2c>)
   d5d12:	b113      	cbz	r3, d5d1a <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d5d14:	4620      	mov	r0, r4
   d5d16:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5d1a:	2100      	movs	r1, #0
   d5d1c:	4804      	ldr	r0, [pc, #16]	; (d5d30 <module_user_init_hook+0x2c>)
   d5d1e:	f7fe ff5b 	bl	d4bd8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5d22:	2100      	movs	r1, #0
   d5d24:	4803      	ldr	r0, [pc, #12]	; (d5d34 <module_user_init_hook+0x30>)
}
   d5d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5d2a:	f7fe bf39 	b.w	d4ba0 <system_ctrl_set_app_request_handler>
   d5d2e:	bf00      	nop
   d5d30:	00000000 	.word	0x00000000
   d5d34:	000d5ccd 	.word	0x000d5ccd

000d5d38 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d5d38:	b510      	push	{r4, lr}
   d5d3a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d5d3c:	480f      	ldr	r0, [pc, #60]	; (d5d7c <pinAvailable+0x44>)
   d5d3e:	f7ff fe83 	bl	d5a48 <_ZN8SPIClass9isEnabledEv>
   d5d42:	b128      	cbz	r0, d5d50 <pinAvailable+0x18>
   d5d44:	f1a4 030b 	sub.w	r3, r4, #11
   d5d48:	2b02      	cmp	r3, #2
   d5d4a:	d801      	bhi.n	d5d50 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d5d4c:	2000      	movs	r0, #0
   d5d4e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d5d50:	f000 f828 	bl	d5da4 <_Z19__fetch_global_Wirev>
   d5d54:	f7ff fb5e 	bl	d5414 <_ZN7TwoWire9isEnabledEv>
   d5d58:	b108      	cbz	r0, d5d5e <pinAvailable+0x26>
   d5d5a:	2c01      	cmp	r4, #1
   d5d5c:	d9f6      	bls.n	d5d4c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d5d5e:	f7ff fed1 	bl	d5b04 <_Z22__fetch_global_Serial1v>
   d5d62:	f7ff fecb 	bl	d5afc <_ZN11USARTSerial9isEnabledEv>
   d5d66:	b118      	cbz	r0, d5d70 <pinAvailable+0x38>
   d5d68:	f1a4 0309 	sub.w	r3, r4, #9
   d5d6c:	2b01      	cmp	r3, #1
   d5d6e:	d9ed      	bls.n	d5d4c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d5d70:	2c23      	cmp	r4, #35	; 0x23
   d5d72:	bf8c      	ite	hi
   d5d74:	2000      	movhi	r0, #0
   d5d76:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d5d78:	bd10      	pop	{r4, pc}
   d5d7a:	bf00      	nop
   d5d7c:	2003e730 	.word	0x2003e730

000d5d80 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5d80:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d5d82:	b538      	push	{r3, r4, r5, lr}
   d5d84:	4604      	mov	r4, r0
   d5d86:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5d88:	d80a      	bhi.n	d5da0 <pinMode+0x20>
   d5d8a:	29ff      	cmp	r1, #255	; 0xff
   d5d8c:	d008      	beq.n	d5da0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d5d8e:	f7ff ffd3 	bl	d5d38 <pinAvailable>
   d5d92:	b128      	cbz	r0, d5da0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5d94:	4629      	mov	r1, r5
   d5d96:	4620      	mov	r0, r4
}
   d5d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5d9c:	f7fe bde8 	b.w	d4970 <HAL_Pin_Mode>
   d5da0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5da4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d5da4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d5da6:	4d0b      	ldr	r5, [pc, #44]	; (d5dd4 <_Z19__fetch_global_Wirev+0x30>)
   d5da8:	6829      	ldr	r1, [r5, #0]
   d5daa:	f011 0401 	ands.w	r4, r1, #1
   d5dae:	d10f      	bne.n	d5dd0 <_Z19__fetch_global_Wirev+0x2c>
   d5db0:	4628      	mov	r0, r5
   d5db2:	f7fe f976 	bl	d40a2 <__cxa_guard_acquire>
   d5db6:	b158      	cbz	r0, d5dd0 <_Z19__fetch_global_Wirev+0x2c>
   d5db8:	4621      	mov	r1, r4
   d5dba:	4807      	ldr	r0, [pc, #28]	; (d5dd8 <_Z19__fetch_global_Wirev+0x34>)
   d5dbc:	f7ff fb18 	bl	d53f0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5dc0:	4628      	mov	r0, r5
   d5dc2:	f7fe f973 	bl	d40ac <__cxa_guard_release>
   d5dc6:	4a05      	ldr	r2, [pc, #20]	; (d5ddc <_Z19__fetch_global_Wirev+0x38>)
   d5dc8:	4905      	ldr	r1, [pc, #20]	; (d5de0 <_Z19__fetch_global_Wirev+0x3c>)
   d5dca:	4803      	ldr	r0, [pc, #12]	; (d5dd8 <_Z19__fetch_global_Wirev+0x34>)
   d5dcc:	f000 f82c 	bl	d5e28 <__aeabi_atexit>
	return wire;
}
   d5dd0:	4801      	ldr	r0, [pc, #4]	; (d5dd8 <_Z19__fetch_global_Wirev+0x34>)
   d5dd2:	bd38      	pop	{r3, r4, r5, pc}
   d5dd4:	2003e718 	.word	0x2003e718
   d5dd8:	2003e71c 	.word	0x2003e71c
   d5ddc:	2003e3f8 	.word	0x2003e3f8
   d5de0:	000d5399 	.word	0x000d5399

000d5de4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5de4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5de6:	4c0c      	ldr	r4, [pc, #48]	; (d5e18 <_GLOBAL__sub_I_SPI+0x34>)
   d5de8:	4e0c      	ldr	r6, [pc, #48]	; (d5e1c <_GLOBAL__sub_I_SPI+0x38>)
   d5dea:	4d0d      	ldr	r5, [pc, #52]	; (d5e20 <_GLOBAL__sub_I_SPI+0x3c>)
   d5dec:	2100      	movs	r1, #0
   d5dee:	4620      	mov	r0, r4
   d5df0:	f7ff fe16 	bl	d5a20 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5df4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5df6:	4c0b      	ldr	r4, [pc, #44]	; (d5e24 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5df8:	4632      	mov	r2, r6
   d5dfa:	4629      	mov	r1, r5
   d5dfc:	f000 f814 	bl	d5e28 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5e00:	2101      	movs	r1, #1
   d5e02:	4620      	mov	r0, r4
   d5e04:	f7ff fe0c 	bl	d5a20 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5e08:	4632      	mov	r2, r6
   d5e0a:	4629      	mov	r1, r5
   d5e0c:	4620      	mov	r0, r4
   d5e0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5e12:	f000 b809 	b.w	d5e28 <__aeabi_atexit>
   d5e16:	bf00      	nop
   d5e18:	2003e730 	.word	0x2003e730
   d5e1c:	2003e3f8 	.word	0x2003e3f8
   d5e20:	000d5a11 	.word	0x000d5a11
   d5e24:	2003e740 	.word	0x2003e740

000d5e28 <__aeabi_atexit>:
   d5e28:	460b      	mov	r3, r1
   d5e2a:	4601      	mov	r1, r0
   d5e2c:	4618      	mov	r0, r3
   d5e2e:	f000 be4b 	b.w	d6ac8 <__cxa_atexit>

000d5e32 <_ZSt25__throw_bad_function_callv>:
   d5e32:	b508      	push	{r3, lr}
   d5e34:	f7fe ff40 	bl	d4cb8 <abort>

000d5e38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5e38:	4b24      	ldr	r3, [pc, #144]	; (d5ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5e3a:	681a      	ldr	r2, [r3, #0]
   d5e3c:	07d0      	lsls	r0, r2, #31
   d5e3e:	bf5c      	itt	pl
   d5e40:	2201      	movpl	r2, #1
   d5e42:	601a      	strpl	r2, [r3, #0]
   d5e44:	4b22      	ldr	r3, [pc, #136]	; (d5ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5e46:	681a      	ldr	r2, [r3, #0]
   d5e48:	07d1      	lsls	r1, r2, #31
   d5e4a:	bf5c      	itt	pl
   d5e4c:	2201      	movpl	r2, #1
   d5e4e:	601a      	strpl	r2, [r3, #0]
   d5e50:	4b20      	ldr	r3, [pc, #128]	; (d5ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5e52:	681a      	ldr	r2, [r3, #0]
   d5e54:	07d2      	lsls	r2, r2, #31
   d5e56:	bf5c      	itt	pl
   d5e58:	2201      	movpl	r2, #1
   d5e5a:	601a      	strpl	r2, [r3, #0]
   d5e5c:	4b1e      	ldr	r3, [pc, #120]	; (d5ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5e5e:	681a      	ldr	r2, [r3, #0]
   d5e60:	07d0      	lsls	r0, r2, #31
   d5e62:	bf5c      	itt	pl
   d5e64:	2201      	movpl	r2, #1
   d5e66:	601a      	strpl	r2, [r3, #0]
   d5e68:	4b1c      	ldr	r3, [pc, #112]	; (d5edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5e6a:	681a      	ldr	r2, [r3, #0]
   d5e6c:	07d1      	lsls	r1, r2, #31
   d5e6e:	bf5c      	itt	pl
   d5e70:	2201      	movpl	r2, #1
   d5e72:	601a      	strpl	r2, [r3, #0]
   d5e74:	4b1a      	ldr	r3, [pc, #104]	; (d5ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5e76:	681a      	ldr	r2, [r3, #0]
   d5e78:	07d2      	lsls	r2, r2, #31
   d5e7a:	bf5c      	itt	pl
   d5e7c:	2201      	movpl	r2, #1
   d5e7e:	601a      	strpl	r2, [r3, #0]
   d5e80:	4b18      	ldr	r3, [pc, #96]	; (d5ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5e82:	681a      	ldr	r2, [r3, #0]
   d5e84:	07d0      	lsls	r0, r2, #31
   d5e86:	bf5c      	itt	pl
   d5e88:	2201      	movpl	r2, #1
   d5e8a:	601a      	strpl	r2, [r3, #0]
   d5e8c:	4b16      	ldr	r3, [pc, #88]	; (d5ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5e8e:	681a      	ldr	r2, [r3, #0]
   d5e90:	07d1      	lsls	r1, r2, #31
   d5e92:	bf5c      	itt	pl
   d5e94:	2201      	movpl	r2, #1
   d5e96:	601a      	strpl	r2, [r3, #0]
   d5e98:	4b14      	ldr	r3, [pc, #80]	; (d5eec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5e9a:	681a      	ldr	r2, [r3, #0]
   d5e9c:	07d2      	lsls	r2, r2, #31
   d5e9e:	bf5c      	itt	pl
   d5ea0:	2201      	movpl	r2, #1
   d5ea2:	601a      	strpl	r2, [r3, #0]
   d5ea4:	4b12      	ldr	r3, [pc, #72]	; (d5ef0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5ea6:	681a      	ldr	r2, [r3, #0]
   d5ea8:	07d0      	lsls	r0, r2, #31
   d5eaa:	bf5c      	itt	pl
   d5eac:	2201      	movpl	r2, #1
   d5eae:	601a      	strpl	r2, [r3, #0]
   d5eb0:	4b10      	ldr	r3, [pc, #64]	; (d5ef4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5eb2:	681a      	ldr	r2, [r3, #0]
   d5eb4:	07d1      	lsls	r1, r2, #31
   d5eb6:	bf5c      	itt	pl
   d5eb8:	2201      	movpl	r2, #1
   d5eba:	601a      	strpl	r2, [r3, #0]
   d5ebc:	4b0e      	ldr	r3, [pc, #56]	; (d5ef8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5ebe:	681a      	ldr	r2, [r3, #0]
   d5ec0:	07d2      	lsls	r2, r2, #31
   d5ec2:	bf5c      	itt	pl
   d5ec4:	2201      	movpl	r2, #1
   d5ec6:	601a      	strpl	r2, [r3, #0]
   d5ec8:	4770      	bx	lr
   d5eca:	bf00      	nop
   d5ecc:	2003e77c 	.word	0x2003e77c
   d5ed0:	2003e778 	.word	0x2003e778
   d5ed4:	2003e774 	.word	0x2003e774
   d5ed8:	2003e770 	.word	0x2003e770
   d5edc:	2003e76c 	.word	0x2003e76c
   d5ee0:	2003e768 	.word	0x2003e768
   d5ee4:	2003e764 	.word	0x2003e764
   d5ee8:	2003e760 	.word	0x2003e760
   d5eec:	2003e75c 	.word	0x2003e75c
   d5ef0:	2003e758 	.word	0x2003e758
   d5ef4:	2003e754 	.word	0x2003e754
   d5ef8:	2003e750 	.word	0x2003e750

000d5efc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5efc:	4b18      	ldr	r3, [pc, #96]	; (d5f60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5efe:	681a      	ldr	r2, [r3, #0]
   d5f00:	07d1      	lsls	r1, r2, #31
   d5f02:	bf5c      	itt	pl
   d5f04:	2201      	movpl	r2, #1
   d5f06:	601a      	strpl	r2, [r3, #0]
   d5f08:	4b16      	ldr	r3, [pc, #88]	; (d5f64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5f0a:	681a      	ldr	r2, [r3, #0]
   d5f0c:	07d2      	lsls	r2, r2, #31
   d5f0e:	bf5c      	itt	pl
   d5f10:	2201      	movpl	r2, #1
   d5f12:	601a      	strpl	r2, [r3, #0]
   d5f14:	4b14      	ldr	r3, [pc, #80]	; (d5f68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5f16:	681a      	ldr	r2, [r3, #0]
   d5f18:	07d0      	lsls	r0, r2, #31
   d5f1a:	bf5c      	itt	pl
   d5f1c:	2201      	movpl	r2, #1
   d5f1e:	601a      	strpl	r2, [r3, #0]
   d5f20:	4b12      	ldr	r3, [pc, #72]	; (d5f6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5f22:	681a      	ldr	r2, [r3, #0]
   d5f24:	07d1      	lsls	r1, r2, #31
   d5f26:	bf5c      	itt	pl
   d5f28:	2201      	movpl	r2, #1
   d5f2a:	601a      	strpl	r2, [r3, #0]
   d5f2c:	4b10      	ldr	r3, [pc, #64]	; (d5f70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5f2e:	681a      	ldr	r2, [r3, #0]
   d5f30:	07d2      	lsls	r2, r2, #31
   d5f32:	bf5c      	itt	pl
   d5f34:	2201      	movpl	r2, #1
   d5f36:	601a      	strpl	r2, [r3, #0]
   d5f38:	4b0e      	ldr	r3, [pc, #56]	; (d5f74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5f3a:	681a      	ldr	r2, [r3, #0]
   d5f3c:	07d0      	lsls	r0, r2, #31
   d5f3e:	bf5c      	itt	pl
   d5f40:	2201      	movpl	r2, #1
   d5f42:	601a      	strpl	r2, [r3, #0]
   d5f44:	4b0c      	ldr	r3, [pc, #48]	; (d5f78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5f46:	681a      	ldr	r2, [r3, #0]
   d5f48:	07d1      	lsls	r1, r2, #31
   d5f4a:	bf5c      	itt	pl
   d5f4c:	2201      	movpl	r2, #1
   d5f4e:	601a      	strpl	r2, [r3, #0]
   d5f50:	4b0a      	ldr	r3, [pc, #40]	; (d5f7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5f52:	681a      	ldr	r2, [r3, #0]
   d5f54:	07d2      	lsls	r2, r2, #31
   d5f56:	bf5c      	itt	pl
   d5f58:	2201      	movpl	r2, #1
   d5f5a:	601a      	strpl	r2, [r3, #0]
   d5f5c:	4770      	bx	lr
   d5f5e:	bf00      	nop
   d5f60:	2003e79c 	.word	0x2003e79c
   d5f64:	2003e798 	.word	0x2003e798
   d5f68:	2003e794 	.word	0x2003e794
   d5f6c:	2003e790 	.word	0x2003e790
   d5f70:	2003e78c 	.word	0x2003e78c
   d5f74:	2003e788 	.word	0x2003e788
   d5f78:	2003e784 	.word	0x2003e784
   d5f7c:	2003e780 	.word	0x2003e780

000d5f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5f80:	4b18      	ldr	r3, [pc, #96]	; (d5fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5f82:	681a      	ldr	r2, [r3, #0]
   d5f84:	07d1      	lsls	r1, r2, #31
   d5f86:	bf5c      	itt	pl
   d5f88:	2201      	movpl	r2, #1
   d5f8a:	601a      	strpl	r2, [r3, #0]
   d5f8c:	4b16      	ldr	r3, [pc, #88]	; (d5fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5f8e:	681a      	ldr	r2, [r3, #0]
   d5f90:	07d2      	lsls	r2, r2, #31
   d5f92:	bf5c      	itt	pl
   d5f94:	2201      	movpl	r2, #1
   d5f96:	601a      	strpl	r2, [r3, #0]
   d5f98:	4b14      	ldr	r3, [pc, #80]	; (d5fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5f9a:	681a      	ldr	r2, [r3, #0]
   d5f9c:	07d0      	lsls	r0, r2, #31
   d5f9e:	bf5c      	itt	pl
   d5fa0:	2201      	movpl	r2, #1
   d5fa2:	601a      	strpl	r2, [r3, #0]
   d5fa4:	4b12      	ldr	r3, [pc, #72]	; (d5ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5fa6:	681a      	ldr	r2, [r3, #0]
   d5fa8:	07d1      	lsls	r1, r2, #31
   d5faa:	bf5c      	itt	pl
   d5fac:	2201      	movpl	r2, #1
   d5fae:	601a      	strpl	r2, [r3, #0]
   d5fb0:	4b10      	ldr	r3, [pc, #64]	; (d5ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5fb2:	681a      	ldr	r2, [r3, #0]
   d5fb4:	07d2      	lsls	r2, r2, #31
   d5fb6:	bf5c      	itt	pl
   d5fb8:	2201      	movpl	r2, #1
   d5fba:	601a      	strpl	r2, [r3, #0]
   d5fbc:	4b0e      	ldr	r3, [pc, #56]	; (d5ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5fbe:	681a      	ldr	r2, [r3, #0]
   d5fc0:	07d0      	lsls	r0, r2, #31
   d5fc2:	bf5c      	itt	pl
   d5fc4:	2201      	movpl	r2, #1
   d5fc6:	601a      	strpl	r2, [r3, #0]
   d5fc8:	4b0c      	ldr	r3, [pc, #48]	; (d5ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5fca:	681a      	ldr	r2, [r3, #0]
   d5fcc:	07d1      	lsls	r1, r2, #31
   d5fce:	bf5c      	itt	pl
   d5fd0:	2201      	movpl	r2, #1
   d5fd2:	601a      	strpl	r2, [r3, #0]
   d5fd4:	4b0a      	ldr	r3, [pc, #40]	; (d6000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5fd6:	681a      	ldr	r2, [r3, #0]
   d5fd8:	07d2      	lsls	r2, r2, #31
   d5fda:	bf5c      	itt	pl
   d5fdc:	2201      	movpl	r2, #1
   d5fde:	601a      	strpl	r2, [r3, #0]
   d5fe0:	4770      	bx	lr
   d5fe2:	bf00      	nop
   d5fe4:	2003e7bc 	.word	0x2003e7bc
   d5fe8:	2003e7b8 	.word	0x2003e7b8
   d5fec:	2003e7b4 	.word	0x2003e7b4
   d5ff0:	2003e7b0 	.word	0x2003e7b0
   d5ff4:	2003e7ac 	.word	0x2003e7ac
   d5ff8:	2003e7a8 	.word	0x2003e7a8
   d5ffc:	2003e7a4 	.word	0x2003e7a4
   d6000:	2003e7a0 	.word	0x2003e7a0

000d6004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6004:	4b24      	ldr	r3, [pc, #144]	; (d6098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6006:	681a      	ldr	r2, [r3, #0]
   d6008:	07d0      	lsls	r0, r2, #31
   d600a:	bf5c      	itt	pl
   d600c:	2201      	movpl	r2, #1
   d600e:	601a      	strpl	r2, [r3, #0]
   d6010:	4b22      	ldr	r3, [pc, #136]	; (d609c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6012:	681a      	ldr	r2, [r3, #0]
   d6014:	07d1      	lsls	r1, r2, #31
   d6016:	bf5c      	itt	pl
   d6018:	2201      	movpl	r2, #1
   d601a:	601a      	strpl	r2, [r3, #0]
   d601c:	4b20      	ldr	r3, [pc, #128]	; (d60a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d601e:	681a      	ldr	r2, [r3, #0]
   d6020:	07d2      	lsls	r2, r2, #31
   d6022:	bf5c      	itt	pl
   d6024:	2201      	movpl	r2, #1
   d6026:	601a      	strpl	r2, [r3, #0]
   d6028:	4b1e      	ldr	r3, [pc, #120]	; (d60a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d602a:	681a      	ldr	r2, [r3, #0]
   d602c:	07d0      	lsls	r0, r2, #31
   d602e:	bf5c      	itt	pl
   d6030:	2201      	movpl	r2, #1
   d6032:	601a      	strpl	r2, [r3, #0]
   d6034:	4b1c      	ldr	r3, [pc, #112]	; (d60a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6036:	681a      	ldr	r2, [r3, #0]
   d6038:	07d1      	lsls	r1, r2, #31
   d603a:	bf5c      	itt	pl
   d603c:	2201      	movpl	r2, #1
   d603e:	601a      	strpl	r2, [r3, #0]
   d6040:	4b1a      	ldr	r3, [pc, #104]	; (d60ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6042:	681a      	ldr	r2, [r3, #0]
   d6044:	07d2      	lsls	r2, r2, #31
   d6046:	bf5c      	itt	pl
   d6048:	2201      	movpl	r2, #1
   d604a:	601a      	strpl	r2, [r3, #0]
   d604c:	4b18      	ldr	r3, [pc, #96]	; (d60b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d604e:	681a      	ldr	r2, [r3, #0]
   d6050:	07d0      	lsls	r0, r2, #31
   d6052:	bf5c      	itt	pl
   d6054:	2201      	movpl	r2, #1
   d6056:	601a      	strpl	r2, [r3, #0]
   d6058:	4b16      	ldr	r3, [pc, #88]	; (d60b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d605a:	681a      	ldr	r2, [r3, #0]
   d605c:	07d1      	lsls	r1, r2, #31
   d605e:	bf5c      	itt	pl
   d6060:	2201      	movpl	r2, #1
   d6062:	601a      	strpl	r2, [r3, #0]
   d6064:	4b14      	ldr	r3, [pc, #80]	; (d60b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6066:	681a      	ldr	r2, [r3, #0]
   d6068:	07d2      	lsls	r2, r2, #31
   d606a:	bf5c      	itt	pl
   d606c:	2201      	movpl	r2, #1
   d606e:	601a      	strpl	r2, [r3, #0]
   d6070:	4b12      	ldr	r3, [pc, #72]	; (d60bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6072:	681a      	ldr	r2, [r3, #0]
   d6074:	07d0      	lsls	r0, r2, #31
   d6076:	bf5c      	itt	pl
   d6078:	2201      	movpl	r2, #1
   d607a:	601a      	strpl	r2, [r3, #0]
   d607c:	4b10      	ldr	r3, [pc, #64]	; (d60c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d607e:	681a      	ldr	r2, [r3, #0]
   d6080:	07d1      	lsls	r1, r2, #31
   d6082:	bf5c      	itt	pl
   d6084:	2201      	movpl	r2, #1
   d6086:	601a      	strpl	r2, [r3, #0]
   d6088:	4b0e      	ldr	r3, [pc, #56]	; (d60c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d608a:	681a      	ldr	r2, [r3, #0]
   d608c:	07d2      	lsls	r2, r2, #31
   d608e:	bf5c      	itt	pl
   d6090:	2201      	movpl	r2, #1
   d6092:	601a      	strpl	r2, [r3, #0]
   d6094:	4770      	bx	lr
   d6096:	bf00      	nop
   d6098:	2003e7ec 	.word	0x2003e7ec
   d609c:	2003e7e8 	.word	0x2003e7e8
   d60a0:	2003e7e4 	.word	0x2003e7e4
   d60a4:	2003e7e0 	.word	0x2003e7e0
   d60a8:	2003e7dc 	.word	0x2003e7dc
   d60ac:	2003e7d8 	.word	0x2003e7d8
   d60b0:	2003e7d4 	.word	0x2003e7d4
   d60b4:	2003e7d0 	.word	0x2003e7d0
   d60b8:	2003e7cc 	.word	0x2003e7cc
   d60bc:	2003e7c8 	.word	0x2003e7c8
   d60c0:	2003e7c4 	.word	0x2003e7c4
   d60c4:	2003e7c0 	.word	0x2003e7c0

000d60c8 <__aeabi_drsub>:
   d60c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d60cc:	e002      	b.n	d60d4 <__adddf3>
   d60ce:	bf00      	nop

000d60d0 <__aeabi_dsub>:
   d60d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d60d4 <__adddf3>:
   d60d4:	b530      	push	{r4, r5, lr}
   d60d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d60da:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d60de:	ea94 0f05 	teq	r4, r5
   d60e2:	bf08      	it	eq
   d60e4:	ea90 0f02 	teqeq	r0, r2
   d60e8:	bf1f      	itttt	ne
   d60ea:	ea54 0c00 	orrsne.w	ip, r4, r0
   d60ee:	ea55 0c02 	orrsne.w	ip, r5, r2
   d60f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d60f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d60fa:	f000 80e2 	beq.w	d62c2 <__adddf3+0x1ee>
   d60fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6102:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6106:	bfb8      	it	lt
   d6108:	426d      	neglt	r5, r5
   d610a:	dd0c      	ble.n	d6126 <__adddf3+0x52>
   d610c:	442c      	add	r4, r5
   d610e:	ea80 0202 	eor.w	r2, r0, r2
   d6112:	ea81 0303 	eor.w	r3, r1, r3
   d6116:	ea82 0000 	eor.w	r0, r2, r0
   d611a:	ea83 0101 	eor.w	r1, r3, r1
   d611e:	ea80 0202 	eor.w	r2, r0, r2
   d6122:	ea81 0303 	eor.w	r3, r1, r3
   d6126:	2d36      	cmp	r5, #54	; 0x36
   d6128:	bf88      	it	hi
   d612a:	bd30      	pophi	{r4, r5, pc}
   d612c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6130:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6134:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6138:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d613c:	d002      	beq.n	d6144 <__adddf3+0x70>
   d613e:	4240      	negs	r0, r0
   d6140:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6144:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6148:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d614c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6150:	d002      	beq.n	d6158 <__adddf3+0x84>
   d6152:	4252      	negs	r2, r2
   d6154:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6158:	ea94 0f05 	teq	r4, r5
   d615c:	f000 80a7 	beq.w	d62ae <__adddf3+0x1da>
   d6160:	f1a4 0401 	sub.w	r4, r4, #1
   d6164:	f1d5 0e20 	rsbs	lr, r5, #32
   d6168:	db0d      	blt.n	d6186 <__adddf3+0xb2>
   d616a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d616e:	fa22 f205 	lsr.w	r2, r2, r5
   d6172:	1880      	adds	r0, r0, r2
   d6174:	f141 0100 	adc.w	r1, r1, #0
   d6178:	fa03 f20e 	lsl.w	r2, r3, lr
   d617c:	1880      	adds	r0, r0, r2
   d617e:	fa43 f305 	asr.w	r3, r3, r5
   d6182:	4159      	adcs	r1, r3
   d6184:	e00e      	b.n	d61a4 <__adddf3+0xd0>
   d6186:	f1a5 0520 	sub.w	r5, r5, #32
   d618a:	f10e 0e20 	add.w	lr, lr, #32
   d618e:	2a01      	cmp	r2, #1
   d6190:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6194:	bf28      	it	cs
   d6196:	f04c 0c02 	orrcs.w	ip, ip, #2
   d619a:	fa43 f305 	asr.w	r3, r3, r5
   d619e:	18c0      	adds	r0, r0, r3
   d61a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d61a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d61a8:	d507      	bpl.n	d61ba <__adddf3+0xe6>
   d61aa:	f04f 0e00 	mov.w	lr, #0
   d61ae:	f1dc 0c00 	rsbs	ip, ip, #0
   d61b2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d61b6:	eb6e 0101 	sbc.w	r1, lr, r1
   d61ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d61be:	d31b      	bcc.n	d61f8 <__adddf3+0x124>
   d61c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d61c4:	d30c      	bcc.n	d61e0 <__adddf3+0x10c>
   d61c6:	0849      	lsrs	r1, r1, #1
   d61c8:	ea5f 0030 	movs.w	r0, r0, rrx
   d61cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d61d0:	f104 0401 	add.w	r4, r4, #1
   d61d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d61d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d61dc:	f080 809a 	bcs.w	d6314 <__adddf3+0x240>
   d61e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d61e4:	bf08      	it	eq
   d61e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d61ea:	f150 0000 	adcs.w	r0, r0, #0
   d61ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d61f2:	ea41 0105 	orr.w	r1, r1, r5
   d61f6:	bd30      	pop	{r4, r5, pc}
   d61f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d61fc:	4140      	adcs	r0, r0
   d61fe:	eb41 0101 	adc.w	r1, r1, r1
   d6202:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6206:	f1a4 0401 	sub.w	r4, r4, #1
   d620a:	d1e9      	bne.n	d61e0 <__adddf3+0x10c>
   d620c:	f091 0f00 	teq	r1, #0
   d6210:	bf04      	itt	eq
   d6212:	4601      	moveq	r1, r0
   d6214:	2000      	moveq	r0, #0
   d6216:	fab1 f381 	clz	r3, r1
   d621a:	bf08      	it	eq
   d621c:	3320      	addeq	r3, #32
   d621e:	f1a3 030b 	sub.w	r3, r3, #11
   d6222:	f1b3 0220 	subs.w	r2, r3, #32
   d6226:	da0c      	bge.n	d6242 <__adddf3+0x16e>
   d6228:	320c      	adds	r2, #12
   d622a:	dd08      	ble.n	d623e <__adddf3+0x16a>
   d622c:	f102 0c14 	add.w	ip, r2, #20
   d6230:	f1c2 020c 	rsb	r2, r2, #12
   d6234:	fa01 f00c 	lsl.w	r0, r1, ip
   d6238:	fa21 f102 	lsr.w	r1, r1, r2
   d623c:	e00c      	b.n	d6258 <__adddf3+0x184>
   d623e:	f102 0214 	add.w	r2, r2, #20
   d6242:	bfd8      	it	le
   d6244:	f1c2 0c20 	rsble	ip, r2, #32
   d6248:	fa01 f102 	lsl.w	r1, r1, r2
   d624c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6250:	bfdc      	itt	le
   d6252:	ea41 010c 	orrle.w	r1, r1, ip
   d6256:	4090      	lslle	r0, r2
   d6258:	1ae4      	subs	r4, r4, r3
   d625a:	bfa2      	ittt	ge
   d625c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6260:	4329      	orrge	r1, r5
   d6262:	bd30      	popge	{r4, r5, pc}
   d6264:	ea6f 0404 	mvn.w	r4, r4
   d6268:	3c1f      	subs	r4, #31
   d626a:	da1c      	bge.n	d62a6 <__adddf3+0x1d2>
   d626c:	340c      	adds	r4, #12
   d626e:	dc0e      	bgt.n	d628e <__adddf3+0x1ba>
   d6270:	f104 0414 	add.w	r4, r4, #20
   d6274:	f1c4 0220 	rsb	r2, r4, #32
   d6278:	fa20 f004 	lsr.w	r0, r0, r4
   d627c:	fa01 f302 	lsl.w	r3, r1, r2
   d6280:	ea40 0003 	orr.w	r0, r0, r3
   d6284:	fa21 f304 	lsr.w	r3, r1, r4
   d6288:	ea45 0103 	orr.w	r1, r5, r3
   d628c:	bd30      	pop	{r4, r5, pc}
   d628e:	f1c4 040c 	rsb	r4, r4, #12
   d6292:	f1c4 0220 	rsb	r2, r4, #32
   d6296:	fa20 f002 	lsr.w	r0, r0, r2
   d629a:	fa01 f304 	lsl.w	r3, r1, r4
   d629e:	ea40 0003 	orr.w	r0, r0, r3
   d62a2:	4629      	mov	r1, r5
   d62a4:	bd30      	pop	{r4, r5, pc}
   d62a6:	fa21 f004 	lsr.w	r0, r1, r4
   d62aa:	4629      	mov	r1, r5
   d62ac:	bd30      	pop	{r4, r5, pc}
   d62ae:	f094 0f00 	teq	r4, #0
   d62b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d62b6:	bf06      	itte	eq
   d62b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d62bc:	3401      	addeq	r4, #1
   d62be:	3d01      	subne	r5, #1
   d62c0:	e74e      	b.n	d6160 <__adddf3+0x8c>
   d62c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d62c6:	bf18      	it	ne
   d62c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d62cc:	d029      	beq.n	d6322 <__adddf3+0x24e>
   d62ce:	ea94 0f05 	teq	r4, r5
   d62d2:	bf08      	it	eq
   d62d4:	ea90 0f02 	teqeq	r0, r2
   d62d8:	d005      	beq.n	d62e6 <__adddf3+0x212>
   d62da:	ea54 0c00 	orrs.w	ip, r4, r0
   d62de:	bf04      	itt	eq
   d62e0:	4619      	moveq	r1, r3
   d62e2:	4610      	moveq	r0, r2
   d62e4:	bd30      	pop	{r4, r5, pc}
   d62e6:	ea91 0f03 	teq	r1, r3
   d62ea:	bf1e      	ittt	ne
   d62ec:	2100      	movne	r1, #0
   d62ee:	2000      	movne	r0, #0
   d62f0:	bd30      	popne	{r4, r5, pc}
   d62f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d62f6:	d105      	bne.n	d6304 <__adddf3+0x230>
   d62f8:	0040      	lsls	r0, r0, #1
   d62fa:	4149      	adcs	r1, r1
   d62fc:	bf28      	it	cs
   d62fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6302:	bd30      	pop	{r4, r5, pc}
   d6304:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6308:	bf3c      	itt	cc
   d630a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d630e:	bd30      	popcc	{r4, r5, pc}
   d6310:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6314:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6318:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d631c:	f04f 0000 	mov.w	r0, #0
   d6320:	bd30      	pop	{r4, r5, pc}
   d6322:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6326:	bf1a      	itte	ne
   d6328:	4619      	movne	r1, r3
   d632a:	4610      	movne	r0, r2
   d632c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6330:	bf1c      	itt	ne
   d6332:	460b      	movne	r3, r1
   d6334:	4602      	movne	r2, r0
   d6336:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d633a:	bf06      	itte	eq
   d633c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6340:	ea91 0f03 	teqeq	r1, r3
   d6344:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6348:	bd30      	pop	{r4, r5, pc}
   d634a:	bf00      	nop

000d634c <__aeabi_ui2d>:
   d634c:	f090 0f00 	teq	r0, #0
   d6350:	bf04      	itt	eq
   d6352:	2100      	moveq	r1, #0
   d6354:	4770      	bxeq	lr
   d6356:	b530      	push	{r4, r5, lr}
   d6358:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d635c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6360:	f04f 0500 	mov.w	r5, #0
   d6364:	f04f 0100 	mov.w	r1, #0
   d6368:	e750      	b.n	d620c <__adddf3+0x138>
   d636a:	bf00      	nop

000d636c <__aeabi_i2d>:
   d636c:	f090 0f00 	teq	r0, #0
   d6370:	bf04      	itt	eq
   d6372:	2100      	moveq	r1, #0
   d6374:	4770      	bxeq	lr
   d6376:	b530      	push	{r4, r5, lr}
   d6378:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d637c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6380:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6384:	bf48      	it	mi
   d6386:	4240      	negmi	r0, r0
   d6388:	f04f 0100 	mov.w	r1, #0
   d638c:	e73e      	b.n	d620c <__adddf3+0x138>
   d638e:	bf00      	nop

000d6390 <__aeabi_f2d>:
   d6390:	0042      	lsls	r2, r0, #1
   d6392:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6396:	ea4f 0131 	mov.w	r1, r1, rrx
   d639a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d639e:	bf1f      	itttt	ne
   d63a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d63a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d63a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d63ac:	4770      	bxne	lr
   d63ae:	f092 0f00 	teq	r2, #0
   d63b2:	bf14      	ite	ne
   d63b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d63b8:	4770      	bxeq	lr
   d63ba:	b530      	push	{r4, r5, lr}
   d63bc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d63c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d63c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d63c8:	e720      	b.n	d620c <__adddf3+0x138>
   d63ca:	bf00      	nop

000d63cc <__aeabi_ul2d>:
   d63cc:	ea50 0201 	orrs.w	r2, r0, r1
   d63d0:	bf08      	it	eq
   d63d2:	4770      	bxeq	lr
   d63d4:	b530      	push	{r4, r5, lr}
   d63d6:	f04f 0500 	mov.w	r5, #0
   d63da:	e00a      	b.n	d63f2 <__aeabi_l2d+0x16>

000d63dc <__aeabi_l2d>:
   d63dc:	ea50 0201 	orrs.w	r2, r0, r1
   d63e0:	bf08      	it	eq
   d63e2:	4770      	bxeq	lr
   d63e4:	b530      	push	{r4, r5, lr}
   d63e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d63ea:	d502      	bpl.n	d63f2 <__aeabi_l2d+0x16>
   d63ec:	4240      	negs	r0, r0
   d63ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d63f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d63f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d63fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d63fe:	f43f aedc 	beq.w	d61ba <__adddf3+0xe6>
   d6402:	f04f 0203 	mov.w	r2, #3
   d6406:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d640a:	bf18      	it	ne
   d640c:	3203      	addne	r2, #3
   d640e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6412:	bf18      	it	ne
   d6414:	3203      	addne	r2, #3
   d6416:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d641a:	f1c2 0320 	rsb	r3, r2, #32
   d641e:	fa00 fc03 	lsl.w	ip, r0, r3
   d6422:	fa20 f002 	lsr.w	r0, r0, r2
   d6426:	fa01 fe03 	lsl.w	lr, r1, r3
   d642a:	ea40 000e 	orr.w	r0, r0, lr
   d642e:	fa21 f102 	lsr.w	r1, r1, r2
   d6432:	4414      	add	r4, r2
   d6434:	e6c1      	b.n	d61ba <__adddf3+0xe6>
   d6436:	bf00      	nop

000d6438 <__aeabi_dmul>:
   d6438:	b570      	push	{r4, r5, r6, lr}
   d643a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d643e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6442:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6446:	bf1d      	ittte	ne
   d6448:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d644c:	ea94 0f0c 	teqne	r4, ip
   d6450:	ea95 0f0c 	teqne	r5, ip
   d6454:	f000 f8de 	bleq	d6614 <__aeabi_dmul+0x1dc>
   d6458:	442c      	add	r4, r5
   d645a:	ea81 0603 	eor.w	r6, r1, r3
   d645e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6462:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6466:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d646a:	bf18      	it	ne
   d646c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6470:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6474:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6478:	d038      	beq.n	d64ec <__aeabi_dmul+0xb4>
   d647a:	fba0 ce02 	umull	ip, lr, r0, r2
   d647e:	f04f 0500 	mov.w	r5, #0
   d6482:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6486:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d648a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d648e:	f04f 0600 	mov.w	r6, #0
   d6492:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6496:	f09c 0f00 	teq	ip, #0
   d649a:	bf18      	it	ne
   d649c:	f04e 0e01 	orrne.w	lr, lr, #1
   d64a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d64a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d64a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d64ac:	d204      	bcs.n	d64b8 <__aeabi_dmul+0x80>
   d64ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d64b2:	416d      	adcs	r5, r5
   d64b4:	eb46 0606 	adc.w	r6, r6, r6
   d64b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d64bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d64c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d64c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d64c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d64cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d64d0:	bf88      	it	hi
   d64d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d64d6:	d81e      	bhi.n	d6516 <__aeabi_dmul+0xde>
   d64d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d64dc:	bf08      	it	eq
   d64de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d64e2:	f150 0000 	adcs.w	r0, r0, #0
   d64e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d64ea:	bd70      	pop	{r4, r5, r6, pc}
   d64ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d64f0:	ea46 0101 	orr.w	r1, r6, r1
   d64f4:	ea40 0002 	orr.w	r0, r0, r2
   d64f8:	ea81 0103 	eor.w	r1, r1, r3
   d64fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6500:	bfc2      	ittt	gt
   d6502:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6506:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d650a:	bd70      	popgt	{r4, r5, r6, pc}
   d650c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6510:	f04f 0e00 	mov.w	lr, #0
   d6514:	3c01      	subs	r4, #1
   d6516:	f300 80ab 	bgt.w	d6670 <__aeabi_dmul+0x238>
   d651a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d651e:	bfde      	ittt	le
   d6520:	2000      	movle	r0, #0
   d6522:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6526:	bd70      	pople	{r4, r5, r6, pc}
   d6528:	f1c4 0400 	rsb	r4, r4, #0
   d652c:	3c20      	subs	r4, #32
   d652e:	da35      	bge.n	d659c <__aeabi_dmul+0x164>
   d6530:	340c      	adds	r4, #12
   d6532:	dc1b      	bgt.n	d656c <__aeabi_dmul+0x134>
   d6534:	f104 0414 	add.w	r4, r4, #20
   d6538:	f1c4 0520 	rsb	r5, r4, #32
   d653c:	fa00 f305 	lsl.w	r3, r0, r5
   d6540:	fa20 f004 	lsr.w	r0, r0, r4
   d6544:	fa01 f205 	lsl.w	r2, r1, r5
   d6548:	ea40 0002 	orr.w	r0, r0, r2
   d654c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6550:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6554:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6558:	fa21 f604 	lsr.w	r6, r1, r4
   d655c:	eb42 0106 	adc.w	r1, r2, r6
   d6560:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6564:	bf08      	it	eq
   d6566:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d656a:	bd70      	pop	{r4, r5, r6, pc}
   d656c:	f1c4 040c 	rsb	r4, r4, #12
   d6570:	f1c4 0520 	rsb	r5, r4, #32
   d6574:	fa00 f304 	lsl.w	r3, r0, r4
   d6578:	fa20 f005 	lsr.w	r0, r0, r5
   d657c:	fa01 f204 	lsl.w	r2, r1, r4
   d6580:	ea40 0002 	orr.w	r0, r0, r2
   d6584:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6588:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d658c:	f141 0100 	adc.w	r1, r1, #0
   d6590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6594:	bf08      	it	eq
   d6596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d659a:	bd70      	pop	{r4, r5, r6, pc}
   d659c:	f1c4 0520 	rsb	r5, r4, #32
   d65a0:	fa00 f205 	lsl.w	r2, r0, r5
   d65a4:	ea4e 0e02 	orr.w	lr, lr, r2
   d65a8:	fa20 f304 	lsr.w	r3, r0, r4
   d65ac:	fa01 f205 	lsl.w	r2, r1, r5
   d65b0:	ea43 0302 	orr.w	r3, r3, r2
   d65b4:	fa21 f004 	lsr.w	r0, r1, r4
   d65b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d65bc:	fa21 f204 	lsr.w	r2, r1, r4
   d65c0:	ea20 0002 	bic.w	r0, r0, r2
   d65c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d65c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d65cc:	bf08      	it	eq
   d65ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d65d2:	bd70      	pop	{r4, r5, r6, pc}
   d65d4:	f094 0f00 	teq	r4, #0
   d65d8:	d10f      	bne.n	d65fa <__aeabi_dmul+0x1c2>
   d65da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d65de:	0040      	lsls	r0, r0, #1
   d65e0:	eb41 0101 	adc.w	r1, r1, r1
   d65e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d65e8:	bf08      	it	eq
   d65ea:	3c01      	subeq	r4, #1
   d65ec:	d0f7      	beq.n	d65de <__aeabi_dmul+0x1a6>
   d65ee:	ea41 0106 	orr.w	r1, r1, r6
   d65f2:	f095 0f00 	teq	r5, #0
   d65f6:	bf18      	it	ne
   d65f8:	4770      	bxne	lr
   d65fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d65fe:	0052      	lsls	r2, r2, #1
   d6600:	eb43 0303 	adc.w	r3, r3, r3
   d6604:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6608:	bf08      	it	eq
   d660a:	3d01      	subeq	r5, #1
   d660c:	d0f7      	beq.n	d65fe <__aeabi_dmul+0x1c6>
   d660e:	ea43 0306 	orr.w	r3, r3, r6
   d6612:	4770      	bx	lr
   d6614:	ea94 0f0c 	teq	r4, ip
   d6618:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d661c:	bf18      	it	ne
   d661e:	ea95 0f0c 	teqne	r5, ip
   d6622:	d00c      	beq.n	d663e <__aeabi_dmul+0x206>
   d6624:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6628:	bf18      	it	ne
   d662a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d662e:	d1d1      	bne.n	d65d4 <__aeabi_dmul+0x19c>
   d6630:	ea81 0103 	eor.w	r1, r1, r3
   d6634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6638:	f04f 0000 	mov.w	r0, #0
   d663c:	bd70      	pop	{r4, r5, r6, pc}
   d663e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6642:	bf06      	itte	eq
   d6644:	4610      	moveq	r0, r2
   d6646:	4619      	moveq	r1, r3
   d6648:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d664c:	d019      	beq.n	d6682 <__aeabi_dmul+0x24a>
   d664e:	ea94 0f0c 	teq	r4, ip
   d6652:	d102      	bne.n	d665a <__aeabi_dmul+0x222>
   d6654:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6658:	d113      	bne.n	d6682 <__aeabi_dmul+0x24a>
   d665a:	ea95 0f0c 	teq	r5, ip
   d665e:	d105      	bne.n	d666c <__aeabi_dmul+0x234>
   d6660:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6664:	bf1c      	itt	ne
   d6666:	4610      	movne	r0, r2
   d6668:	4619      	movne	r1, r3
   d666a:	d10a      	bne.n	d6682 <__aeabi_dmul+0x24a>
   d666c:	ea81 0103 	eor.w	r1, r1, r3
   d6670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6674:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6678:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d667c:	f04f 0000 	mov.w	r0, #0
   d6680:	bd70      	pop	{r4, r5, r6, pc}
   d6682:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6686:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d668a:	bd70      	pop	{r4, r5, r6, pc}

000d668c <__aeabi_ddiv>:
   d668c:	b570      	push	{r4, r5, r6, lr}
   d668e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6692:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6696:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d669a:	bf1d      	ittte	ne
   d669c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d66a0:	ea94 0f0c 	teqne	r4, ip
   d66a4:	ea95 0f0c 	teqne	r5, ip
   d66a8:	f000 f8a7 	bleq	d67fa <__aeabi_ddiv+0x16e>
   d66ac:	eba4 0405 	sub.w	r4, r4, r5
   d66b0:	ea81 0e03 	eor.w	lr, r1, r3
   d66b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d66b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d66bc:	f000 8088 	beq.w	d67d0 <__aeabi_ddiv+0x144>
   d66c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d66c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d66c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d66cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d66d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d66d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d66d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d66dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d66e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d66e4:	429d      	cmp	r5, r3
   d66e6:	bf08      	it	eq
   d66e8:	4296      	cmpeq	r6, r2
   d66ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d66ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d66f2:	d202      	bcs.n	d66fa <__aeabi_ddiv+0x6e>
   d66f4:	085b      	lsrs	r3, r3, #1
   d66f6:	ea4f 0232 	mov.w	r2, r2, rrx
   d66fa:	1ab6      	subs	r6, r6, r2
   d66fc:	eb65 0503 	sbc.w	r5, r5, r3
   d6700:	085b      	lsrs	r3, r3, #1
   d6702:	ea4f 0232 	mov.w	r2, r2, rrx
   d6706:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d670a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d670e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6712:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6716:	bf22      	ittt	cs
   d6718:	1ab6      	subcs	r6, r6, r2
   d671a:	4675      	movcs	r5, lr
   d671c:	ea40 000c 	orrcs.w	r0, r0, ip
   d6720:	085b      	lsrs	r3, r3, #1
   d6722:	ea4f 0232 	mov.w	r2, r2, rrx
   d6726:	ebb6 0e02 	subs.w	lr, r6, r2
   d672a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d672e:	bf22      	ittt	cs
   d6730:	1ab6      	subcs	r6, r6, r2
   d6732:	4675      	movcs	r5, lr
   d6734:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6738:	085b      	lsrs	r3, r3, #1
   d673a:	ea4f 0232 	mov.w	r2, r2, rrx
   d673e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6742:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6746:	bf22      	ittt	cs
   d6748:	1ab6      	subcs	r6, r6, r2
   d674a:	4675      	movcs	r5, lr
   d674c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6750:	085b      	lsrs	r3, r3, #1
   d6752:	ea4f 0232 	mov.w	r2, r2, rrx
   d6756:	ebb6 0e02 	subs.w	lr, r6, r2
   d675a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d675e:	bf22      	ittt	cs
   d6760:	1ab6      	subcs	r6, r6, r2
   d6762:	4675      	movcs	r5, lr
   d6764:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6768:	ea55 0e06 	orrs.w	lr, r5, r6
   d676c:	d018      	beq.n	d67a0 <__aeabi_ddiv+0x114>
   d676e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6772:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6776:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d677a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d677e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d6782:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d6786:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d678a:	d1c0      	bne.n	d670e <__aeabi_ddiv+0x82>
   d678c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6790:	d10b      	bne.n	d67aa <__aeabi_ddiv+0x11e>
   d6792:	ea41 0100 	orr.w	r1, r1, r0
   d6796:	f04f 0000 	mov.w	r0, #0
   d679a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d679e:	e7b6      	b.n	d670e <__aeabi_ddiv+0x82>
   d67a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d67a4:	bf04      	itt	eq
   d67a6:	4301      	orreq	r1, r0
   d67a8:	2000      	moveq	r0, #0
   d67aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d67ae:	bf88      	it	hi
   d67b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d67b4:	f63f aeaf 	bhi.w	d6516 <__aeabi_dmul+0xde>
   d67b8:	ebb5 0c03 	subs.w	ip, r5, r3
   d67bc:	bf04      	itt	eq
   d67be:	ebb6 0c02 	subseq.w	ip, r6, r2
   d67c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d67c6:	f150 0000 	adcs.w	r0, r0, #0
   d67ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d67ce:	bd70      	pop	{r4, r5, r6, pc}
   d67d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d67d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d67d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d67dc:	bfc2      	ittt	gt
   d67de:	ebd4 050c 	rsbsgt	r5, r4, ip
   d67e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d67e6:	bd70      	popgt	{r4, r5, r6, pc}
   d67e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d67ec:	f04f 0e00 	mov.w	lr, #0
   d67f0:	3c01      	subs	r4, #1
   d67f2:	e690      	b.n	d6516 <__aeabi_dmul+0xde>
   d67f4:	ea45 0e06 	orr.w	lr, r5, r6
   d67f8:	e68d      	b.n	d6516 <__aeabi_dmul+0xde>
   d67fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d67fe:	ea94 0f0c 	teq	r4, ip
   d6802:	bf08      	it	eq
   d6804:	ea95 0f0c 	teqeq	r5, ip
   d6808:	f43f af3b 	beq.w	d6682 <__aeabi_dmul+0x24a>
   d680c:	ea94 0f0c 	teq	r4, ip
   d6810:	d10a      	bne.n	d6828 <__aeabi_ddiv+0x19c>
   d6812:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6816:	f47f af34 	bne.w	d6682 <__aeabi_dmul+0x24a>
   d681a:	ea95 0f0c 	teq	r5, ip
   d681e:	f47f af25 	bne.w	d666c <__aeabi_dmul+0x234>
   d6822:	4610      	mov	r0, r2
   d6824:	4619      	mov	r1, r3
   d6826:	e72c      	b.n	d6682 <__aeabi_dmul+0x24a>
   d6828:	ea95 0f0c 	teq	r5, ip
   d682c:	d106      	bne.n	d683c <__aeabi_ddiv+0x1b0>
   d682e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6832:	f43f aefd 	beq.w	d6630 <__aeabi_dmul+0x1f8>
   d6836:	4610      	mov	r0, r2
   d6838:	4619      	mov	r1, r3
   d683a:	e722      	b.n	d6682 <__aeabi_dmul+0x24a>
   d683c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6840:	bf18      	it	ne
   d6842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6846:	f47f aec5 	bne.w	d65d4 <__aeabi_dmul+0x19c>
   d684a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d684e:	f47f af0d 	bne.w	d666c <__aeabi_dmul+0x234>
   d6852:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6856:	f47f aeeb 	bne.w	d6630 <__aeabi_dmul+0x1f8>
   d685a:	e712      	b.n	d6682 <__aeabi_dmul+0x24a>

000d685c <__gedf2>:
   d685c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d6860:	e006      	b.n	d6870 <__cmpdf2+0x4>
   d6862:	bf00      	nop

000d6864 <__ledf2>:
   d6864:	f04f 0c01 	mov.w	ip, #1
   d6868:	e002      	b.n	d6870 <__cmpdf2+0x4>
   d686a:	bf00      	nop

000d686c <__cmpdf2>:
   d686c:	f04f 0c01 	mov.w	ip, #1
   d6870:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6874:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6878:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d687c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6880:	bf18      	it	ne
   d6882:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d6886:	d01b      	beq.n	d68c0 <__cmpdf2+0x54>
   d6888:	b001      	add	sp, #4
   d688a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d688e:	bf0c      	ite	eq
   d6890:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d6894:	ea91 0f03 	teqne	r1, r3
   d6898:	bf02      	ittt	eq
   d689a:	ea90 0f02 	teqeq	r0, r2
   d689e:	2000      	moveq	r0, #0
   d68a0:	4770      	bxeq	lr
   d68a2:	f110 0f00 	cmn.w	r0, #0
   d68a6:	ea91 0f03 	teq	r1, r3
   d68aa:	bf58      	it	pl
   d68ac:	4299      	cmppl	r1, r3
   d68ae:	bf08      	it	eq
   d68b0:	4290      	cmpeq	r0, r2
   d68b2:	bf2c      	ite	cs
   d68b4:	17d8      	asrcs	r0, r3, #31
   d68b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d68ba:	f040 0001 	orr.w	r0, r0, #1
   d68be:	4770      	bx	lr
   d68c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d68c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d68c8:	d102      	bne.n	d68d0 <__cmpdf2+0x64>
   d68ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d68ce:	d107      	bne.n	d68e0 <__cmpdf2+0x74>
   d68d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d68d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d68d8:	d1d6      	bne.n	d6888 <__cmpdf2+0x1c>
   d68da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d68de:	d0d3      	beq.n	d6888 <__cmpdf2+0x1c>
   d68e0:	f85d 0b04 	ldr.w	r0, [sp], #4
   d68e4:	4770      	bx	lr
   d68e6:	bf00      	nop

000d68e8 <__aeabi_cdrcmple>:
   d68e8:	4684      	mov	ip, r0
   d68ea:	4610      	mov	r0, r2
   d68ec:	4662      	mov	r2, ip
   d68ee:	468c      	mov	ip, r1
   d68f0:	4619      	mov	r1, r3
   d68f2:	4663      	mov	r3, ip
   d68f4:	e000      	b.n	d68f8 <__aeabi_cdcmpeq>
   d68f6:	bf00      	nop

000d68f8 <__aeabi_cdcmpeq>:
   d68f8:	b501      	push	{r0, lr}
   d68fa:	f7ff ffb7 	bl	d686c <__cmpdf2>
   d68fe:	2800      	cmp	r0, #0
   d6900:	bf48      	it	mi
   d6902:	f110 0f00 	cmnmi.w	r0, #0
   d6906:	bd01      	pop	{r0, pc}

000d6908 <__aeabi_dcmpeq>:
   d6908:	f84d ed08 	str.w	lr, [sp, #-8]!
   d690c:	f7ff fff4 	bl	d68f8 <__aeabi_cdcmpeq>
   d6910:	bf0c      	ite	eq
   d6912:	2001      	moveq	r0, #1
   d6914:	2000      	movne	r0, #0
   d6916:	f85d fb08 	ldr.w	pc, [sp], #8
   d691a:	bf00      	nop

000d691c <__aeabi_dcmplt>:
   d691c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6920:	f7ff ffea 	bl	d68f8 <__aeabi_cdcmpeq>
   d6924:	bf34      	ite	cc
   d6926:	2001      	movcc	r0, #1
   d6928:	2000      	movcs	r0, #0
   d692a:	f85d fb08 	ldr.w	pc, [sp], #8
   d692e:	bf00      	nop

000d6930 <__aeabi_dcmple>:
   d6930:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6934:	f7ff ffe0 	bl	d68f8 <__aeabi_cdcmpeq>
   d6938:	bf94      	ite	ls
   d693a:	2001      	movls	r0, #1
   d693c:	2000      	movhi	r0, #0
   d693e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6942:	bf00      	nop

000d6944 <__aeabi_dcmpge>:
   d6944:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6948:	f7ff ffce 	bl	d68e8 <__aeabi_cdrcmple>
   d694c:	bf94      	ite	ls
   d694e:	2001      	movls	r0, #1
   d6950:	2000      	movhi	r0, #0
   d6952:	f85d fb08 	ldr.w	pc, [sp], #8
   d6956:	bf00      	nop

000d6958 <__aeabi_dcmpgt>:
   d6958:	f84d ed08 	str.w	lr, [sp, #-8]!
   d695c:	f7ff ffc4 	bl	d68e8 <__aeabi_cdrcmple>
   d6960:	bf34      	ite	cc
   d6962:	2001      	movcc	r0, #1
   d6964:	2000      	movcs	r0, #0
   d6966:	f85d fb08 	ldr.w	pc, [sp], #8
   d696a:	bf00      	nop

000d696c <__aeabi_dcmpun>:
   d696c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6970:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6974:	d102      	bne.n	d697c <__aeabi_dcmpun+0x10>
   d6976:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d697a:	d10a      	bne.n	d6992 <__aeabi_dcmpun+0x26>
   d697c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6984:	d102      	bne.n	d698c <__aeabi_dcmpun+0x20>
   d6986:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d698a:	d102      	bne.n	d6992 <__aeabi_dcmpun+0x26>
   d698c:	f04f 0000 	mov.w	r0, #0
   d6990:	4770      	bx	lr
   d6992:	f04f 0001 	mov.w	r0, #1
   d6996:	4770      	bx	lr

000d6998 <__aeabi_d2iz>:
   d6998:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d699c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d69a0:	d215      	bcs.n	d69ce <__aeabi_d2iz+0x36>
   d69a2:	d511      	bpl.n	d69c8 <__aeabi_d2iz+0x30>
   d69a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d69a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d69ac:	d912      	bls.n	d69d4 <__aeabi_d2iz+0x3c>
   d69ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d69b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d69b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d69ba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d69be:	fa23 f002 	lsr.w	r0, r3, r2
   d69c2:	bf18      	it	ne
   d69c4:	4240      	negne	r0, r0
   d69c6:	4770      	bx	lr
   d69c8:	f04f 0000 	mov.w	r0, #0
   d69cc:	4770      	bx	lr
   d69ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d69d2:	d105      	bne.n	d69e0 <__aeabi_d2iz+0x48>
   d69d4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d69d8:	bf08      	it	eq
   d69da:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d69de:	4770      	bx	lr
   d69e0:	f04f 0000 	mov.w	r0, #0
   d69e4:	4770      	bx	lr
   d69e6:	bf00      	nop

000d69e8 <__aeabi_d2uiz>:
   d69e8:	004a      	lsls	r2, r1, #1
   d69ea:	d211      	bcs.n	d6a10 <__aeabi_d2uiz+0x28>
   d69ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d69f0:	d211      	bcs.n	d6a16 <__aeabi_d2uiz+0x2e>
   d69f2:	d50d      	bpl.n	d6a10 <__aeabi_d2uiz+0x28>
   d69f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d69f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d69fc:	d40e      	bmi.n	d6a1c <__aeabi_d2uiz+0x34>
   d69fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6a02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d6a06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d6a0a:	fa23 f002 	lsr.w	r0, r3, r2
   d6a0e:	4770      	bx	lr
   d6a10:	f04f 0000 	mov.w	r0, #0
   d6a14:	4770      	bx	lr
   d6a16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6a1a:	d102      	bne.n	d6a22 <__aeabi_d2uiz+0x3a>
   d6a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d6a20:	4770      	bx	lr
   d6a22:	f04f 0000 	mov.w	r0, #0
   d6a26:	4770      	bx	lr

000d6a28 <__aeabi_d2f>:
   d6a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d6a30:	bf24      	itt	cs
   d6a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d6a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d6a3a:	d90d      	bls.n	d6a58 <__aeabi_d2f+0x30>
   d6a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d6a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6a50:	bf08      	it	eq
   d6a52:	f020 0001 	biceq.w	r0, r0, #1
   d6a56:	4770      	bx	lr
   d6a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6a5c:	d121      	bne.n	d6aa2 <__aeabi_d2f+0x7a>
   d6a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6a62:	bfbc      	itt	lt
   d6a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d6a68:	4770      	bxlt	lr
   d6a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6a72:	f1c2 0218 	rsb	r2, r2, #24
   d6a76:	f1c2 0c20 	rsb	ip, r2, #32
   d6a7a:	fa10 f30c 	lsls.w	r3, r0, ip
   d6a7e:	fa20 f002 	lsr.w	r0, r0, r2
   d6a82:	bf18      	it	ne
   d6a84:	f040 0001 	orrne.w	r0, r0, #1
   d6a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6a90:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6a94:	ea40 000c 	orr.w	r0, r0, ip
   d6a98:	fa23 f302 	lsr.w	r3, r3, r2
   d6a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6aa0:	e7cc      	b.n	d6a3c <__aeabi_d2f+0x14>
   d6aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d6aa6:	d107      	bne.n	d6ab8 <__aeabi_d2f+0x90>
   d6aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6aac:	bf1e      	ittt	ne
   d6aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d6ab6:	4770      	bxne	lr
   d6ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6ac4:	4770      	bx	lr
   d6ac6:	bf00      	nop

000d6ac8 <__cxa_atexit>:
   d6ac8:	b510      	push	{r4, lr}
   d6aca:	4c05      	ldr	r4, [pc, #20]	; (d6ae0 <__cxa_atexit+0x18>)
   d6acc:	4613      	mov	r3, r2
   d6ace:	b12c      	cbz	r4, d6adc <__cxa_atexit+0x14>
   d6ad0:	460a      	mov	r2, r1
   d6ad2:	4601      	mov	r1, r0
   d6ad4:	2002      	movs	r0, #2
   d6ad6:	f3af 8000 	nop.w
   d6ada:	bd10      	pop	{r4, pc}
   d6adc:	4620      	mov	r0, r4
   d6ade:	bd10      	pop	{r4, pc}
   d6ae0:	00000000 	.word	0x00000000

000d6ae4 <memcpy>:
   d6ae4:	b510      	push	{r4, lr}
   d6ae6:	1e43      	subs	r3, r0, #1
   d6ae8:	440a      	add	r2, r1
   d6aea:	4291      	cmp	r1, r2
   d6aec:	d004      	beq.n	d6af8 <memcpy+0x14>
   d6aee:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6af2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6af6:	e7f8      	b.n	d6aea <memcpy+0x6>
   d6af8:	bd10      	pop	{r4, pc}

000d6afa <memset>:
   d6afa:	4402      	add	r2, r0
   d6afc:	4603      	mov	r3, r0
   d6afe:	4293      	cmp	r3, r2
   d6b00:	d002      	beq.n	d6b08 <memset+0xe>
   d6b02:	f803 1b01 	strb.w	r1, [r3], #1
   d6b06:	e7fa      	b.n	d6afe <memset+0x4>
   d6b08:	4770      	bx	lr
	...

000d6b0c <srand>:
   d6b0c:	b538      	push	{r3, r4, r5, lr}
   d6b0e:	4b12      	ldr	r3, [pc, #72]	; (d6b58 <srand+0x4c>)
   d6b10:	681c      	ldr	r4, [r3, #0]
   d6b12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6b14:	4605      	mov	r5, r0
   d6b16:	b9d3      	cbnz	r3, d6b4e <srand+0x42>
   d6b18:	2018      	movs	r0, #24
   d6b1a:	f7fe f8b5 	bl	d4c88 <malloc>
   d6b1e:	f243 330e 	movw	r3, #13070	; 0x330e
   d6b22:	63a0      	str	r0, [r4, #56]	; 0x38
   d6b24:	8003      	strh	r3, [r0, #0]
   d6b26:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6b2a:	8043      	strh	r3, [r0, #2]
   d6b2c:	f241 2334 	movw	r3, #4660	; 0x1234
   d6b30:	8083      	strh	r3, [r0, #4]
   d6b32:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6b36:	80c3      	strh	r3, [r0, #6]
   d6b38:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6b3c:	8103      	strh	r3, [r0, #8]
   d6b3e:	2305      	movs	r3, #5
   d6b40:	8143      	strh	r3, [r0, #10]
   d6b42:	230b      	movs	r3, #11
   d6b44:	8183      	strh	r3, [r0, #12]
   d6b46:	2201      	movs	r2, #1
   d6b48:	2300      	movs	r3, #0
   d6b4a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6b4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6b50:	2200      	movs	r2, #0
   d6b52:	611d      	str	r5, [r3, #16]
   d6b54:	615a      	str	r2, [r3, #20]
   d6b56:	bd38      	pop	{r3, r4, r5, pc}
   d6b58:	2003e3f4 	.word	0x2003e3f4

000d6b5c <strdup>:
   d6b5c:	4b02      	ldr	r3, [pc, #8]	; (d6b68 <strdup+0xc>)
   d6b5e:	4601      	mov	r1, r0
   d6b60:	6818      	ldr	r0, [r3, #0]
   d6b62:	f000 b803 	b.w	d6b6c <_strdup_r>
   d6b66:	bf00      	nop
   d6b68:	2003e3f4 	.word	0x2003e3f4

000d6b6c <_strdup_r>:
   d6b6c:	b570      	push	{r4, r5, r6, lr}
   d6b6e:	4606      	mov	r6, r0
   d6b70:	4608      	mov	r0, r1
   d6b72:	460c      	mov	r4, r1
   d6b74:	f000 f80d 	bl	d6b92 <strlen>
   d6b78:	1c45      	adds	r5, r0, #1
   d6b7a:	4629      	mov	r1, r5
   d6b7c:	4630      	mov	r0, r6
   d6b7e:	f7fe f8a3 	bl	d4cc8 <_malloc_r>
   d6b82:	4606      	mov	r6, r0
   d6b84:	b118      	cbz	r0, d6b8e <_strdup_r+0x22>
   d6b86:	462a      	mov	r2, r5
   d6b88:	4621      	mov	r1, r4
   d6b8a:	f7ff ffab 	bl	d6ae4 <memcpy>
   d6b8e:	4630      	mov	r0, r6
   d6b90:	bd70      	pop	{r4, r5, r6, pc}

000d6b92 <strlen>:
   d6b92:	4603      	mov	r3, r0
   d6b94:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6b98:	2a00      	cmp	r2, #0
   d6b9a:	d1fb      	bne.n	d6b94 <strlen+0x2>
   d6b9c:	1a18      	subs	r0, r3, r0
   d6b9e:	3801      	subs	r0, #1
   d6ba0:	4770      	bx	lr

000d6ba2 <link_code_end>:
	...

000d6ba4 <dynalib_user>:
   d6ba4:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6bb4:	0000 0000 3225 322e 0066 7364 6d54 0070     ....%2.2f.dsTmp.
   d6bc4:	6e49 6176 696c 2064 6572 6461 6e69 0067     Invalid reading.
   d6bd4:	7550 6c62 7369 6968 676e 6e20 776f 002e     Publishing now..

000d6be4 <_ZTVN5spark13CellularClassE>:
	...
   d6bec:	4d63 000d 4d59 000d 4d4f 000d 4d05 000d     cM..YM..OM...M..
   d6bfc:	4d43 000d 4d37 000d 4d2b 000d 4d23 000d     CM..7M..+M..#M..
   d6c0c:	4d19 000d 4d0f 000d 56b5 000d               .M...M...V..

000d6c18 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6c20:	4dad 000d 4db3 000d 4ddb 000d 4dbf 000d     .M...M...M...M..
   d6c30:	4daf 000d                                   .M..

000d6c34 <_ZTVN5spark13EthernetClassE>:
	...
   d6c3c:	537b 000d 5371 000d 5367 000d 535d 000d     {S..qS..gS..]S..
   d6c4c:	5351 000d 5345 000d 5339 000d 5331 000d     QS..ES..9S..1S..
   d6c5c:	5327 000d 531d 000d 56b5 000d               'S...S...V..

000d6c68 <_ZTV7TwoWire>:
	...
   d6c70:	5399 000d 53e3 000d 53bb 000d 539b 000d     .S...S...S...S..
   d6c80:	53c3 000d 53cb 000d 53d3 000d 53db 000d     .S...S...S...S..

000d6c90 <_ZTV9IPAddress>:
	...
   d6c98:	5433 000d 5425 000d 5427 000d 6e6c 6600     3T..%T..'T..ln.f
   d6ca8:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
   d6cb8:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
   d6cc8:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
   d6cd8:	2500 0069 6564 6174 6c69 2073 203d 6200     .%i.details = .b
   d6ce8:	7561 0064 6553 6972 6c61 5300 7265 6169     aud.Serial.Seria
   d6cf8:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
   d6d08:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
   d6d18:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
   d6d28:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
   d6d38:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
   d6d48:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
   d6d58:	0072 7061 0070 6f6e 656e 7400 6172 6563     r.app.none.trace
   d6d68:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   d6d78:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

000d6d84 <_ZTVN5spark9MeshClassE>:
	...
   d6d8c:	5577 000d 556d 000d 5563 000d 5559 000d     wU..mU..cU..YU..
   d6d9c:	554d 000d 5541 000d 5535 000d 552d 000d     MU..AU..5U..-U..
   d6dac:	5523 000d 5519 000d 56b5 000d               #U...U...V..

000d6db8 <_ZTVN5spark12NetworkClassE>:
	...
   d6dc0:	564d 000d 5657 000d 5661 000d 566b 000d     MV..WV..aV..kV..
   d6dd0:	5675 000d 5681 000d 568d 000d 5699 000d     uV...V...V...V..
   d6de0:	56a1 000d 56ab 000d 56b5 000d 616e 006e     .V...V...V..nan.
   d6df0:	766f 0066 6e69 0066                         ovf.inf.

000d6df8 <_ZTV8SPIClass>:
	...
   d6e00:	5a11 000d 5a13 000d 005a 2b25 3330 3a64     .Z...Z..Z.%+03d:
   d6e10:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d6e20:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d6e30:	0000 0000                                   ....

000d6e34 <_ZTV11USARTSerial>:
	...
   d6e3c:	5a7d 000d 5aa1 000d 5aad 000d 574d 000d     }Z...Z...Z..MW..
   d6e4c:	5a89 000d 5a95 000d 5a8f 000d 5a9b 000d     .Z...Z...Z...Z..
   d6e5c:	5a7f 000d 5a83 000d                         .Z...Z..

000d6e64 <_ZTV9USBSerial>:
	...
   d6e6c:	5b89 000d 5bcd 000d 5ba7 000d 574d 000d     .[...[...[..MW..
   d6e7c:	5ba1 000d 5b8b 000d 5b93 000d 5bc7 000d     .[...[...[...[..
   d6e8c:	5b9b 000d 5b85 000d                         .[...[..

000d6e94 <__sf_fake_stdin>:
	...

000d6eb4 <__sf_fake_stdout>:
	...

000d6ed4 <__sf_fake_stderr>:
	...
   d6ef4:	0043                                        C.

000d6ef6 <link_const_variable_data_end>:
	...

000d6ef8 <link_constructors_location>:
   d6ef8:	000d422d 	.word	0x000d422d
   d6efc:	000d44e1 	.word	0x000d44e1
   d6f00:	000d44e5 	.word	0x000d44e5
   d6f04:	000d44e9 	.word	0x000d44e9
   d6f08:	000d48d1 	.word	0x000d48d1
   d6f0c:	000d4d6d 	.word	0x000d4d6d
   d6f10:	000d5385 	.word	0x000d5385
   d6f14:	000d5509 	.word	0x000d5509
   d6f18:	000d5601 	.word	0x000d5601
   d6f1c:	000d5739 	.word	0x000d5739
   d6f20:	000d59f5 	.word	0x000d59f5
   d6f24:	000d5a51 	.word	0x000d5a51
   d6f28:	000d5a69 	.word	0x000d5a69
   d6f2c:	000d5de5 	.word	0x000d5de5
   d6f30:	000d5e39 	.word	0x000d5e39
   d6f34:	000d5efd 	.word	0x000d5efd
   d6f38:	000d5f81 	.word	0x000d5f81
   d6f3c:	000d6005 	.word	0x000d6005
