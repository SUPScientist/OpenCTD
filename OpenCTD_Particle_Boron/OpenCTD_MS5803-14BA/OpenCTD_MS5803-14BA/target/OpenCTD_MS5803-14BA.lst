
/Users/pjb/Dropbox/Particle_Projects/OPO_OpenCTDTest/OpenCTD_MS5803-14BA/OpenCTD_MS5803-14BA/target/OpenCTD_MS5803-14BA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023e8  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00016494  2**0
                  CONTENTS
  3 .data         00000068  2003e3d8  000d6400  0000e3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000003b0  2003e440  2003e440  0001e440  2**3
                  ALLOC
  5 .module_info_suffix 00000028  000d6468  000d6468  00016468  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d6490  000d6490  00016490  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   0009543b  00000000  00000000  00016494  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000dfa1  00000000  00000000  000ab8cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00010a60  00000000  00000000  000b9870  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001a38  00000000  00000000  000ca2d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002bd0  00000000  00000000  000cbd08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002fa56  00000000  00000000  000ce8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00021bb9  00000000  00000000  000fe32e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d3501  00000000  00000000  0011fee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000a8e0  00000000  00000000  001f33e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	a8 60 0d 00                                         .`..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fff7 	bl	d6020 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fffc 	bl	d6036 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e3d8 	.word	0x2003e3d8
   d4048:	000d6400 	.word	0x000d6400
   d404c:	2003e440 	.word	0x2003e440
   d4050:	2003e440 	.word	0x2003e440
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f93d 	bl	d52d8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d63f4 	.word	0x000d63f4
   d4080:	000d63b8 	.word	0x000d63b8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b816 	b.w	d40b4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f83f 	bl	d410c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 b8ef 	b.w	d5274 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bbb1 	b.w	d47fc <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bbb7 	b.w	d480c <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bbb5 	b.w	d480c <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <setup>:
double base_altitude = 1655.0; // Altitude of SparkFun's HQ in Boulder, CO. in (m)


SYSTEM_MODE(MANUAL);

void setup() {
   d40b4:	b510      	push	{r4, lr}
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d40b6:	4812      	ldr	r0, [pc, #72]	; (d4100 <setup+0x4c>)
  // Start your preferred I2C object
  Wire.begin();
  //Initialize Serial Monitor
  Serial.begin(9600);
  //Retrieve calibration constants for conversion math.
  sensor.reset();
   d40b8:	4c12      	ldr	r4, [pc, #72]	; (d4104 <setup+0x50>)
   d40ba:	6840      	ldr	r0, [r0, #4]
   d40bc:	2300      	movs	r3, #0
   d40be:	4619      	mov	r1, r3
   d40c0:	461a      	mov	r2, r3
   d40c2:	f000 fb73 	bl	d47ac <network_off>

void setup() {
  Cellular.off();

  // Start your preferred I2C object
  Wire.begin();
   d40c6:	f001 f921 	bl	d530c <_Z19__fetch_global_Wirev>
   d40ca:	f000 fc85 	bl	d49d8 <_ZN7TwoWire5beginEv>
  //Initialize Serial Monitor
  Serial.begin(9600);
   d40ce:	f001 f88d 	bl	d51ec <_Z16_fetch_usbserialv>
   d40d2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40d6:	f001 f87d 	bl	d51d4 <_ZN9USBSerial5beginEl>
  //Retrieve calibration constants for conversion math.
  sensor.reset();
   d40da:	4620      	mov	r0, r4
   d40dc:	f000 f8a3 	bl	d4226 <_ZN6MS58035resetEv>
  sensor.begin();
   d40e0:	4620      	mov	r0, r4
   d40e2:	f000 f87b 	bl	d41dc <_ZN6MS58035beginEv>

  pressure_baseline = sensor.getPressure(ADC_4096);
   d40e6:	2108      	movs	r1, #8
   d40e8:	4620      	mov	r0, r4
   d40ea:	f000 f9db 	bl	d44a4 <_ZN6MS580311getPressureE9precision>
   d40ee:	ee10 0a10 	vmov	r0, s0
   d40f2:	f001 fbff 	bl	d58f4 <__aeabi_f2d>
   d40f6:	4b04      	ldr	r3, [pc, #16]	; (d4108 <setup+0x54>)
   d40f8:	e9c3 0100 	strd	r0, r1, [r3]
   d40fc:	bd10      	pop	{r4, pc}
   d40fe:	bf00      	nop
   d4100:	2003e480 	.word	0x2003e480
   d4104:	2003e44c 	.word	0x2003e44c
   d4108:	2003e478 	.word	0x2003e478

000d410c <loop>:

}

void loop() {
   d410c:	b510      	push	{r4, lr}
  // ADC_1024
  // ADC_2048
  // ADC_4096

  // Read temperature from the sensor in deg C. This operation takes about
  temperature_c = sensor.getTemperature(CELSIUS, ADC_512);
   d410e:	4c14      	ldr	r4, [pc, #80]	; (d4160 <loop+0x54>)
   d4110:	2202      	movs	r2, #2
   d4112:	4620      	mov	r0, r4
   d4114:	2100      	movs	r1, #0
   d4116:	f000 f9a1 	bl	d445c <_ZN6MS580314getTemperatureE17temperature_units9precision>
   d411a:	4b12      	ldr	r3, [pc, #72]	; (d4164 <loop+0x58>)

  // Read temperature from the sensor in deg F. Converting
  // to Fahrenheit is not internal to the sensor.
  // Additional math is done to convert a Celsius reading.
  temperature_f = sensor.getTemperature(FAHRENHEIT, ADC_512);
   d411c:	2202      	movs	r2, #2
   d411e:	4620      	mov	r0, r4
   d4120:	2101      	movs	r1, #1
  // ADC_1024
  // ADC_2048
  // ADC_4096

  // Read temperature from the sensor in deg C. This operation takes about
  temperature_c = sensor.getTemperature(CELSIUS, ADC_512);
   d4122:	ed83 0a00 	vstr	s0, [r3]

  // Read temperature from the sensor in deg F. Converting
  // to Fahrenheit is not internal to the sensor.
  // Additional math is done to convert a Celsius reading.
  temperature_f = sensor.getTemperature(FAHRENHEIT, ADC_512);
   d4126:	f000 f999 	bl	d445c <_ZN6MS580314getTemperatureE17temperature_units9precision>
   d412a:	4b0f      	ldr	r3, [pc, #60]	; (d4168 <loop+0x5c>)

  // Read pressure from the sensor in mbar.
  pressure_abs = sensor.getPressure(ADC_4096);
   d412c:	4620      	mov	r0, r4
   d412e:	2108      	movs	r1, #8
  temperature_c = sensor.getTemperature(CELSIUS, ADC_512);

  // Read temperature from the sensor in deg F. Converting
  // to Fahrenheit is not internal to the sensor.
  // Additional math is done to convert a Celsius reading.
  temperature_f = sensor.getTemperature(FAHRENHEIT, ADC_512);
   d4130:	ed83 0a00 	vstr	s0, [r3]

  // Read pressure from the sensor in mbar.
  pressure_abs = sensor.getPressure(ADC_4096);
   d4134:	f000 f9b6 	bl	d44a4 <_ZN6MS580311getPressureE9precision>
   d4138:	ee10 0a10 	vmov	r0, s0
   d413c:	f001 fbda 	bl	d58f4 <__aeabi_f2d>
   d4140:	4c0a      	ldr	r4, [pc, #40]	; (d416c <loop+0x60>)
   d4142:	e9c4 0100 	strd	r0, r1, [r4]

  Serial.println(pressure_abs); 
   d4146:	f001 f851 	bl	d51ec <_Z16_fetch_usbserialv>
   d414a:	ed94 0b00 	vldr	d0, [r4]
   d414e:	2102      	movs	r1, #2
   d4150:	f000 ff30 	bl	d4fb4 <_ZN5Print7printlnEdi>

  delay(1000);
   d4154:	f44f 707a 	mov.w	r0, #1000	; 0x3e8

}
   d4158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Read pressure from the sensor in mbar.
  pressure_abs = sensor.getPressure(ADC_4096);

  Serial.println(pressure_abs); 

  delay(1000);
   d415c:	f000 bb5e 	b.w	d481c <delay>
   d4160:	2003e44c 	.word	0x2003e44c
   d4164:	2003e444 	.word	0x2003e444
   d4168:	2003e448 	.word	0x2003e448
   d416c:	2003e468 	.word	0x2003e468

000d4170 <_GLOBAL__sub_I_sensor>:

}
   d4170:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4172:	f000 f9df 	bl	d4534 <HAL_Pin_Map>
// default is ADDRESS_HIGH

//  ADDRESS_HIGH = 0x76
//  ADDRESS_LOW  = 0x77

MS5803 sensor(ADDRESS_HIGH);
   d4176:	2176      	movs	r1, #118	; 0x76
   d4178:	4807      	ldr	r0, [pc, #28]	; (d4198 <_GLOBAL__sub_I_sensor+0x28>)
   d417a:	f000 f811 	bl	d41a0 <_ZN6MS5803C1E11ms5803_addr>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d417e:	4b07      	ldr	r3, [pc, #28]	; (d419c <_GLOBAL__sub_I_sensor+0x2c>)
   d4180:	2200      	movs	r2, #0
   d4182:	701a      	strb	r2, [r3, #0]
   d4184:	805a      	strh	r2, [r3, #2]
   d4186:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d418a:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d418c:	2003      	movs	r0, #3

  Serial.println(pressure_abs); 

  delay(1000);

}
   d418e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4192:	f000 bab7 	b.w	d4704 <set_system_mode>
   d4196:	bf00      	nop
   d4198:	2003e44c 	.word	0x2003e44c
   d419c:	2003e470 	.word	0x2003e470

000d41a0 <_ZN6MS5803C1E11ms5803_addr>:

#include "application.h"
#include "MS5803_I2C.h"
#include "math.h"

MS5803::MS5803(ms5803_addr address)
   d41a0:	b538      	push	{r3, r4, r5, lr}
   d41a2:	4604      	mov	r4, r0
   d41a4:	460d      	mov	r5, r1
// Base library type I2C
{
	Wire.begin(); // Arduino Wire library initializer
   d41a6:	f001 f8b1 	bl	d530c <_Z19__fetch_global_Wirev>
   d41aa:	f000 fc15 	bl	d49d8 <_ZN7TwoWire5beginEv>
	_address = address; //set interface used for communication
   d41ae:	7225      	strb	r5, [r4, #8]
}
   d41b0:	4620      	mov	r0, r4
   d41b2:	bd38      	pop	{r3, r4, r5, pc}

000d41b4 <_ZN6MS580311sendCommandEh>:
	return result;

}

void MS5803::sendCommand(uint8_t command)
{	
   d41b4:	b538      	push	{r3, r4, r5, lr}
   d41b6:	4605      	mov	r5, r0
   d41b8:	460c      	mov	r4, r1
	Wire.beginTransmission( _address);
   d41ba:	f001 f8a7 	bl	d530c <_Z19__fetch_global_Wirev>
   d41be:	7a29      	ldrb	r1, [r5, #8]
   d41c0:	f000 fc22 	bl	d4a08 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(command);
   d41c4:	f001 f8a2 	bl	d530c <_Z19__fetch_global_Wirev>
   d41c8:	6803      	ldr	r3, [r0, #0]
   d41ca:	4621      	mov	r1, r4
   d41cc:	689b      	ldr	r3, [r3, #8]
   d41ce:	4798      	blx	r3
	Wire.endTransmission();
   d41d0:	f001 f89c 	bl	d530c <_Z19__fetch_global_Wirev>
	
}
   d41d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void MS5803::sendCommand(uint8_t command)
{	
	Wire.beginTransmission( _address);
	Wire.write(command);
	Wire.endTransmission();
   d41d8:	f000 bc1d 	b.w	d4a16 <_ZN7TwoWire15endTransmissionEv>

000d41dc <_ZN6MS58035beginEv>:
   sensorWait(3);
}

uint8_t MS5803::begin(void)
// Initialize library for subsequent pressure measurements
{  
   d41dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d41de:	4605      	mov	r5, r0
   d41e0:	f100 0608 	add.w	r6, r0, #8
   d41e4:	24a0      	movs	r4, #160	; 0xa0
	uint8_t i;
	for(i = 0; i <= 7; i++)
  {
		sendCommand(CMD_PROM + (i * 2));
   d41e6:	4621      	mov	r1, r4
   d41e8:	4628      	mov	r0, r5
   d41ea:	f7ff ffe3 	bl	d41b4 <_ZN6MS580311sendCommandEh>
		Wire.requestFrom( _address, 2);
   d41ee:	f001 f88d 	bl	d530c <_Z19__fetch_global_Wirev>
   d41f2:	2202      	movs	r2, #2
   d41f4:	7a29      	ldrb	r1, [r5, #8]
   d41f6:	f000 fbfe 	bl	d49f6 <_ZN7TwoWire11requestFromEii>
		uint8_t highByte = Wire.read(); 
   d41fa:	f001 f887 	bl	d530c <_Z19__fetch_global_Wirev>
   d41fe:	6803      	ldr	r3, [r0, #0]
   d4200:	695b      	ldr	r3, [r3, #20]
   d4202:	4798      	blx	r3
   d4204:	4607      	mov	r7, r0
		uint8_t lowByte = Wire.read();
   d4206:	f001 f881 	bl	d530c <_Z19__fetch_global_Wirev>
   d420a:	6803      	ldr	r3, [r0, #0]
   d420c:	695b      	ldr	r3, [r3, #20]
   d420e:	4798      	blx	r3
   d4210:	3402      	adds	r4, #2
		coefficient[i] = (highByte << 8)|lowByte;
   d4212:	b2c0      	uxtb	r0, r0
   d4214:	b2e4      	uxtb	r4, r4
   d4216:	ea40 2007 	orr.w	r0, r0, r7, lsl #8

uint8_t MS5803::begin(void)
// Initialize library for subsequent pressure measurements
{  
	uint8_t i;
	for(i = 0; i <= 7; i++)
   d421a:	2cb0      	cmp	r4, #176	; 0xb0
  {
		sendCommand(CMD_PROM + (i * 2));
		Wire.requestFrom( _address, 2);
		uint8_t highByte = Wire.read(); 
		uint8_t lowByte = Wire.read();
		coefficient[i] = (highByte << 8)|lowByte;
   d421c:	f826 0f02 	strh.w	r0, [r6, #2]!

uint8_t MS5803::begin(void)
// Initialize library for subsequent pressure measurements
{  
	uint8_t i;
	for(i = 0; i <= 7; i++)
   d4220:	d1e1      	bne.n	d41e6 <_ZN6MS58035beginEv+0xa>
	//	Serial.print("= ");
	//	Serial.println(coefficient[i]);
	}

	return 0;
}
   d4222:	2000      	movs	r0, #0
   d4224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4226 <_ZN6MS58035resetEv>:
	_address = address; //set interface used for communication
}

void MS5803::reset(void)
// Reset device I2C
{
   d4226:	b508      	push	{r3, lr}
   sendCommand(CMD_RESET);
   d4228:	211e      	movs	r1, #30
   d422a:	f7ff ffc3 	bl	d41b4 <_ZN6MS580311sendCommandEh>
}

void MS5803::sensorWait(uint8_t time)
// Delay function.  This can be modified to work outside of Arduino based MCU's
{
	delay(time);
   d422e:	2003      	movs	r0, #3
void MS5803::reset(void)
// Reset device I2C
{
   sendCommand(CMD_RESET);
   sensorWait(3);
}
   d4230:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void MS5803::sensorWait(uint8_t time)
// Delay function.  This can be modified to work outside of Arduino based MCU's
{
	delay(time);
   d4234:	f000 baf2 	b.w	d481c <delay>

000d4238 <_ZN6MS580316getADCconversionE11measurement9precision>:
// Select measurement type and precision
{	
	uint32_t result;
	uint8_t highByte = 0, midByte = 0, lowByte = 0;
	
	sendCommand(CMD_ADC_CONV + _measurement + _precision);
   d4238:	f102 0340 	add.w	r3, r2, #64	; 0x40
   d423c:	4419      	add	r1, r3
}

uint32_t MS5803::getADCconversion(measurement _measurement, precision _precision)
// Retrieve ADC measurement from the device.  
// Select measurement type and precision
{	
   d423e:	b570      	push	{r4, r5, r6, lr}
	uint32_t result;
	uint8_t highByte = 0, midByte = 0, lowByte = 0;
	
	sendCommand(CMD_ADC_CONV + _measurement + _precision);
   d4240:	b2c9      	uxtb	r1, r1
}

uint32_t MS5803::getADCconversion(measurement _measurement, precision _precision)
// Retrieve ADC measurement from the device.  
// Select measurement type and precision
{	
   d4242:	4605      	mov	r5, r0
   d4244:	4614      	mov	r4, r2
	uint32_t result;
	uint8_t highByte = 0, midByte = 0, lowByte = 0;
	
	sendCommand(CMD_ADC_CONV + _measurement + _precision);
   d4246:	f7ff ffb5 	bl	d41b4 <_ZN6MS580311sendCommandEh>
}

void MS5803::sensorWait(uint8_t time)
// Delay function.  This can be modified to work outside of Arduino based MCU's
{
	delay(time);
   d424a:	2001      	movs	r0, #1
   d424c:	f000 fae6 	bl	d481c <delay>
	uint8_t highByte = 0, midByte = 0, lowByte = 0;
	
	sendCommand(CMD_ADC_CONV + _measurement + _precision);
	// Wait for conversion to complete
	sensorWait(1); //general delay
	switch( _precision )
   d4250:	2c08      	cmp	r4, #8
   d4252:	d811      	bhi.n	d4278 <_ZN6MS580316getADCconversionE11measurement9precision+0x40>
   d4254:	e8df f004 	tbb	[pc, r4]
   d4258:	10071005 	.word	0x10071005
   d425c:	100b1009 	.word	0x100b1009
   d4260:	0d          	.byte	0x0d
   d4261:	00          	.byte	0x00
}

void MS5803::sensorWait(uint8_t time)
// Delay function.  This can be modified to work outside of Arduino based MCU's
{
	delay(time);
   d4262:	2001      	movs	r0, #1
   d4264:	e006      	b.n	d4274 <_ZN6MS580316getADCconversionE11measurement9precision+0x3c>
   d4266:	2003      	movs	r0, #3
   d4268:	e004      	b.n	d4274 <_ZN6MS580316getADCconversionE11measurement9precision+0x3c>
   d426a:	2004      	movs	r0, #4
   d426c:	e002      	b.n	d4274 <_ZN6MS580316getADCconversionE11measurement9precision+0x3c>
   d426e:	2006      	movs	r0, #6
   d4270:	e000      	b.n	d4274 <_ZN6MS580316getADCconversionE11measurement9precision+0x3c>
   d4272:	200a      	movs	r0, #10
   d4274:	f000 fad2 	bl	d481c <delay>
		case ADC_1024: sensorWait(4); break; 
		case ADC_2048: sensorWait(6); break; 
		case ADC_4096: sensorWait(10); break; 
	}	
	
	sendCommand(CMD_ADC_READ);
   d4278:	2100      	movs	r1, #0
   d427a:	4628      	mov	r0, r5
   d427c:	f7ff ff9a 	bl	d41b4 <_ZN6MS580311sendCommandEh>
	Wire.requestFrom(_address, 3);
   d4280:	f001 f844 	bl	d530c <_Z19__fetch_global_Wirev>
   d4284:	7a29      	ldrb	r1, [r5, #8]
   d4286:	2203      	movs	r2, #3
   d4288:	f000 fbb5 	bl	d49f6 <_ZN7TwoWire11requestFromEii>
uint32_t MS5803::getADCconversion(measurement _measurement, precision _precision)
// Retrieve ADC measurement from the device.  
// Select measurement type and precision
{	
	uint32_t result;
	uint8_t highByte = 0, midByte = 0, lowByte = 0;
   d428c:	2500      	movs	r5, #0
   d428e:	462c      	mov	r4, r5
   d4290:	462e      	mov	r6, r5
	}	
	
	sendCommand(CMD_ADC_READ);
	Wire.requestFrom(_address, 3);
	
	while(Wire.available())    
   d4292:	f001 f83b 	bl	d530c <_Z19__fetch_global_Wirev>
   d4296:	6803      	ldr	r3, [r0, #0]
   d4298:	691b      	ldr	r3, [r3, #16]
   d429a:	4798      	blx	r3
   d429c:	b190      	cbz	r0, d42c4 <_ZN6MS580316getADCconversionE11measurement9precision+0x8c>
	{ 
		highByte = Wire.read();
   d429e:	f001 f835 	bl	d530c <_Z19__fetch_global_Wirev>
   d42a2:	6803      	ldr	r3, [r0, #0]
   d42a4:	695b      	ldr	r3, [r3, #20]
   d42a6:	4798      	blx	r3
   d42a8:	b2c6      	uxtb	r6, r0
		midByte = Wire.read();
   d42aa:	f001 f82f 	bl	d530c <_Z19__fetch_global_Wirev>
   d42ae:	6803      	ldr	r3, [r0, #0]
   d42b0:	695b      	ldr	r3, [r3, #20]
   d42b2:	4798      	blx	r3
   d42b4:	b2c4      	uxtb	r4, r0
		lowByte = Wire.read();	
   d42b6:	f001 f829 	bl	d530c <_Z19__fetch_global_Wirev>
   d42ba:	6803      	ldr	r3, [r0, #0]
   d42bc:	695b      	ldr	r3, [r3, #20]
   d42be:	4798      	blx	r3
   d42c0:	b2c5      	uxtb	r5, r0
	}	
	
	sendCommand(CMD_ADC_READ);
	Wire.requestFrom(_address, 3);
	
	while(Wire.available())    
   d42c2:	e7e6      	b.n	d4292 <_ZN6MS580316getADCconversionE11measurement9precision+0x5a>
		lowByte = Wire.read();	
	}
	
	result = ((uint32_t)highByte << 16) + ((uint32_t)midByte << 8) + lowByte;

	return result;
   d42c4:	0220      	lsls	r0, r4, #8
   d42c6:	eb00 4006 	add.w	r0, r0, r6, lsl #16

}
   d42ca:	4428      	add	r0, r5
   d42cc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d42d0 <_ZN6MS580315getMeasurementsE9precision>:
	return pressure_reported;
}

void MS5803::getMeasurements(precision _precision)

{
   d42d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//Retrieve ADC result
	int32_t temperature_raw = getADCconversion(TEMPERATURE, _precision);
   d42d4:	460a      	mov	r2, r1
	return pressure_reported;
}

void MS5803::getMeasurements(precision _precision)

{
   d42d6:	460e      	mov	r6, r1
   d42d8:	b085      	sub	sp, #20
	//Retrieve ADC result
	int32_t temperature_raw = getADCconversion(TEMPERATURE, _precision);
   d42da:	2110      	movs	r1, #16
	return pressure_reported;
}

void MS5803::getMeasurements(precision _precision)

{
   d42dc:	4604      	mov	r4, r0
	//Retrieve ADC result
	int32_t temperature_raw = getADCconversion(TEMPERATURE, _precision);
   d42de:	f7ff ffab 	bl	d4238 <_ZN6MS580316getADCconversionE11measurement9precision>
	int32_t pressure_raw = getADCconversion(PRESSURE, _precision);
   d42e2:	4632      	mov	r2, r6

void MS5803::getMeasurements(precision _precision)

{
	//Retrieve ADC result
	int32_t temperature_raw = getADCconversion(TEMPERATURE, _precision);
   d42e4:	4605      	mov	r5, r0
	int32_t pressure_raw = getADCconversion(PRESSURE, _precision);
   d42e6:	2100      	movs	r1, #0
   d42e8:	4620      	mov	r0, r4
   d42ea:	f7ff ffa5 	bl	d4238 <_ZN6MS580316getADCconversionE11measurement9precision>
	int32_t pressure_calc;
	
	int32_t dT;
		
	//Now that we have a raw temperature, let's compute our actual.
	dT = temperature_raw - ((int32_t)coefficient[5] << 8);
   d42ee:	8aa3      	ldrh	r3, [r4, #20]
void MS5803::getMeasurements(precision _precision)

{
	//Retrieve ADC result
	int32_t temperature_raw = getADCconversion(TEMPERATURE, _precision);
	int32_t pressure_raw = getADCconversion(PRESSURE, _precision);
   d42f0:	4607      	mov	r7, r0
	
	int32_t dT;
		
	//Now that we have a raw temperature, let's compute our actual.
	dT = temperature_raw - ((int32_t)coefficient[5] << 8);
	temp_calc = (((int64_t)dT * coefficient[6]) >> 23) + 2000;
   d42f2:	8ae0      	ldrh	r0, [r4, #22]
	int32_t pressure_calc;
	
	int32_t dT;
		
	//Now that we have a raw temperature, let's compute our actual.
	dT = temperature_raw - ((int32_t)coefficient[5] << 8);
   d42f4:	eba5 2503 	sub.w	r5, r5, r3, lsl #8
	temp_calc = (((int64_t)dT * coefficient[6]) >> 23) + 2000;
   d42f8:	fb80 0105 	smull	r0, r1, r0, r5
   d42fc:	0dc3      	lsrs	r3, r0, #23
   d42fe:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
   d4302:	f503 66fa 	add.w	r6, r3, #2000	; 0x7d0
	// TODO TESTING  _temperature_actual = temp_calc;
	
	//Now we have our first order Temperature, let's calculate the second order.
	int64_t T2, OFF2, SENS2, OFF, SENS; //working variables

	if (temp_calc < 2000) 
   d4306:	f5b6 6ffa 	cmp.w	r6, #2000	; 0x7d0
   d430a:	fb85 ab05 	smull	sl, fp, r5, r5
   d430e:	fb03 f803 	mul.w	r8, r3, r3
   d4312:	da25      	bge.n	d4360 <_ZN6MS580315getMeasurementsE9precision+0x90>
	// If temp_calc is below 20.0C
	{	
		T2 = 3 * (((int64_t)dT * dT) >> 33);
		OFF2 = 3 * ((temp_calc - 2000) * (temp_calc - 2000)) / 2;
   d4314:	eb08 0248 	add.w	r2, r8, r8, lsl #1
   d4318:	1052      	asrs	r2, r2, #1
   d431a:	4610      	mov	r0, r2
   d431c:	17d1      	asrs	r1, r2, #31
		SENS2 = 5 * ((temp_calc - 2000) * (temp_calc - 2000)) / 8;
		
		if(temp_calc < -1500)
   d431e:	4a4c      	ldr	r2, [pc, #304]	; (d4450 <_ZN6MS580315getMeasurementsE9precision+0x180>)

	if (temp_calc < 2000) 
	// If temp_calc is below 20.0C
	{	
		T2 = 3 * (((int64_t)dT * dT) >> 33);
		OFF2 = 3 * ((temp_calc - 2000) * (temp_calc - 2000)) / 2;
   d4320:	e9cd 0100 	strd	r0, r1, [sp]
		SENS2 = 5 * ((temp_calc - 2000) * (temp_calc - 2000)) / 8;
   d4324:	eb08 0088 	add.w	r0, r8, r8, lsl #2
	int64_t T2, OFF2, SENS2, OFF, SENS; //working variables

	if (temp_calc < 2000) 
	// If temp_calc is below 20.0C
	{	
		T2 = 3 * (((int64_t)dT * dT) >> 33);
   d4328:	ea4f 0e6b 	mov.w	lr, fp, asr #1
		OFF2 = 3 * ((temp_calc - 2000) * (temp_calc - 2000)) / 2;
		SENS2 = 5 * ((temp_calc - 2000) * (temp_calc - 2000)) / 8;
   d432c:	10c0      	asrs	r0, r0, #3
		
		if(temp_calc < -1500)
   d432e:	4296      	cmp	r6, r2
	int64_t T2, OFF2, SENS2, OFF, SENS; //working variables

	if (temp_calc < 2000) 
	// If temp_calc is below 20.0C
	{	
		T2 = 3 * (((int64_t)dT * dT) >> 33);
   d4330:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
		OFF2 = 3 * ((temp_calc - 2000) * (temp_calc - 2000)) / 2;
		SENS2 = 5 * ((temp_calc - 2000) * (temp_calc - 2000)) / 8;
   d4334:	ea4f 71e0 	mov.w	r1, r0, asr #31
		
		if(temp_calc < -1500)
   d4338:	da28      	bge.n	d438c <_ZN6MS580315getMeasurementsE9precision+0xbc>
		// If temp_calc is below -15.0C 
		{
			OFF2 = OFF2 + 7 * ((temp_calc + 1500) * (temp_calc + 1500));
   d433a:	e9dd 8900 	ldrd	r8, r9, [sp]
   d433e:	f603 53ac 	addw	r3, r3, #3500	; 0xdac
   d4342:	435b      	muls	r3, r3
   d4344:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
   d4348:	eb18 0802 	adds.w	r8, r8, r2
			SENS2 = SENS2 + 4 * ((temp_calc + 1500) * (temp_calc + 1500));
   d434c:	ea4f 0383 	mov.w	r3, r3, lsl #2
		SENS2 = 5 * ((temp_calc - 2000) * (temp_calc - 2000)) / 8;
		
		if(temp_calc < -1500)
		// If temp_calc is below -15.0C 
		{
			OFF2 = OFF2 + 7 * ((temp_calc + 1500) * (temp_calc + 1500));
   d4350:	eb49 79e2 	adc.w	r9, r9, r2, asr #31
			SENS2 = SENS2 + 4 * ((temp_calc + 1500) * (temp_calc + 1500));
   d4354:	18c0      	adds	r0, r0, r3
		SENS2 = 5 * ((temp_calc - 2000) * (temp_calc - 2000)) / 8;
		
		if(temp_calc < -1500)
		// If temp_calc is below -15.0C 
		{
			OFF2 = OFF2 + 7 * ((temp_calc + 1500) * (temp_calc + 1500));
   d4356:	e9cd 8900 	strd	r8, r9, [sp]
			SENS2 = SENS2 + 4 * ((temp_calc + 1500) * (temp_calc + 1500));
   d435a:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   d435e:	e015      	b.n	d438c <_ZN6MS580315getMeasurementsE9precision+0xbc>
		}
    } 
	else
	// If temp_calc is above 20.0C
	{ 
		T2 = 7 * ((uint64_t)dT * dT)/pow(2,37);
   d4360:	2307      	movs	r3, #7
   d4362:	fbaa 0103 	umull	r0, r1, sl, r3
   d4366:	fb03 110b 	mla	r1, r3, fp, r1
   d436a:	f001 fae1 	bl	d5930 <__aeabi_ul2d>
   d436e:	2200      	movs	r2, #0
   d4370:	4b38      	ldr	r3, [pc, #224]	; (d4454 <_ZN6MS580315getMeasurementsE9precision+0x184>)
   d4372:	f001 fb13 	bl	d599c <__aeabi_dmul>
		OFF2 = ((temp_calc - 2000) * (temp_calc - 2000)) / 16;
   d4376:	ea4f 1828 	mov.w	r8, r8, asr #4
		}
    } 
	else
	// If temp_calc is above 20.0C
	{ 
		T2 = 7 * ((uint64_t)dT * dT)/pow(2,37);
   d437a:	f001 fe07 	bl	d5f8c <__aeabi_d2lz>
		OFF2 = ((temp_calc - 2000) * (temp_calc - 2000)) / 16;
   d437e:	4642      	mov	r2, r8
   d4380:	17d3      	asrs	r3, r2, #31
   d4382:	e9cd 2300 	strd	r2, r3, [sp]
		}
    } 
	else
	// If temp_calc is above 20.0C
	{ 
		T2 = 7 * ((uint64_t)dT * dT)/pow(2,37);
   d4386:	4686      	mov	lr, r0
		OFF2 = ((temp_calc - 2000) * (temp_calc - 2000)) / 16;
		SENS2 = 0;
   d4388:	2100      	movs	r1, #0
   d438a:	2000      	movs	r0, #0
	}
	
	// Now bring it all together to apply offsets 
	
	OFF = ((int64_t)coefficient[2] << 16) + (((coefficient[4] * (int64_t)dT)) >> 7);
   d438c:	f8b4 8012 	ldrh.w	r8, [r4, #18]
   d4390:	89e2      	ldrh	r2, [r4, #14]
   d4392:	fb88 8905 	smull	r8, r9, r8, r5
   d4396:	ea4f 4a02 	mov.w	sl, r2, lsl #16
   d439a:	ea4f 12d8 	mov.w	r2, r8, lsr #7
   d439e:	ea42 6249 	orr.w	r2, r2, r9, lsl #25
   d43a2:	eb1a 0802 	adds.w	r8, sl, r2
   d43a6:	f04f 0b00 	mov.w	fp, #0
   d43aa:	ea4f 13e9 	mov.w	r3, r9, asr #7
   d43ae:	eb4b 0903 	adc.w	r9, fp, r3
   d43b2:	e9cd 8902 	strd	r8, r9, [sp, #8]
	SENS = ((int64_t)coefficient[1] << 15) + (((coefficient[3] * (int64_t)dT)) >> 8);
   d43b6:	f8b4 8010 	ldrh.w	r8, [r4, #16]
   d43ba:	89a2      	ldrh	r2, [r4, #12]
   d43bc:	fb88 8905 	smull	r8, r9, r8, r5
   d43c0:	ea4f 3ac2 	mov.w	sl, r2, lsl #15
   d43c4:	ea4f 2218 	mov.w	r2, r8, lsr #8
   d43c8:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
   d43cc:	eb12 020a 	adds.w	r2, r2, sl
   d43d0:	f04f 0b00 	mov.w	fp, #0
   d43d4:	ea4f 2329 	mov.w	r3, r9, asr #8
   d43d8:	eb43 030b 	adc.w	r3, r3, fp
	

	pressure_calc = (((SENS * pressure_raw) / 2097152 ) - OFF) / 32768;
	
	_temperature_actual = temp_calc ;
	_pressure_actual = pressure_calc ; // 10;// pressure_calc;
   d43dc:	1a12      	subs	r2, r2, r0
   d43de:	eb63 0301 	sbc.w	r3, r3, r1
   d43e2:	17f9      	asrs	r1, r7, #31
   d43e4:	4351      	muls	r1, r2
   d43e6:	fb07 1103 	mla	r1, r7, r3, r1
   d43ea:	fba2 2307 	umull	r2, r3, r2, r7
   d43ee:	440b      	add	r3, r1
   d43f0:	2a00      	cmp	r2, #0
	// Now lets calculate the pressure
	

	pressure_calc = (((SENS * pressure_raw) / 2097152 ) - OFF) / 32768;
	
	_temperature_actual = temp_calc ;
   d43f2:	ebce 0606 	rsb	r6, lr, r6
	_pressure_actual = pressure_calc ; // 10;// pressure_calc;
   d43f6:	f173 0100 	sbcs.w	r1, r3, #0
	// Now lets calculate the pressure
	

	pressure_calc = (((SENS * pressure_raw) / 2097152 ) - OFF) / 32768;
	
	_temperature_actual = temp_calc ;
   d43fa:	6026      	str	r6, [r4, #0]
	_pressure_actual = pressure_calc ; // 10;// pressure_calc;
   d43fc:	da03      	bge.n	d4406 <_ZN6MS580315getMeasurementsE9precision+0x136>
   d43fe:	4816      	ldr	r0, [pc, #88]	; (d4458 <_ZN6MS580315getMeasurementsE9precision+0x188>)
   d4400:	2100      	movs	r1, #0
   d4402:	1812      	adds	r2, r2, r0
   d4404:	414b      	adcs	r3, r1
   d4406:	0d50      	lsrs	r0, r2, #21
   d4408:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
   d440c:	1559      	asrs	r1, r3, #21
   d440e:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   d4412:	e9dd 2300 	ldrd	r2, r3, [sp]
   d4416:	ebba 0a02 	subs.w	sl, sl, r2
   d441a:	eb6b 0b03 	sbc.w	fp, fp, r3
   d441e:	ebb0 0a0a 	subs.w	sl, r0, sl
   d4422:	eb61 0b0b 	sbc.w	fp, r1, fp
   d4426:	f1ba 0f00 	cmp.w	sl, #0
   d442a:	f17b 0300 	sbcs.w	r3, fp, #0
   d442e:	da06      	bge.n	d443e <_ZN6MS580315getMeasurementsE9precision+0x16e>
   d4430:	f647 72ff 	movw	r2, #32767	; 0x7fff
   d4434:	2300      	movs	r3, #0
   d4436:	eb1a 0a02 	adds.w	sl, sl, r2
   d443a:	eb4b 0b03 	adc.w	fp, fp, r3
   d443e:	ea4f 33da 	mov.w	r3, sl, lsr #15
   d4442:	ea43 434b 	orr.w	r3, r3, fp, lsl #17
   d4446:	6063      	str	r3, [r4, #4]
	

}
   d4448:	b005      	add	sp, #20
   d444a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d444e:	bf00      	nop
   d4450:	fffffa24 	.word	0xfffffa24
   d4454:	3da00000 	.word	0x3da00000
   d4458:	001fffff 	.word	0x001fffff

000d445c <_ZN6MS580314getTemperatureE17temperature_units9precision>:
	return 0;
}
	
float MS5803::getTemperature(temperature_units units, precision _precision)
// Return a temperature reading in either F or C.
{
   d445c:	b538      	push	{r3, r4, r5, lr}
   d445e:	4604      	mov	r4, r0
   d4460:	460d      	mov	r5, r1
	getMeasurements(_precision);
   d4462:	4611      	mov	r1, r2
   d4464:	f7ff ff34 	bl	d42d0 <_ZN6MS580315getMeasurementsE9precision>
   d4468:	edd4 7a00 	vldr	s15, [r4]
   d446c:	eddf 6a0b 	vldr	s13, [pc, #44]	; d449c <_ZN6MS580314getTemperatureE17temperature_units9precision+0x40>
	float temperature_reported;
	// If Fahrenheit is selected return the temperature converted to F
	if(units == FAHRENHEIT)
  {
		temperature_reported = _temperature_actual / 100.0f;
		temperature_reported = (((temperature_reported) * 9) / 5) + 32;
   d4470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
// Return a temperature reading in either F or C.
{
	getMeasurements(_precision);
	float temperature_reported;
	// If Fahrenheit is selected return the temperature converted to F
	if(units == FAHRENHEIT)
   d4474:	2d01      	cmp	r5, #1
  {
		temperature_reported = _temperature_actual / 100.0f;
		temperature_reported = (((temperature_reported) * 9) / 5) + 32;
   d4476:	bf01      	itttt	eq
   d4478:	ee87 7aa6 	vdiveq.f32	s14, s15, s13
   d447c:	eef2 7a02 	vmoveq.f32	s15, #34	; 0x41100000  9.0
   d4480:	ee27 7a27 	vmuleq.f32	s14, s14, s15
   d4484:	eef1 6a04 	vmoveq.f32	s13, #20	; 0x40a00000  5.0
   d4488:	bf03      	ittte	eq
   d448a:	eec7 7a26 	vdiveq.f32	s15, s14, s13
   d448e:	ed9f 0a04 	vldreq	s0, [pc, #16]	; d44a0 <_ZN6MS580314getTemperatureE17temperature_units9precision+0x44>
   d4492:	ee37 0a80 	vaddeq.f32	s0, s15, s0
	}
		
	// If Celsius is selected return the temperature converted to C	
	else
  {
		temperature_reported = _temperature_actual / 100.0f;
   d4496:	ee87 0aa6 	vdivne.f32	s0, s15, s13
		return temperature_reported;
	}
}
   d449a:	bd38      	pop	{r3, r4, r5, pc}
   d449c:	42c80000 	.word	0x42c80000
   d44a0:	42000000 	.word	0x42000000

000d44a4 <_ZN6MS580311getPressureE9precision>:

float MS5803::getPressure(precision _precision)
// Return a pressure reading units Pa.
{
   d44a4:	b510      	push	{r4, lr}
   d44a6:	4604      	mov	r4, r0
	getMeasurements(_precision);
   d44a8:	f7ff ff12 	bl	d42d0 <_ZN6MS580315getMeasurementsE9precision>
	float pressure_reported;
	pressure_reported = _pressure_actual;
   d44ac:	ed94 0a01 	vldr	s0, [r4, #4]
   d44b0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	pressure_reported = pressure_reported / 10.0f;
	return pressure_reported;
}
   d44b4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   d44b8:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d44bc:	bd10      	pop	{r4, pc}

000d44be <_GLOBAL__sub_I__ZN6MS5803C2E11ms5803_addr>:
   d44be:	f000 b839 	b.w	d4534 <HAL_Pin_Map>
	...

000d44c4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <os_thread_is_current+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	689b      	ldr	r3, [r3, #8]
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	00030248 	.word	0x00030248

000d44d4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <os_thread_join+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	691b      	ldr	r3, [r3, #16]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	00030248 	.word	0x00030248

000d44e4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <os_thread_cleanup+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	695b      	ldr	r3, [r3, #20]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	00030248 	.word	0x00030248

000d44f4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <os_mutex_create+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	00030248 	.word	0x00030248

000d4504 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <os_mutex_recursive_create+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	00030248 	.word	0x00030248

000d4514 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <HAL_RNG_GetRandomNumber+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	685b      	ldr	r3, [r3, #4]
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	00030218 	.word	0x00030218

000d4524 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	695b      	ldr	r3, [r3, #20]
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	00030218 	.word	0x00030218

000d4534 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <HAL_Pin_Map+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	681b      	ldr	r3, [r3, #0]
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	0003022c 	.word	0x0003022c

000d4544 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <HAL_I2C_Begin+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	68db      	ldr	r3, [r3, #12]
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	00030228 	.word	0x00030228

000d4554 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <HAL_I2C_Request_Data+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	695b      	ldr	r3, [r3, #20]
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	00030228 	.word	0x00030228

000d4564 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <HAL_I2C_Begin_Transmission+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	699b      	ldr	r3, [r3, #24]
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	00030228 	.word	0x00030228

000d4574 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <HAL_I2C_End_Transmission+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	69db      	ldr	r3, [r3, #28]
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	00030228 	.word	0x00030228

000d4584 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <HAL_I2C_Write_Data+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	6a1b      	ldr	r3, [r3, #32]
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	00030228 	.word	0x00030228

000d4594 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <HAL_I2C_Available_Data+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	00030228 	.word	0x00030228

000d45a4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <HAL_I2C_Read_Data+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	00030228 	.word	0x00030228

000d45b4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <HAL_I2C_Peek_Data+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	00030228 	.word	0x00030228

000d45c4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <HAL_I2C_Flush_Data+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	00030228 	.word	0x00030228

000d45d4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <HAL_I2C_Init+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	00030228 	.word	0x00030228

000d45e4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <inet_inet_ntop+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	695b      	ldr	r3, [r3, #20]
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	00030264 	.word	0x00030264

000d45f4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <netdb_freeaddrinfo+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	689b      	ldr	r3, [r3, #8]
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	00030268 	.word	0x00030268

000d4604 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <netdb_getaddrinfo+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	68db      	ldr	r3, [r3, #12]
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	00030268 	.word	0x00030268

000d4614 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <HAL_SPI_Init+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	69db      	ldr	r3, [r3, #28]
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	00030230 	.word	0x00030230

000d4624 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <HAL_USART_Init+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	681b      	ldr	r3, [r3, #0]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	0003023c 	.word	0x0003023c

000d4634 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <HAL_USART_Write_Data+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	68db      	ldr	r3, [r3, #12]
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	0003023c 	.word	0x0003023c

000d4644 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <HAL_USART_Available_Data+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	691b      	ldr	r3, [r3, #16]
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	0003023c 	.word	0x0003023c

000d4654 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <HAL_USART_Read_Data+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	695b      	ldr	r3, [r3, #20]
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	0003023c 	.word	0x0003023c

000d4664 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <HAL_USART_Peek_Data+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	699b      	ldr	r3, [r3, #24]
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	0003023c 	.word	0x0003023c

000d4674 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <HAL_USART_Flush_Data+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	69db      	ldr	r3, [r3, #28]
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	0003023c 	.word	0x0003023c

000d4684 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <HAL_USART_Available_Data_For_Write+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	0003023c 	.word	0x0003023c

000d4694 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <HAL_USB_USART_Init+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	681b      	ldr	r3, [r3, #0]
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	0003024c 	.word	0x0003024c

000d46a4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <HAL_USB_USART_Begin+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	685b      	ldr	r3, [r3, #4]
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	0003024c 	.word	0x0003024c

000d46b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <HAL_USB_USART_Available_Data+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	691b      	ldr	r3, [r3, #16]
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	0003024c 	.word	0x0003024c

000d46c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	695b      	ldr	r3, [r3, #20]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	0003024c 	.word	0x0003024c

000d46d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <HAL_USB_USART_Receive_Data+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	699b      	ldr	r3, [r3, #24]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	0003024c 	.word	0x0003024c

000d46e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <HAL_USB_USART_Send_Data+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	69db      	ldr	r3, [r3, #28]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	0003024c 	.word	0x0003024c

000d46f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <HAL_USB_USART_Flush_Data+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	6a1b      	ldr	r3, [r3, #32]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	0003024c 	.word	0x0003024c

000d4704 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <set_system_mode+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	685b      	ldr	r3, [r3, #4]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	00030220 	.word	0x00030220

000d4714 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <system_delay_ms+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	695b      	ldr	r3, [r3, #20]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	00030220 	.word	0x00030220

000d4724 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b03      	ldr	r3, [pc, #12]	; (d4734 <system_ctrl_set_app_request_handler+0x10>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d472e:	9301      	str	r3, [sp, #4]
   d4730:	bd08      	pop	{r3, pc}
   d4732:	0000      	.short	0x0000
   d4734:	00030220 	.word	0x00030220

000d4738 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b03      	ldr	r3, [pc, #12]	; (d4748 <system_ctrl_set_result+0x10>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4742:	9301      	str	r3, [sp, #4]
   d4744:	bd08      	pop	{r3, pc}
   d4746:	0000      	.short	0x0000
   d4748:	00030220 	.word	0x00030220

000d474c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d474c:	b508      	push	{r3, lr}
   d474e:	4b02      	ldr	r3, [pc, #8]	; (d4758 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4754:	9301      	str	r3, [sp, #4]
   d4756:	bd08      	pop	{r3, pc}
   d4758:	00030244 	.word	0x00030244

000d475c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b02      	ldr	r3, [pc, #8]	; (d4768 <network_connect+0xc>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	685b      	ldr	r3, [r3, #4]
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	bd08      	pop	{r3, pc}
   d4768:	00030240 	.word	0x00030240

000d476c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d476c:	b508      	push	{r3, lr}
   d476e:	4b02      	ldr	r3, [pc, #8]	; (d4778 <network_connecting+0xc>)
   d4770:	681b      	ldr	r3, [r3, #0]
   d4772:	689b      	ldr	r3, [r3, #8]
   d4774:	9301      	str	r3, [sp, #4]
   d4776:	bd08      	pop	{r3, pc}
   d4778:	00030240 	.word	0x00030240

000d477c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d477c:	b508      	push	{r3, lr}
   d477e:	4b02      	ldr	r3, [pc, #8]	; (d4788 <network_disconnect+0xc>)
   d4780:	681b      	ldr	r3, [r3, #0]
   d4782:	68db      	ldr	r3, [r3, #12]
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	bd08      	pop	{r3, pc}
   d4788:	00030240 	.word	0x00030240

000d478c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <network_ready+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	691b      	ldr	r3, [r3, #16]
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	00030240 	.word	0x00030240

000d479c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <network_on+0xc>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	695b      	ldr	r3, [r3, #20]
   d47a4:	9301      	str	r3, [sp, #4]
   d47a6:	bd08      	pop	{r3, pc}
   d47a8:	00030240 	.word	0x00030240

000d47ac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <network_off+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	699b      	ldr	r3, [r3, #24]
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	00030240 	.word	0x00030240

000d47bc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <network_listen+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	69db      	ldr	r3, [r3, #28]
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	00030240 	.word	0x00030240

000d47cc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <network_listening+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	6a1b      	ldr	r3, [r3, #32]
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	00030240 	.word	0x00030240

000d47dc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <network_set_listen_timeout+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	00030240 	.word	0x00030240

000d47ec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <network_get_listen_timeout+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	00030240 	.word	0x00030240

000d47fc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <malloc+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	681b      	ldr	r3, [r3, #0]
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	0003021c 	.word	0x0003021c

000d480c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b02      	ldr	r3, [pc, #8]	; (d4818 <free+0xc>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	685b      	ldr	r3, [r3, #4]
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	bd08      	pop	{r3, pc}
   d4818:	0003021c 	.word	0x0003021c

000d481c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d481c:	2100      	movs	r1, #0
   d481e:	f7ff bf79 	b.w	d4714 <system_delay_ms>

000d4822 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d4822:	2200      	movs	r2, #0
   d4824:	4611      	mov	r1, r2
   d4826:	6840      	ldr	r0, [r0, #4]
   d4828:	f7ff bfb0 	b.w	d478c <network_ready>

000d482c <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d482c:	2200      	movs	r2, #0
   d482e:	4611      	mov	r1, r2
   d4830:	6840      	ldr	r0, [r0, #4]
   d4832:	f7ff bfcb 	b.w	d47cc <network_listening>

000d4836 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4836:	2200      	movs	r2, #0
   d4838:	4611      	mov	r1, r2
   d483a:	6840      	ldr	r0, [r0, #4]
   d483c:	f7ff bfd6 	b.w	d47ec <network_get_listen_timeout>

000d4840 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4840:	2200      	movs	r2, #0
   d4842:	6840      	ldr	r0, [r0, #4]
   d4844:	f7ff bfca 	b.w	d47dc <network_set_listen_timeout>

000d4848 <_ZN5spark13CellularClass6listenEb>:
    void clearCredentials() {
        cellular_credentials_clear(nullptr);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4848:	2200      	movs	r2, #0
   d484a:	f081 0101 	eor.w	r1, r1, #1
   d484e:	6840      	ldr	r0, [r0, #4]
   d4850:	f7ff bfb4 	b.w	d47bc <network_listen>

000d4854 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d4854:	2300      	movs	r3, #0
   d4856:	461a      	mov	r2, r3
   d4858:	4619      	mov	r1, r3
   d485a:	6840      	ldr	r0, [r0, #4]
   d485c:	f7ff bfa6 	b.w	d47ac <network_off>

000d4860 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d4860:	2300      	movs	r3, #0
   d4862:	461a      	mov	r2, r3
   d4864:	4619      	mov	r1, r3
   d4866:	6840      	ldr	r0, [r0, #4]
   d4868:	f7ff bf98 	b.w	d479c <network_on>

000d486c <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d486c:	2200      	movs	r2, #0
   d486e:	4611      	mov	r1, r2
   d4870:	6840      	ldr	r0, [r0, #4]
   d4872:	f7ff bf7b 	b.w	d476c <network_connecting>

000d4876 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4876:	2200      	movs	r2, #0
   d4878:	2102      	movs	r1, #2
   d487a:	6840      	ldr	r0, [r0, #4]
   d487c:	f7ff bf7e 	b.w	d477c <network_disconnect>

000d4880 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4880:	2300      	movs	r3, #0
   d4882:	461a      	mov	r2, r3
   d4884:	6840      	ldr	r0, [r0, #4]
   d4886:	f7ff bf69 	b.w	d475c <network_connect>
	...

000d488c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d488c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d488e:	4d0c      	ldr	r5, [pc, #48]	; (d48c0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
   d4890:	2428      	movs	r4, #40	; 0x28
   d4892:	4622      	mov	r2, r4
   d4894:	2100      	movs	r1, #0
   d4896:	4628      	mov	r0, r5
   d4898:	f001 fbcd 	bl	d6036 <memset>
        cid = -1;
   d489c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d48a0:	606b      	str	r3, [r5, #4]
        size = sizeof(*this);
   d48a2:	802c      	strh	r4, [r5, #0]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d48a4:	4d07      	ldr	r5, [pc, #28]	; (d48c4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
   d48a6:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d48a8:	4628      	mov	r0, r5
   d48aa:	606b      	str	r3, [r5, #4]
   d48ac:	4b06      	ldr	r3, [pc, #24]	; (d48c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
   d48ae:	f840 3b08 	str.w	r3, [r0], #8
    char iccid[21];
    char imei[16];

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
   d48b2:	4622      	mov	r2, r4
   d48b4:	2100      	movs	r1, #0
   d48b6:	f001 fbbe 	bl	d6036 <memset>
        size = sizeof(*this);
   d48ba:	812c      	strh	r4, [r5, #8]
   d48bc:	bd38      	pop	{r3, r4, r5, pc}
   d48be:	bf00      	nop
   d48c0:	2003e4b0 	.word	0x2003e4b0
   d48c4:	2003e480 	.word	0x2003e480
   d48c8:	000d60c4 	.word	0x000d60c4

000d48cc <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d48cc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d48ce:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d48d0:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d48d2:	b113      	cbz	r3, d48da <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d48d4:	2203      	movs	r2, #3
   d48d6:	4601      	mov	r1, r0
   d48d8:	4798      	blx	r3
    }
   d48da:	4620      	mov	r0, r4
   d48dc:	bd10      	pop	{r4, pc}

000d48de <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d48de:	2200      	movs	r2, #0
   d48e0:	4611      	mov	r1, r2
   d48e2:	6840      	ldr	r0, [r0, #4]
   d48e4:	f7ff bf72 	b.w	d47cc <network_listening>

000d48e8 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d48e8:	2200      	movs	r2, #0
   d48ea:	4611      	mov	r1, r2
   d48ec:	6840      	ldr	r0, [r0, #4]
   d48ee:	f7ff bf7d 	b.w	d47ec <network_get_listen_timeout>

000d48f2 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d48f2:	2200      	movs	r2, #0
   d48f4:	6840      	ldr	r0, [r0, #4]
   d48f6:	f7ff bf71 	b.w	d47dc <network_set_listen_timeout>

000d48fa <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d48fa:	2200      	movs	r2, #0
   d48fc:	f081 0101 	eor.w	r1, r1, #1
   d4900:	6840      	ldr	r0, [r0, #4]
   d4902:	f7ff bf5b 	b.w	d47bc <network_listen>

000d4906 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4906:	2300      	movs	r3, #0
   d4908:	461a      	mov	r2, r3
   d490a:	4619      	mov	r1, r3
   d490c:	6840      	ldr	r0, [r0, #4]
   d490e:	f7ff bf4d 	b.w	d47ac <network_off>

000d4912 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4912:	2300      	movs	r3, #0
   d4914:	461a      	mov	r2, r3
   d4916:	4619      	mov	r1, r3
   d4918:	6840      	ldr	r0, [r0, #4]
   d491a:	f7ff bf3f 	b.w	d479c <network_on>

000d491e <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d491e:	2200      	movs	r2, #0
   d4920:	4611      	mov	r1, r2
   d4922:	6840      	ldr	r0, [r0, #4]
   d4924:	f7ff bf32 	b.w	d478c <network_ready>

000d4928 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4928:	2200      	movs	r2, #0
   d492a:	4611      	mov	r1, r2
   d492c:	6840      	ldr	r0, [r0, #4]
   d492e:	f7ff bf1d 	b.w	d476c <network_connecting>

000d4932 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4932:	2200      	movs	r2, #0
   d4934:	2102      	movs	r1, #2
   d4936:	6840      	ldr	r0, [r0, #4]
   d4938:	f7ff bf20 	b.w	d477c <network_disconnect>

000d493c <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d493c:	2300      	movs	r3, #0
   d493e:	461a      	mov	r2, r3
   d4940:	6840      	ldr	r0, [r0, #4]
   d4942:	f7ff bf0b 	b.w	d475c <network_connect>
	...

000d4948 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d4948:	4b02      	ldr	r3, [pc, #8]	; (d4954 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d494a:	2203      	movs	r2, #3
   d494c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d494e:	4a02      	ldr	r2, [pc, #8]	; (d4958 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4950:	601a      	str	r2, [r3, #0]
   d4952:	4770      	bx	lr
   d4954:	2003e4d8 	.word	0x2003e4d8
   d4958:	000d60f8 	.word	0x000d60f8

000d495c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d495c:	4770      	bx	lr

000d495e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d495e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4960:	4606      	mov	r6, r0
   d4962:	4615      	mov	r5, r2
   d4964:	460c      	mov	r4, r1
   d4966:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4968:	42bc      	cmp	r4, r7
   d496a:	d006      	beq.n	d497a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d496c:	6833      	ldr	r3, [r6, #0]
   d496e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4972:	689b      	ldr	r3, [r3, #8]
   d4974:	4630      	mov	r0, r6
   d4976:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4978:	e7f6      	b.n	d4968 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d497a:	4628      	mov	r0, r5
   d497c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d497e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d497e:	2200      	movs	r2, #0
   d4980:	7c00      	ldrb	r0, [r0, #16]
   d4982:	f7ff bdff 	b.w	d4584 <HAL_I2C_Write_Data>

000d4986 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d4986:	2100      	movs	r1, #0
   d4988:	7c00      	ldrb	r0, [r0, #16]
   d498a:	f7ff be03 	b.w	d4594 <HAL_I2C_Available_Data>

000d498e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d498e:	2100      	movs	r1, #0
   d4990:	7c00      	ldrb	r0, [r0, #16]
   d4992:	f7ff be07 	b.w	d45a4 <HAL_I2C_Read_Data>

000d4996 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d4996:	2100      	movs	r1, #0
   d4998:	7c00      	ldrb	r0, [r0, #16]
   d499a:	f7ff be0b 	b.w	d45b4 <HAL_I2C_Peek_Data>

000d499e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d499e:	2100      	movs	r1, #0
   d49a0:	7c00      	ldrb	r0, [r0, #16]
   d49a2:	f7ff be0f 	b.w	d45c4 <HAL_I2C_Flush_Data>

000d49a6 <_ZN7TwoWireD0Ev>:
   d49a6:	b510      	push	{r4, lr}
   d49a8:	4604      	mov	r4, r0
   d49aa:	f7ff fb76 	bl	d409a <_ZdlPv>
   d49ae:	4620      	mov	r0, r4
   d49b0:	bd10      	pop	{r4, pc}
	...

000d49b4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d49b4:	b510      	push	{r4, lr}
   d49b6:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d49b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d49bc:	4608      	mov	r0, r1
   d49be:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d49c0:	2100      	movs	r1, #0
   d49c2:	4b04      	ldr	r3, [pc, #16]	; (d49d4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d49c4:	7420      	strb	r0, [r4, #16]
   d49c6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d49c8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d49ca:	f7ff fe03 	bl	d45d4 <HAL_I2C_Init>

}
   d49ce:	4620      	mov	r0, r4
   d49d0:	bd10      	pop	{r4, pc}
   d49d2:	bf00      	nop
   d49d4:	000d612c 	.word	0x000d612c

000d49d8 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d49d8:	2300      	movs	r3, #0
   d49da:	461a      	mov	r2, r3
   d49dc:	4619      	mov	r1, r3
   d49de:	7c00      	ldrb	r0, [r0, #16]
   d49e0:	f7ff bdb0 	b.w	d4544 <HAL_I2C_Begin>

000d49e4 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d49e4:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d49e6:	2400      	movs	r4, #0
   d49e8:	7c00      	ldrb	r0, [r0, #16]
   d49ea:	9400      	str	r4, [sp, #0]
   d49ec:	f7ff fdb2 	bl	d4554 <HAL_I2C_Request_Data>
  return result;
}
   d49f0:	b2c0      	uxtb	r0, r0
   d49f2:	b002      	add	sp, #8
   d49f4:	bd10      	pop	{r4, pc}

000d49f6 <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d49f6:	2301      	movs	r3, #1
   d49f8:	b2d2      	uxtb	r2, r2
   d49fa:	b2c9      	uxtb	r1, r1
   d49fc:	f7ff bff2 	b.w	d49e4 <_ZN7TwoWire11requestFromEhhh>

000d4a00 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d4a00:	2200      	movs	r2, #0
   d4a02:	7c00      	ldrb	r0, [r0, #16]
   d4a04:	f7ff bdae 	b.w	d4564 <HAL_I2C_Begin_Transmission>

000d4a08 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d4a08:	b2c9      	uxtb	r1, r1
   d4a0a:	f7ff bff9 	b.w	d4a00 <_ZN7TwoWire17beginTransmissionEh>

000d4a0e <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d4a0e:	2200      	movs	r2, #0
   d4a10:	7c00      	ldrb	r0, [r0, #16]
   d4a12:	f7ff bdaf 	b.w	d4574 <HAL_I2C_End_Transmission>

000d4a16 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d4a16:	2101      	movs	r1, #1
   d4a18:	f7ff bff9 	b.w	d4a0e <_ZN7TwoWire15endTransmissionEh>

000d4a1c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4a1c:	4770      	bx	lr

000d4a1e <_ZN9IPAddressD0Ev>:
   d4a1e:	b510      	push	{r4, lr}
   d4a20:	4604      	mov	r4, r0
   d4a22:	f7ff fb3a 	bl	d409a <_ZdlPv>
   d4a26:	4620      	mov	r0, r4
   d4a28:	bd10      	pop	{r4, pc}

000d4a2a <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4a2a:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d4a2c:	7d03      	ldrb	r3, [r0, #20]
   d4a2e:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4a30:	b08d      	sub	sp, #52	; 0x34
   d4a32:	460e      	mov	r6, r1
   d4a34:	f100 0704 	add.w	r7, r0, #4
   d4a38:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d4a3c:	d002      	beq.n	d4a44 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4a3e:	f100 0508 	add.w	r5, r0, #8
   d4a42:	e018      	b.n	d4a76 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4a44:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4a46:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4a48:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4a4c:	232f      	movs	r3, #47	; 0x2f
   d4a4e:	462a      	mov	r2, r5
   d4a50:	200a      	movs	r0, #10
   d4a52:	f7ff fdc7 	bl	d45e4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4a56:	4628      	mov	r0, r5
   d4a58:	f001 fb1e 	bl	d6098 <strlen>
   d4a5c:	6833      	ldr	r3, [r6, #0]
   d4a5e:	4602      	mov	r2, r0
   d4a60:	68db      	ldr	r3, [r3, #12]
   d4a62:	4629      	mov	r1, r5
   d4a64:	4630      	mov	r0, r6
   d4a66:	4798      	blx	r3
   d4a68:	e00f      	b.n	d4a8a <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4a6a:	b124      	cbz	r4, d4a76 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4a6c:	212e      	movs	r1, #46	; 0x2e
   d4a6e:	4630      	mov	r0, r6
   d4a70:	f000 f98e 	bl	d4d90 <_ZN5Print5printEc>
   d4a74:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d4a76:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4a7a:	220a      	movs	r2, #10
   d4a7c:	4630      	mov	r0, r6
   d4a7e:	f000 f9c3 	bl	d4e08 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4a82:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4a84:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4a86:	d1f0      	bne.n	d4a6a <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4a88:	4620      	mov	r0, r4
    }
    return n;
}
   d4a8a:	b00d      	add	sp, #52	; 0x34
   d4a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4a90 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d4a90:	b510      	push	{r4, lr}
   d4a92:	4b05      	ldr	r3, [pc, #20]	; (d4aa8 <_ZN9IPAddressC1Ev+0x18>)
   d4a94:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4a96:	2211      	movs	r2, #17
   d4a98:	f840 3b04 	str.w	r3, [r0], #4
   d4a9c:	2100      	movs	r1, #0
   d4a9e:	f001 faca 	bl	d6036 <memset>
{
    clear();
}
   d4aa2:	4620      	mov	r0, r4
   d4aa4:	bd10      	pop	{r4, pc}
   d4aa6:	bf00      	nop
   d4aa8:	000d6154 	.word	0x000d6154

000d4aac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4aac:	4603      	mov	r3, r0
   d4aae:	4a07      	ldr	r2, [pc, #28]	; (d4acc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4ab0:	b510      	push	{r4, lr}
   d4ab2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4ab6:	f101 0210 	add.w	r2, r1, #16
   d4aba:	f851 4b04 	ldr.w	r4, [r1], #4
   d4abe:	f843 4b04 	str.w	r4, [r3], #4
   d4ac2:	4291      	cmp	r1, r2
   d4ac4:	d1f9      	bne.n	d4aba <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4ac6:	780a      	ldrb	r2, [r1, #0]
   d4ac8:	701a      	strb	r2, [r3, #0]
}
   d4aca:	bd10      	pop	{r4, pc}
   d4acc:	000d6154 	.word	0x000d6154

000d4ad0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4ad0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4ad2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4ad6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4ada:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4ade:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4ae2:	2304      	movs	r3, #4
   d4ae4:	6041      	str	r1, [r0, #4]
   d4ae6:	7503      	strb	r3, [r0, #20]
   d4ae8:	bd10      	pop	{r4, pc}

000d4aea <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4aea:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4aec:	780d      	ldrb	r5, [r1, #0]
   d4aee:	788b      	ldrb	r3, [r1, #2]
   d4af0:	784a      	ldrb	r2, [r1, #1]
   d4af2:	78c9      	ldrb	r1, [r1, #3]
   d4af4:	9100      	str	r1, [sp, #0]
   d4af6:	4629      	mov	r1, r5
   d4af8:	f7ff ffea 	bl	d4ad0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4afc:	b003      	add	sp, #12
   d4afe:	bd30      	pop	{r4, r5, pc}

000d4b00 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4b00:	4b01      	ldr	r3, [pc, #4]	; (d4b08 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4b02:	4a02      	ldr	r2, [pc, #8]	; (d4b0c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4b04:	601a      	str	r2, [r3, #0]
   d4b06:	4770      	bx	lr
   d4b08:	2003e4e0 	.word	0x2003e4e0
   d4b0c:	000d6216 	.word	0x000d6216

000d4b10 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4b10:	2200      	movs	r2, #0
   d4b12:	4611      	mov	r1, r2
   d4b14:	6840      	ldr	r0, [r0, #4]
   d4b16:	f7ff be59 	b.w	d47cc <network_listening>

000d4b1a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4b1a:	2200      	movs	r2, #0
   d4b1c:	4611      	mov	r1, r2
   d4b1e:	6840      	ldr	r0, [r0, #4]
   d4b20:	f7ff be64 	b.w	d47ec <network_get_listen_timeout>

000d4b24 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4b24:	2200      	movs	r2, #0
   d4b26:	6840      	ldr	r0, [r0, #4]
   d4b28:	f7ff be58 	b.w	d47dc <network_set_listen_timeout>

000d4b2c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4b2c:	2200      	movs	r2, #0
   d4b2e:	f081 0101 	eor.w	r1, r1, #1
   d4b32:	6840      	ldr	r0, [r0, #4]
   d4b34:	f7ff be42 	b.w	d47bc <network_listen>

000d4b38 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4b38:	2300      	movs	r3, #0
   d4b3a:	461a      	mov	r2, r3
   d4b3c:	4619      	mov	r1, r3
   d4b3e:	6840      	ldr	r0, [r0, #4]
   d4b40:	f7ff be34 	b.w	d47ac <network_off>

000d4b44 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4b44:	2300      	movs	r3, #0
   d4b46:	461a      	mov	r2, r3
   d4b48:	4619      	mov	r1, r3
   d4b4a:	6840      	ldr	r0, [r0, #4]
   d4b4c:	f7ff be26 	b.w	d479c <network_on>

000d4b50 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4b50:	2200      	movs	r2, #0
   d4b52:	4611      	mov	r1, r2
   d4b54:	6840      	ldr	r0, [r0, #4]
   d4b56:	f7ff be19 	b.w	d478c <network_ready>

000d4b5a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4b5a:	2200      	movs	r2, #0
   d4b5c:	4611      	mov	r1, r2
   d4b5e:	6840      	ldr	r0, [r0, #4]
   d4b60:	f7ff be04 	b.w	d476c <network_connecting>

000d4b64 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4b64:	2200      	movs	r2, #0
   d4b66:	2102      	movs	r1, #2
   d4b68:	6840      	ldr	r0, [r0, #4]
   d4b6a:	f7ff be07 	b.w	d477c <network_disconnect>

000d4b6e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4b6e:	2300      	movs	r3, #0
   d4b70:	461a      	mov	r2, r3
   d4b72:	6840      	ldr	r0, [r0, #4]
   d4b74:	f7ff bdf2 	b.w	d475c <network_connect>

000d4b78 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4b78:	b110      	cbz	r0, d4b80 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d4b7a:	6803      	ldr	r3, [r0, #0]
   d4b7c:	685b      	ldr	r3, [r3, #4]
   d4b7e:	4718      	bx	r3
   d4b80:	4770      	bx	lr

000d4b82 <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d4b82:	b538      	push	{r3, r4, r5, lr}
   d4b84:	4604      	mov	r4, r0
   d4b86:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d4b88:	b1d0      	cbz	r0, d4bc0 <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d4b8a:	f7ff fc9b 	bl	d44c4 <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d4b8e:	b9b8      	cbnz	r0, d4bc0 <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d4b90:	7c23      	ldrb	r3, [r4, #16]
   d4b92:	b91b      	cbnz	r3, d4b9c <_ZN6Thread7disposeEv+0x1a>
   d4b94:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d4b96:	b108      	cbz	r0, d4b9c <_ZN6Thread7disposeEv+0x1a>
   d4b98:	f7ff fc9c 	bl	d44d4 <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d4b9c:	6865      	ldr	r5, [r4, #4]
   d4b9e:	b155      	cbz	r5, d4bb6 <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4ba0:	68ab      	ldr	r3, [r5, #8]
   d4ba2:	b11b      	cbz	r3, d4bac <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4ba4:	2203      	movs	r2, #3
   d4ba6:	4629      	mov	r1, r5
   d4ba8:	4628      	mov	r0, r5
   d4baa:	4798      	blx	r3
            delete wrapper;
   d4bac:	4628      	mov	r0, r5
   d4bae:	f7ff fa74 	bl	d409a <_ZdlPv>
            wrapper = NULL;
   d4bb2:	2300      	movs	r3, #0
   d4bb4:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d4bb6:	6820      	ldr	r0, [r4, #0]
   d4bb8:	f7ff fc94 	bl	d44e4 <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d4bbc:	2300      	movs	r3, #0
   d4bbe:	6023      	str	r3, [r4, #0]
   d4bc0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4bc4 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4bc4:	b538      	push	{r3, r4, r5, lr}
   d4bc6:	4b0b      	ldr	r3, [pc, #44]	; (d4bf4 <_ZN5spark9MeshClassD1Ev+0x30>)
   d4bc8:	6003      	str	r3, [r0, #0]
   d4bca:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4bcc:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d4bd0:	b108      	cbz	r0, d4bd6 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4bd2:	f7ff fa64 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4bd6:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d4bda:	b12d      	cbz	r5, d4be8 <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d4bdc:	4628      	mov	r0, r5
   d4bde:	f7ff ffd0 	bl	d4b82 <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4be2:	4628      	mov	r0, r5
   d4be4:	f7ff fa59 	bl	d409a <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4be8:	68a0      	ldr	r0, [r4, #8]
   d4bea:	b108      	cbz	r0, d4bf0 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d4bec:	f7ff ffc4 	bl	d4b78 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d4bf0:	4620      	mov	r0, r4
   d4bf2:	bd38      	pop	{r3, r4, r5, pc}
   d4bf4:	000d6248 	.word	0x000d6248

000d4bf8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4bf8:	b538      	push	{r3, r4, r5, lr}
   d4bfa:	4c0d      	ldr	r4, [pc, #52]	; (d4c30 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d4bfc:	4b0d      	ldr	r3, [pc, #52]	; (d4c34 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d4bfe:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4c00:	2500      	movs	r5, #0
   d4c02:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4c04:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4c08:	6063      	str	r3, [r4, #4]
   d4c0a:	60a5      	str	r5, [r4, #8]
   d4c0c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4c10:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4c14:	f7ff fc76 	bl	d4504 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4c18:	4b07      	ldr	r3, [pc, #28]	; (d4c38 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d4c1a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d4c1e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4c20:	4620      	mov	r0, r4
   d4c22:	4a06      	ldr	r2, [pc, #24]	; (d4c3c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d4c24:	4906      	ldr	r1, [pc, #24]	; (d4c40 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d4c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4c2a:	f000 bbb1 	b.w	d5390 <__aeabi_atexit>
   d4c2e:	bf00      	nop
   d4c30:	2003e4e4 	.word	0x2003e4e4
   d4c34:	000d627c 	.word	0x000d627c
   d4c38:	000d6248 	.word	0x000d6248
   d4c3c:	2003e440 	.word	0x2003e440
   d4c40:	000d4bc5 	.word	0x000d4bc5

000d4c44 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4c44:	2300      	movs	r3, #0
   d4c46:	461a      	mov	r2, r3
   d4c48:	6840      	ldr	r0, [r0, #4]
   d4c4a:	f7ff bd87 	b.w	d475c <network_connect>

000d4c4e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4c4e:	2200      	movs	r2, #0
   d4c50:	2102      	movs	r1, #2
   d4c52:	6840      	ldr	r0, [r0, #4]
   d4c54:	f7ff bd92 	b.w	d477c <network_disconnect>

000d4c58 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4c58:	2200      	movs	r2, #0
   d4c5a:	4611      	mov	r1, r2
   d4c5c:	6840      	ldr	r0, [r0, #4]
   d4c5e:	f7ff bd85 	b.w	d476c <network_connecting>

000d4c62 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4c62:	2200      	movs	r2, #0
   d4c64:	4611      	mov	r1, r2
   d4c66:	6840      	ldr	r0, [r0, #4]
   d4c68:	f7ff bd90 	b.w	d478c <network_ready>

000d4c6c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4c6c:	2300      	movs	r3, #0
   d4c6e:	461a      	mov	r2, r3
   d4c70:	4619      	mov	r1, r3
   d4c72:	6840      	ldr	r0, [r0, #4]
   d4c74:	f7ff bd92 	b.w	d479c <network_on>

000d4c78 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4c78:	2300      	movs	r3, #0
   d4c7a:	461a      	mov	r2, r3
   d4c7c:	4619      	mov	r1, r3
   d4c7e:	6840      	ldr	r0, [r0, #4]
   d4c80:	f7ff bd94 	b.w	d47ac <network_off>

000d4c84 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4c84:	2200      	movs	r2, #0
   d4c86:	f081 0101 	eor.w	r1, r1, #1
   d4c8a:	6840      	ldr	r0, [r0, #4]
   d4c8c:	f7ff bd96 	b.w	d47bc <network_listen>

000d4c90 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4c90:	2200      	movs	r2, #0
   d4c92:	6840      	ldr	r0, [r0, #4]
   d4c94:	f7ff bda2 	b.w	d47dc <network_set_listen_timeout>

000d4c98 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4c98:	2200      	movs	r2, #0
   d4c9a:	4611      	mov	r1, r2
   d4c9c:	6840      	ldr	r0, [r0, #4]
   d4c9e:	f7ff bda5 	b.w	d47ec <network_get_listen_timeout>

000d4ca2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4ca2:	2200      	movs	r2, #0
   d4ca4:	4611      	mov	r1, r2
   d4ca6:	6840      	ldr	r0, [r0, #4]
   d4ca8:	f7ff bd90 	b.w	d47cc <network_listening>

000d4cac <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4cac:	b570      	push	{r4, r5, r6, lr}
   d4cae:	b08c      	sub	sp, #48	; 0x30
   d4cb0:	4614      	mov	r4, r2
   d4cb2:	4606      	mov	r6, r0
    IPAddress addr;
   d4cb4:	f7ff feec 	bl	d4a90 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4cb8:	ab0c      	add	r3, sp, #48	; 0x30
   d4cba:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d4cbc:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4cbe:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d4cc2:	4620      	mov	r0, r4
   d4cc4:	f7ff fc9e 	bl	d4604 <netdb_getaddrinfo>
    if (!r && ai) {
   d4cc8:	4601      	mov	r1, r0
   d4cca:	bb58      	cbnz	r0, d4d24 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d4ccc:	9b00      	ldr	r3, [sp, #0]
   d4cce:	b34b      	cbz	r3, d4d24 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d4cd0:	685a      	ldr	r2, [r3, #4]
   d4cd2:	2a02      	cmp	r2, #2
   d4cd4:	d00e      	beq.n	d4cf4 <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d4cd6:	2a0a      	cmp	r2, #10
   d4cd8:	d124      	bne.n	d4d24 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d4cda:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d4cdc:	2211      	movs	r2, #17
   d4cde:	a801      	add	r0, sp, #4
   d4ce0:	f001 f9a9 	bl	d6036 <memset>
                a.v = 6;
   d4ce4:	2306      	movs	r3, #6
   d4ce6:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4cea:	ad01      	add	r5, sp, #4
   d4cec:	f104 0308 	add.w	r3, r4, #8
   d4cf0:	3418      	adds	r4, #24
   d4cf2:	e005      	b.n	d4d00 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4cf4:	6959      	ldr	r1, [r3, #20]
   d4cf6:	4630      	mov	r0, r6
   d4cf8:	3104      	adds	r1, #4
   d4cfa:	f7ff fef6 	bl	d4aea <_ZN9IPAddressaSEPKh>
                break;
   d4cfe:	e011      	b.n	d4d24 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4d00:	6818      	ldr	r0, [r3, #0]
   d4d02:	6859      	ldr	r1, [r3, #4]
   d4d04:	462a      	mov	r2, r5
   d4d06:	c203      	stmia	r2!, {r0, r1}
   d4d08:	3308      	adds	r3, #8
   d4d0a:	42a3      	cmp	r3, r4
   d4d0c:	4615      	mov	r5, r2
   d4d0e:	d1f7      	bne.n	d4d00 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d4d10:	a901      	add	r1, sp, #4
   d4d12:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4d14:	ad07      	add	r5, sp, #28
   d4d16:	f7ff fec9 	bl	d4aac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4d1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4d1c:	1d34      	adds	r4, r6, #4
   d4d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4d20:	682b      	ldr	r3, [r5, #0]
   d4d22:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d4d24:	9800      	ldr	r0, [sp, #0]
   d4d26:	f7ff fc65 	bl	d45f4 <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4d2a:	4630      	mov	r0, r6
   d4d2c:	b00c      	add	sp, #48	; 0x30
   d4d2e:	bd70      	pop	{r4, r5, r6, pc}

000d4d30 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4d30:	4b02      	ldr	r3, [pc, #8]	; (d4d3c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4d32:	4a03      	ldr	r2, [pc, #12]	; (d4d40 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4d34:	601a      	str	r2, [r3, #0]
   d4d36:	2200      	movs	r2, #0
   d4d38:	605a      	str	r2, [r3, #4]
   d4d3a:	4770      	bx	lr
   d4d3c:	2003e6b4 	.word	0x2003e6b4
   d4d40:	000d627c 	.word	0x000d627c

000d4d44 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4d46:	4606      	mov	r6, r0
   d4d48:	460d      	mov	r5, r1
   d4d4a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4d4c:	2400      	movs	r4, #0
  while (size--) {
   d4d4e:	42bd      	cmp	r5, r7
   d4d50:	d00c      	beq.n	d4d6c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4d52:	6833      	ldr	r3, [r6, #0]
   d4d54:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4d58:	689b      	ldr	r3, [r3, #8]
   d4d5a:	4630      	mov	r0, r6
   d4d5c:	4798      	blx	r3
     if (chunk>=0)
   d4d5e:	2800      	cmp	r0, #0
   d4d60:	db01      	blt.n	d4d66 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4d62:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4d64:	e7f3      	b.n	d4d4e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4d66:	2c00      	cmp	r4, #0
   d4d68:	bf08      	it	eq
   d4d6a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4d6c:	4620      	mov	r0, r4
   d4d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d70 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4d70:	b570      	push	{r4, r5, r6, lr}
   d4d72:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4d74:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4d76:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4d78:	b149      	cbz	r1, d4d8e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4d7a:	f001 f98d 	bl	d6098 <strlen>
   d4d7e:	682b      	ldr	r3, [r5, #0]
   d4d80:	4602      	mov	r2, r0
   d4d82:	4621      	mov	r1, r4
   d4d84:	4628      	mov	r0, r5
   d4d86:	68db      	ldr	r3, [r3, #12]
    }
   d4d88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4d8c:	4718      	bx	r3
    }
   d4d8e:	bd70      	pop	{r4, r5, r6, pc}

000d4d90 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4d90:	6803      	ldr	r3, [r0, #0]
   d4d92:	689b      	ldr	r3, [r3, #8]
   d4d94:	4718      	bx	r3

000d4d96 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4d96:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4d98:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4d9a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4d9c:	f7ff fff8 	bl	d4d90 <_ZN5Print5printEc>
  n += print('\n');
   d4da0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4da2:	4604      	mov	r4, r0
  n += print('\n');
   d4da4:	4628      	mov	r0, r5
   d4da6:	f7ff fff3 	bl	d4d90 <_ZN5Print5printEc>
  return n;
}
   d4daa:	4420      	add	r0, r4
   d4dac:	bd38      	pop	{r3, r4, r5, pc}

000d4dae <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4dae:	b530      	push	{r4, r5, lr}
   d4db0:	b08b      	sub	sp, #44	; 0x2c
   d4db2:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4db4:	2100      	movs	r1, #0
   d4db6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4dba:	2a01      	cmp	r2, #1
   d4dbc:	bf98      	it	ls
   d4dbe:	220a      	movls	r2, #10
   d4dc0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d4dc4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d4dc8:	fb05 3312 	mls	r3, r5, r2, r3
   d4dcc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4dd0:	2b09      	cmp	r3, #9
   d4dd2:	bf94      	ite	ls
   d4dd4:	3330      	addls	r3, #48	; 0x30
   d4dd6:	3337      	addhi	r3, #55	; 0x37
   d4dd8:	b2db      	uxtb	r3, r3
   d4dda:	4621      	mov	r1, r4
   d4ddc:	f804 3901 	strb.w	r3, [r4], #-1
   d4de0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4de2:	2d00      	cmp	r5, #0
   d4de4:	d1ee      	bne.n	d4dc4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4de6:	f7ff ffc3 	bl	d4d70 <_ZN5Print5writeEPKc>
}
   d4dea:	b00b      	add	sp, #44	; 0x2c
   d4dec:	bd30      	pop	{r4, r5, pc}

000d4dee <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d4dee:	b410      	push	{r4}
  if (base == 0) return write(n);
   d4df0:	b92a      	cbnz	r2, d4dfe <_ZN5Print5printEmi+0x10>
   d4df2:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d4df4:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d4df8:	689b      	ldr	r3, [r3, #8]
   d4dfa:	b2c9      	uxtb	r1, r1
   d4dfc:	4718      	bx	r3
  else return printNumber(n, base);
   d4dfe:	b2d2      	uxtb	r2, r2
}
   d4e00:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4e04:	f7ff bfd3 	b.w	d4dae <_ZN5Print11printNumberEmh>

000d4e08 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d4e08:	f7ff bff1 	b.w	d4dee <_ZN5Print5printEmi>

000d4e0c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d4e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4e10:	4607      	mov	r7, r0
   d4e12:	460e      	mov	r6, r1
  if (base == 0) {
   d4e14:	4615      	mov	r5, r2
   d4e16:	b92a      	cbnz	r2, d4e24 <_ZN5Print5printEli+0x18>
    return write(n);
   d4e18:	6803      	ldr	r3, [r0, #0]
   d4e1a:	b2c9      	uxtb	r1, r1
   d4e1c:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d4e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d4e22:	4718      	bx	r3
  } else if (base == 10) {
   d4e24:	2a0a      	cmp	r2, #10
   d4e26:	d102      	bne.n	d4e2e <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d4e28:	2900      	cmp	r1, #0
   d4e2a:	da01      	bge.n	d4e30 <_ZN5Print5printEli+0x24>
   d4e2c:	e004      	b.n	d4e38 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d4e2e:	b2d2      	uxtb	r2, r2
  }
}
   d4e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d4e34:	f7ff bfbb 	b.w	d4dae <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d4e38:	212d      	movs	r1, #45	; 0x2d
   d4e3a:	f7ff ffa9 	bl	d4d90 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d4e3e:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d4e40:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d4e42:	4271      	negs	r1, r6
   d4e44:	4638      	mov	r0, r7
   d4e46:	f7ff ffb2 	bl	d4dae <_ZN5Print11printNumberEmh>
   d4e4a:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d4e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4e50 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d4e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4e54:	ec57 6b10 	vmov	r6, r7, d0
   d4e58:	4682      	mov	sl, r0
   d4e5a:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d4e5c:	ee10 2a10 	vmov	r2, s0
   d4e60:	463b      	mov	r3, r7
   d4e62:	ee10 0a10 	vmov	r0, s0
   d4e66:	4639      	mov	r1, r7
   d4e68:	f001 f832 	bl	d5ed0 <__aeabi_dcmpun>
   d4e6c:	b108      	cbz	r0, d4e72 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4e6e:	4948      	ldr	r1, [pc, #288]	; (d4f90 <_ZN5Print10printFloatEdh+0x140>)
   d4e70:	e012      	b.n	d4e98 <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4e72:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d4e76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d4e7a:	4b46      	ldr	r3, [pc, #280]	; (d4f94 <_ZN5Print10printFloatEdh+0x144>)
   d4e7c:	4630      	mov	r0, r6
   d4e7e:	4649      	mov	r1, r9
   d4e80:	f001 f826 	bl	d5ed0 <__aeabi_dcmpun>
   d4e84:	b968      	cbnz	r0, d4ea2 <_ZN5Print10printFloatEdh+0x52>
   d4e86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d4e8a:	4b42      	ldr	r3, [pc, #264]	; (d4f94 <_ZN5Print10printFloatEdh+0x144>)
   d4e8c:	4630      	mov	r0, r6
   d4e8e:	4649      	mov	r1, r9
   d4e90:	f001 f800 	bl	d5e94 <__aeabi_dcmple>
   d4e94:	b928      	cbnz	r0, d4ea2 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4e96:	4940      	ldr	r1, [pc, #256]	; (d4f98 <_ZN5Print10printFloatEdh+0x148>)
   d4e98:	4650      	mov	r0, sl
   d4e9a:	f7ff ff69 	bl	d4d70 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d4e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d4ea2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4ea6:	4b3d      	ldr	r3, [pc, #244]	; (d4f9c <_ZN5Print10printFloatEdh+0x14c>)
   d4ea8:	4630      	mov	r0, r6
   d4eaa:	4639      	mov	r1, r7
   d4eac:	f001 f806 	bl	d5ebc <__aeabi_dcmpgt>
   d4eb0:	b108      	cbz	r0, d4eb6 <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4eb2:	493b      	ldr	r1, [pc, #236]	; (d4fa0 <_ZN5Print10printFloatEdh+0x150>)
   d4eb4:	e7f0      	b.n	d4e98 <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d4eb6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4eba:	4b3a      	ldr	r3, [pc, #232]	; (d4fa4 <_ZN5Print10printFloatEdh+0x154>)
   d4ebc:	4630      	mov	r0, r6
   d4ebe:	4639      	mov	r1, r7
   d4ec0:	f000 ffde 	bl	d5e80 <__aeabi_dcmplt>
   d4ec4:	2800      	cmp	r0, #0
   d4ec6:	d1f4      	bne.n	d4eb2 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d4ec8:	2200      	movs	r2, #0
   d4eca:	2300      	movs	r3, #0
   d4ecc:	4630      	mov	r0, r6
   d4ece:	4639      	mov	r1, r7
   d4ed0:	f000 ffd6 	bl	d5e80 <__aeabi_dcmplt>
   d4ed4:	b140      	cbz	r0, d4ee8 <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d4ed6:	212d      	movs	r1, #45	; 0x2d
   d4ed8:	4650      	mov	r0, sl
   d4eda:	f7ff ff59 	bl	d4d90 <_ZN5Print5printEc>
     number = -number;
   d4ede:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d4ee2:	4604      	mov	r4, r0
     number = -number;
   d4ee4:	461f      	mov	r7, r3
   d4ee6:	e000      	b.n	d4eea <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4ee8:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4eea:	492f      	ldr	r1, [pc, #188]	; (d4fa8 <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d4eec:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d4ef0:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d4ef2:	fa5f f388 	uxtb.w	r3, r8
   d4ef6:	429d      	cmp	r5, r3
   d4ef8:	d906      	bls.n	d4f08 <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d4efa:	2200      	movs	r2, #0
   d4efc:	4b2b      	ldr	r3, [pc, #172]	; (d4fac <_ZN5Print10printFloatEdh+0x15c>)
   d4efe:	f000 fe77 	bl	d5bf0 <__aeabi_ddiv>
   d4f02:	f108 0801 	add.w	r8, r8, #1
   d4f06:	e7f4      	b.n	d4ef2 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d4f08:	4632      	mov	r2, r6
   d4f0a:	463b      	mov	r3, r7
   d4f0c:	f000 fb94 	bl	d5638 <__adddf3>
   d4f10:	460f      	mov	r7, r1
   d4f12:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d4f14:	f001 f81a 	bl	d5f4c <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4f18:	220a      	movs	r2, #10
   d4f1a:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d4f1c:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d4f1e:	4650      	mov	r0, sl
   d4f20:	f7ff ff45 	bl	d4dae <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4f24:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d4f26:	b37d      	cbz	r5, d4f88 <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d4f28:	4640      	mov	r0, r8
   d4f2a:	f000 fcc1 	bl	d58b0 <__aeabi_ui2d>
   d4f2e:	4602      	mov	r2, r0
   d4f30:	460b      	mov	r3, r1
   d4f32:	4630      	mov	r0, r6
   d4f34:	4639      	mov	r1, r7
   d4f36:	f000 fb7d 	bl	d5634 <__aeabi_dsub>
   d4f3a:	4606      	mov	r6, r0
   d4f3c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4f3e:	4650      	mov	r0, sl
   d4f40:	491b      	ldr	r1, [pc, #108]	; (d4fb0 <_ZN5Print10printFloatEdh+0x160>)
   d4f42:	f7ff ff15 	bl	d4d70 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d4f46:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d4f48:	4b18      	ldr	r3, [pc, #96]	; (d4fac <_ZN5Print10printFloatEdh+0x15c>)
   d4f4a:	2200      	movs	r2, #0
   d4f4c:	4630      	mov	r0, r6
   d4f4e:	4639      	mov	r1, r7
   d4f50:	f000 fd24 	bl	d599c <__aeabi_dmul>
   d4f54:	460f      	mov	r7, r1
   d4f56:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d4f58:	f000 ffd0 	bl	d5efc <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d4f5c:	220a      	movs	r2, #10
   d4f5e:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d4f60:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d4f62:	4650      	mov	r0, sl
   d4f64:	f7ff ff52 	bl	d4e0c <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d4f68:	4404      	add	r4, r0
    remainder -= toPrint;
   d4f6a:	4640      	mov	r0, r8
   d4f6c:	f000 fcb0 	bl	d58d0 <__aeabi_i2d>
   d4f70:	4602      	mov	r2, r0
   d4f72:	460b      	mov	r3, r1
   d4f74:	4630      	mov	r0, r6
   d4f76:	4639      	mov	r1, r7
   d4f78:	f000 fb5c 	bl	d5634 <__aeabi_dsub>
   d4f7c:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4f7e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d4f82:	4606      	mov	r6, r0
   d4f84:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d4f86:	d1df      	bne.n	d4f48 <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d4f88:	4620      	mov	r0, r4
   d4f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4f8e:	bf00      	nop
   d4f90:	000d62a8 	.word	0x000d62a8
   d4f94:	7fefffff 	.word	0x7fefffff
   d4f98:	000d62b2 	.word	0x000d62b2
   d4f9c:	41efffff 	.word	0x41efffff
   d4fa0:	000d62ac 	.word	0x000d62ac
   d4fa4:	c1efffff 	.word	0xc1efffff
   d4fa8:	3fe00000 	.word	0x3fe00000
   d4fac:	40240000 	.word	0x40240000
   d4fb0:	000d62b0 	.word	0x000d62b0

000d4fb4 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d4fb4:	b538      	push	{r3, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d4fb6:	b2c9      	uxtb	r1, r1
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   d4fb8:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d4fba:	f7ff ff49 	bl	d4e50 <_ZN5Print10printFloatEdh>
   d4fbe:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
   d4fc0:	4628      	mov	r0, r5
   d4fc2:	f7ff fee8 	bl	d4d96 <_ZN5Print7printlnEv>
  return n;
}
   d4fc6:	4420      	add	r0, r4
   d4fc8:	bd38      	pop	{r3, r4, r5, pc}

000d4fca <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4fca:	b510      	push	{r4, lr}
   d4fcc:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4fce:	f7ff fc7d 	bl	d48cc <_ZNSt14_Function_baseD1Ev>
   d4fd2:	4620      	mov	r0, r4
   d4fd4:	bd10      	pop	{r4, pc}
	...

000d4fd8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4fd8:	4803      	ldr	r0, [pc, #12]	; (d4fe8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4fda:	4a04      	ldr	r2, [pc, #16]	; (d4fec <_GLOBAL__sub_I_RGB+0x14>)
   d4fdc:	4904      	ldr	r1, [pc, #16]	; (d4ff0 <_GLOBAL__sub_I_RGB+0x18>)
   d4fde:	2300      	movs	r3, #0
   d4fe0:	6083      	str	r3, [r0, #8]
   d4fe2:	f000 b9d5 	b.w	d5390 <__aeabi_atexit>
   d4fe6:	bf00      	nop
   d4fe8:	2003e6bc 	.word	0x2003e6bc
   d4fec:	2003e440 	.word	0x2003e440
   d4ff0:	000d4fcb 	.word	0x000d4fcb

000d4ff4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4ff4:	4770      	bx	lr

000d4ff6 <_ZN8SPIClassD0Ev>:
   d4ff6:	b510      	push	{r4, lr}
   d4ff8:	4604      	mov	r4, r0
   d4ffa:	f7ff f84e 	bl	d409a <_ZdlPv>
   d4ffe:	4620      	mov	r0, r4
   d5000:	bd10      	pop	{r4, pc}
	...

000d5004 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5004:	b570      	push	{r4, r5, r6, lr}
   d5006:	4b08      	ldr	r3, [pc, #32]	; (d5028 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5008:	6003      	str	r3, [r0, #0]
   d500a:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d500c:	2500      	movs	r5, #0
   d500e:	460e      	mov	r6, r1
   d5010:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5014:	f7ff fa6e 	bl	d44f4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5018:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d501a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d501c:	f7ff fafa 	bl	d4614 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5020:	60a5      	str	r5, [r4, #8]
}
   d5022:	4620      	mov	r0, r4
   d5024:	bd70      	pop	{r4, r5, r6, pc}
   d5026:	bf00      	nop
   d5028:	000d62c0 	.word	0x000d62c0

000d502c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d502c:	4b04      	ldr	r3, [pc, #16]	; (d5040 <_GLOBAL__sub_I_System+0x14>)
   d502e:	2000      	movs	r0, #0
   d5030:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5034:	7018      	strb	r0, [r3, #0]
   d5036:	8058      	strh	r0, [r3, #2]
   d5038:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d503a:	f7ff bb63 	b.w	d4704 <set_system_mode>
   d503e:	bf00      	nop
   d5040:	2003e6cc 	.word	0x2003e6cc

000d5044 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5044:	4b02      	ldr	r3, [pc, #8]	; (d5050 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5046:	681a      	ldr	r2, [r3, #0]
   d5048:	4b02      	ldr	r3, [pc, #8]	; (d5054 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d504a:	601a      	str	r2, [r3, #0]
   d504c:	4770      	bx	lr
   d504e:	bf00      	nop
   d5050:	2003e3d8 	.word	0x2003e3d8
   d5054:	2003e6d4 	.word	0x2003e6d4

000d5058 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5058:	4770      	bx	lr

000d505a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d505a:	7441      	strb	r1, [r0, #17]
   d505c:	4770      	bx	lr

000d505e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d505e:	7c00      	ldrb	r0, [r0, #16]
   d5060:	f7ff bb10 	b.w	d4684 <HAL_USART_Available_Data_For_Write>

000d5064 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d5064:	7c00      	ldrb	r0, [r0, #16]
   d5066:	f7ff baed 	b.w	d4644 <HAL_USART_Available_Data>

000d506a <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d506a:	7c00      	ldrb	r0, [r0, #16]
   d506c:	f7ff bafa 	b.w	d4664 <HAL_USART_Peek_Data>

000d5070 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d5070:	7c00      	ldrb	r0, [r0, #16]
   d5072:	f7ff baef 	b.w	d4654 <HAL_USART_Read_Data>

000d5076 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5076:	7c00      	ldrb	r0, [r0, #16]
   d5078:	f7ff bafc 	b.w	d4674 <HAL_USART_Flush_Data>

000d507c <_ZN11USARTSerialD0Ev>:
   d507c:	b510      	push	{r4, lr}
   d507e:	4604      	mov	r4, r0
   d5080:	f7ff f80b 	bl	d409a <_ZdlPv>
   d5084:	4620      	mov	r0, r4
   d5086:	bd10      	pop	{r4, pc}

000d5088 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5088:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d508a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d508c:	4604      	mov	r4, r0
   d508e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5090:	b925      	cbnz	r5, d509c <_ZN11USARTSerial5writeEh+0x14>
   d5092:	7c00      	ldrb	r0, [r0, #16]
   d5094:	f7ff faf6 	bl	d4684 <HAL_USART_Available_Data_For_Write>
   d5098:	2800      	cmp	r0, #0
   d509a:	dd05      	ble.n	d50a8 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d509c:	4631      	mov	r1, r6
   d509e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d50a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d50a4:	f7ff bac6 	b.w	d4634 <HAL_USART_Write_Data>
  }
  return 0;
}
   d50a8:	4628      	mov	r0, r5
   d50aa:	bd70      	pop	{r4, r5, r6, pc}

000d50ac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d50ac:	b510      	push	{r4, lr}
   d50ae:	4604      	mov	r4, r0
   d50b0:	4608      	mov	r0, r1
   d50b2:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d50b4:	2200      	movs	r2, #0
   d50b6:	6062      	str	r2, [r4, #4]
   d50b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d50bc:	60a2      	str	r2, [r4, #8]
   d50be:	4a05      	ldr	r2, [pc, #20]	; (d50d4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d50c0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d50c2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d50c4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d50c6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d50c8:	461a      	mov	r2, r3
   d50ca:	f7ff faab 	bl	d4624 <HAL_USART_Init>
}
   d50ce:	4620      	mov	r0, r4
   d50d0:	bd10      	pop	{r4, pc}
   d50d2:	bf00      	nop
   d50d4:	000d62fc 	.word	0x000d62fc

000d50d8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d50d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d50da:	4c19      	ldr	r4, [pc, #100]	; (d5140 <_Z22__fetch_global_Serial1v+0x68>)
   d50dc:	6825      	ldr	r5, [r4, #0]
   d50de:	b94d      	cbnz	r5, d50f4 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d50e0:	2084      	movs	r0, #132	; 0x84
   d50e2:	f7fe ffd8 	bl	d4096 <_Znwj>
   d50e6:	4606      	mov	r6, r0
   d50e8:	b118      	cbz	r0, d50f2 <_Z22__fetch_global_Serial1v+0x1a>
   d50ea:	2284      	movs	r2, #132	; 0x84
   d50ec:	4629      	mov	r1, r5
   d50ee:	f000 ffa2 	bl	d6036 <memset>
   d50f2:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d50f4:	4d13      	ldr	r5, [pc, #76]	; (d5144 <_Z22__fetch_global_Serial1v+0x6c>)
   d50f6:	682e      	ldr	r6, [r5, #0]
   d50f8:	b94e      	cbnz	r6, d510e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d50fa:	2084      	movs	r0, #132	; 0x84
   d50fc:	f7fe ffcb 	bl	d4096 <_Znwj>
   d5100:	4607      	mov	r7, r0
   d5102:	b118      	cbz	r0, d510c <_Z22__fetch_global_Serial1v+0x34>
   d5104:	2284      	movs	r2, #132	; 0x84
   d5106:	4631      	mov	r1, r6
   d5108:	f000 ff95 	bl	d6036 <memset>
   d510c:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d510e:	4f0e      	ldr	r7, [pc, #56]	; (d5148 <_Z22__fetch_global_Serial1v+0x70>)
   d5110:	6839      	ldr	r1, [r7, #0]
   d5112:	f011 0601 	ands.w	r6, r1, #1
   d5116:	d111      	bne.n	d513c <_Z22__fetch_global_Serial1v+0x64>
   d5118:	4638      	mov	r0, r7
   d511a:	f7fe ffc2 	bl	d40a2 <__cxa_guard_acquire>
   d511e:	b168      	cbz	r0, d513c <_Z22__fetch_global_Serial1v+0x64>
   d5120:	6822      	ldr	r2, [r4, #0]
   d5122:	682b      	ldr	r3, [r5, #0]
   d5124:	4809      	ldr	r0, [pc, #36]	; (d514c <_Z22__fetch_global_Serial1v+0x74>)
   d5126:	4631      	mov	r1, r6
   d5128:	f7ff ffc0 	bl	d50ac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d512c:	4638      	mov	r0, r7
   d512e:	f7fe ffbd 	bl	d40ac <__cxa_guard_release>
   d5132:	4a07      	ldr	r2, [pc, #28]	; (d5150 <_Z22__fetch_global_Serial1v+0x78>)
   d5134:	4907      	ldr	r1, [pc, #28]	; (d5154 <_Z22__fetch_global_Serial1v+0x7c>)
   d5136:	4805      	ldr	r0, [pc, #20]	; (d514c <_Z22__fetch_global_Serial1v+0x74>)
   d5138:	f000 f92a 	bl	d5390 <__aeabi_atexit>
#endif
	return serial1;
}
   d513c:	4803      	ldr	r0, [pc, #12]	; (d514c <_Z22__fetch_global_Serial1v+0x74>)
   d513e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5140:	2003e6f4 	.word	0x2003e6f4
   d5144:	2003e6ec 	.word	0x2003e6ec
   d5148:	2003e6f0 	.word	0x2003e6f0
   d514c:	2003e6d8 	.word	0x2003e6d8
   d5150:	2003e440 	.word	0x2003e440
   d5154:	000d5059 	.word	0x000d5059

000d5158 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5158:	7441      	strb	r1, [r0, #17]
   d515a:	4770      	bx	lr

000d515c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d515c:	4770      	bx	lr

000d515e <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d515e:	2100      	movs	r1, #0
   d5160:	7c00      	ldrb	r0, [r0, #16]
   d5162:	f7ff bab7 	b.w	d46d4 <HAL_USB_USART_Receive_Data>

000d5166 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d5166:	2101      	movs	r1, #1
   d5168:	7c00      	ldrb	r0, [r0, #16]
   d516a:	f7ff bab3 	b.w	d46d4 <HAL_USB_USART_Receive_Data>

000d516e <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d516e:	7c00      	ldrb	r0, [r0, #16]
   d5170:	f7ff baa8 	b.w	d46c4 <HAL_USB_USART_Available_Data_For_Write>

000d5174 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d5174:	7c00      	ldrb	r0, [r0, #16]
   d5176:	f7ff ba9d 	b.w	d46b4 <HAL_USB_USART_Available_Data>

000d517a <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d517a:	b538      	push	{r3, r4, r5, lr}
   d517c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d517e:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d5180:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5182:	f7ff fa9f 	bl	d46c4 <HAL_USB_USART_Available_Data_For_Write>
   d5186:	2800      	cmp	r0, #0
   d5188:	dc01      	bgt.n	d518e <_ZN9USBSerial5writeEh+0x14>
   d518a:	7c60      	ldrb	r0, [r4, #17]
   d518c:	b120      	cbz	r0, d5198 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d518e:	4629      	mov	r1, r5
   d5190:	7c20      	ldrb	r0, [r4, #16]
   d5192:	f7ff faa7 	bl	d46e4 <HAL_USB_USART_Send_Data>
    return 1;
   d5196:	2001      	movs	r0, #1
  }
  return 0;
}
   d5198:	bd38      	pop	{r3, r4, r5, pc}

000d519a <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d519a:	7c00      	ldrb	r0, [r0, #16]
   d519c:	f7ff baaa 	b.w	d46f4 <HAL_USB_USART_Flush_Data>

000d51a0 <_ZN9USBSerialD0Ev>:
   d51a0:	b510      	push	{r4, lr}
   d51a2:	4604      	mov	r4, r0
   d51a4:	f7fe ff79 	bl	d409a <_ZdlPv>
   d51a8:	4620      	mov	r0, r4
   d51aa:	bd10      	pop	{r4, pc}

000d51ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d51ac:	b510      	push	{r4, lr}
   d51ae:	4604      	mov	r4, r0
   d51b0:	2300      	movs	r3, #0
   d51b2:	6063      	str	r3, [r4, #4]
   d51b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d51b8:	60a3      	str	r3, [r4, #8]
   d51ba:	4b05      	ldr	r3, [pc, #20]	; (d51d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d51bc:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d51be:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d51c0:	4608      	mov	r0, r1
{
  _serial = serial;
   d51c2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d51c4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d51c6:	4611      	mov	r1, r2
   d51c8:	f7ff fa64 	bl	d4694 <HAL_USB_USART_Init>
}
   d51cc:	4620      	mov	r0, r4
   d51ce:	bd10      	pop	{r4, pc}
   d51d0:	000d632c 	.word	0x000d632c

000d51d4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d51d4:	2200      	movs	r2, #0
   d51d6:	7c00      	ldrb	r0, [r0, #16]
   d51d8:	f7ff ba64 	b.w	d46a4 <HAL_USB_USART_Begin>

000d51dc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d51dc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d51de:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d51e0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d51e2:	2100      	movs	r1, #0
   d51e4:	f000 ff27 	bl	d6036 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d51e8:	4620      	mov	r0, r4
   d51ea:	bd10      	pop	{r4, pc}

000d51ec <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d51ec:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d51ee:	4d0e      	ldr	r5, [pc, #56]	; (d5228 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d51f0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d51f2:	a801      	add	r0, sp, #4
   d51f4:	f7ff fff2 	bl	d51dc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d51f8:	6829      	ldr	r1, [r5, #0]
   d51fa:	f011 0401 	ands.w	r4, r1, #1
   d51fe:	d110      	bne.n	d5222 <_Z16_fetch_usbserialv+0x36>
   d5200:	4628      	mov	r0, r5
   d5202:	f7fe ff4e 	bl	d40a2 <__cxa_guard_acquire>
   d5206:	b160      	cbz	r0, d5222 <_Z16_fetch_usbserialv+0x36>
   d5208:	aa01      	add	r2, sp, #4
   d520a:	4621      	mov	r1, r4
   d520c:	4807      	ldr	r0, [pc, #28]	; (d522c <_Z16_fetch_usbserialv+0x40>)
   d520e:	f7ff ffcd 	bl	d51ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5212:	4628      	mov	r0, r5
   d5214:	f7fe ff4a 	bl	d40ac <__cxa_guard_release>
   d5218:	4a05      	ldr	r2, [pc, #20]	; (d5230 <_Z16_fetch_usbserialv+0x44>)
   d521a:	4906      	ldr	r1, [pc, #24]	; (d5234 <_Z16_fetch_usbserialv+0x48>)
   d521c:	4803      	ldr	r0, [pc, #12]	; (d522c <_Z16_fetch_usbserialv+0x40>)
   d521e:	f000 f8b7 	bl	d5390 <__aeabi_atexit>
	return _usbserial;
}
   d5222:	4802      	ldr	r0, [pc, #8]	; (d522c <_Z16_fetch_usbserialv+0x40>)
   d5224:	b007      	add	sp, #28
   d5226:	bd30      	pop	{r4, r5, pc}
   d5228:	2003e6f8 	.word	0x2003e6f8
   d522c:	2003e6fc 	.word	0x2003e6fc
   d5230:	2003e440 	.word	0x2003e440
   d5234:	000d515d 	.word	0x000d515d

000d5238 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5238:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d523a:	4b0c      	ldr	r3, [pc, #48]	; (d526c <serialEventRun+0x34>)
   d523c:	b133      	cbz	r3, d524c <serialEventRun+0x14>
   d523e:	f7ff ffd5 	bl	d51ec <_Z16_fetch_usbserialv>
   d5242:	6803      	ldr	r3, [r0, #0]
   d5244:	691b      	ldr	r3, [r3, #16]
   d5246:	4798      	blx	r3
   d5248:	2800      	cmp	r0, #0
   d524a:	dc09      	bgt.n	d5260 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d524c:	4b08      	ldr	r3, [pc, #32]	; (d5270 <serialEventRun+0x38>)
   d524e:	b163      	cbz	r3, d526a <serialEventRun+0x32>
   d5250:	f7ff ff42 	bl	d50d8 <_Z22__fetch_global_Serial1v>
   d5254:	6803      	ldr	r3, [r0, #0]
   d5256:	691b      	ldr	r3, [r3, #16]
   d5258:	4798      	blx	r3
   d525a:	2800      	cmp	r0, #0
   d525c:	dc03      	bgt.n	d5266 <serialEventRun+0x2e>
   d525e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5260:	f3af 8000 	nop.w
   d5264:	e7f2      	b.n	d524c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5266:	f3af 8000 	nop.w
   d526a:	bd08      	pop	{r3, pc}
	...

000d5274 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5274:	b508      	push	{r3, lr}
	serialEventRun();
   d5276:	f7ff ffdf 	bl	d5238 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d527a:	f7ff f953 	bl	d4524 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d527e:	4b01      	ldr	r3, [pc, #4]	; (d5284 <_post_loop+0x10>)
   d5280:	6018      	str	r0, [r3, #0]
   d5282:	bd08      	pop	{r3, pc}
   d5284:	2003e714 	.word	0x2003e714

000d5288 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5288:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d528a:	2300      	movs	r3, #0
   d528c:	9300      	str	r3, [sp, #0]
   d528e:	461a      	mov	r2, r3
   d5290:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5294:	f7ff fa50 	bl	d4738 <system_ctrl_set_result>
}
   d5298:	b003      	add	sp, #12
   d529a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d52a0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d52a0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d52a2:	8843      	ldrh	r3, [r0, #2]
   d52a4:	2b0a      	cmp	r3, #10
   d52a6:	d008      	beq.n	d52ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d52a8:	2b50      	cmp	r3, #80	; 0x50
   d52aa:	d109      	bne.n	d52c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d52ac:	4b09      	ldr	r3, [pc, #36]	; (d52d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d52ae:	681b      	ldr	r3, [r3, #0]
   d52b0:	b13b      	cbz	r3, d52c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d52b2:	b003      	add	sp, #12
   d52b4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d52b8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d52ba:	f7ff ffe5 	bl	d5288 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d52be:	e006      	b.n	d52ce <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d52c0:	2300      	movs	r3, #0
   d52c2:	9300      	str	r3, [sp, #0]
   d52c4:	461a      	mov	r2, r3
   d52c6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d52ca:	f7ff fa35 	bl	d4738 <system_ctrl_set_result>
        break;
    }
}
   d52ce:	b003      	add	sp, #12
   d52d0:	f85d fb04 	ldr.w	pc, [sp], #4
   d52d4:	2003e710 	.word	0x2003e710

000d52d8 <module_user_init_hook>:

void module_user_init_hook()
{
   d52d8:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d52da:	f7ff f91b 	bl	d4514 <HAL_RNG_GetRandomNumber>
   d52de:	4604      	mov	r4, r0
    srand(seed);
   d52e0:	f000 feb2 	bl	d6048 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d52e4:	4b07      	ldr	r3, [pc, #28]	; (d5304 <module_user_init_hook+0x2c>)
   d52e6:	b113      	cbz	r3, d52ee <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d52e8:	4620      	mov	r0, r4
   d52ea:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d52ee:	2100      	movs	r1, #0
   d52f0:	4804      	ldr	r0, [pc, #16]	; (d5304 <module_user_init_hook+0x2c>)
   d52f2:	f7ff fa2b 	bl	d474c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d52f6:	2100      	movs	r1, #0
   d52f8:	4803      	ldr	r0, [pc, #12]	; (d5308 <module_user_init_hook+0x30>)
}
   d52fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d52fe:	f7ff ba11 	b.w	d4724 <system_ctrl_set_app_request_handler>
   d5302:	bf00      	nop
   d5304:	00000000 	.word	0x00000000
   d5308:	000d52a1 	.word	0x000d52a1

000d530c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d530c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d530e:	4d0b      	ldr	r5, [pc, #44]	; (d533c <_Z19__fetch_global_Wirev+0x30>)
   d5310:	6829      	ldr	r1, [r5, #0]
   d5312:	f011 0401 	ands.w	r4, r1, #1
   d5316:	d10f      	bne.n	d5338 <_Z19__fetch_global_Wirev+0x2c>
   d5318:	4628      	mov	r0, r5
   d531a:	f7fe fec2 	bl	d40a2 <__cxa_guard_acquire>
   d531e:	b158      	cbz	r0, d5338 <_Z19__fetch_global_Wirev+0x2c>
   d5320:	4621      	mov	r1, r4
   d5322:	4807      	ldr	r0, [pc, #28]	; (d5340 <_Z19__fetch_global_Wirev+0x34>)
   d5324:	f7ff fb46 	bl	d49b4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d5328:	4628      	mov	r0, r5
   d532a:	f7fe febf 	bl	d40ac <__cxa_guard_release>
   d532e:	4a05      	ldr	r2, [pc, #20]	; (d5344 <_Z19__fetch_global_Wirev+0x38>)
   d5330:	4905      	ldr	r1, [pc, #20]	; (d5348 <_Z19__fetch_global_Wirev+0x3c>)
   d5332:	4803      	ldr	r0, [pc, #12]	; (d5340 <_Z19__fetch_global_Wirev+0x34>)
   d5334:	f000 f82c 	bl	d5390 <__aeabi_atexit>
	return wire;
}
   d5338:	4801      	ldr	r0, [pc, #4]	; (d5340 <_Z19__fetch_global_Wirev+0x34>)
   d533a:	bd38      	pop	{r3, r4, r5, pc}
   d533c:	2003e718 	.word	0x2003e718
   d5340:	2003e71c 	.word	0x2003e71c
   d5344:	2003e440 	.word	0x2003e440
   d5348:	000d495d 	.word	0x000d495d

000d534c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d534c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d534e:	4c0c      	ldr	r4, [pc, #48]	; (d5380 <_GLOBAL__sub_I_SPI+0x34>)
   d5350:	4e0c      	ldr	r6, [pc, #48]	; (d5384 <_GLOBAL__sub_I_SPI+0x38>)
   d5352:	4d0d      	ldr	r5, [pc, #52]	; (d5388 <_GLOBAL__sub_I_SPI+0x3c>)
   d5354:	2100      	movs	r1, #0
   d5356:	4620      	mov	r0, r4
   d5358:	f7ff fe54 	bl	d5004 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d535c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d535e:	4c0b      	ldr	r4, [pc, #44]	; (d538c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d5360:	4632      	mov	r2, r6
   d5362:	4629      	mov	r1, r5
   d5364:	f000 f814 	bl	d5390 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d5368:	2101      	movs	r1, #1
   d536a:	4620      	mov	r0, r4
   d536c:	f7ff fe4a 	bl	d5004 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d5370:	4632      	mov	r2, r6
   d5372:	4629      	mov	r1, r5
   d5374:	4620      	mov	r0, r4
   d5376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d537a:	f000 b809 	b.w	d5390 <__aeabi_atexit>
   d537e:	bf00      	nop
   d5380:	2003e730 	.word	0x2003e730
   d5384:	2003e440 	.word	0x2003e440
   d5388:	000d4ff5 	.word	0x000d4ff5
   d538c:	2003e740 	.word	0x2003e740

000d5390 <__aeabi_atexit>:
   d5390:	460b      	mov	r3, r1
   d5392:	4601      	mov	r1, r0
   d5394:	4618      	mov	r0, r3
   d5396:	f000 be35 	b.w	d6004 <__cxa_atexit>
	...

000d539c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d539c:	4b24      	ldr	r3, [pc, #144]	; (d5430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d539e:	681a      	ldr	r2, [r3, #0]
   d53a0:	07d0      	lsls	r0, r2, #31
   d53a2:	bf5c      	itt	pl
   d53a4:	2201      	movpl	r2, #1
   d53a6:	601a      	strpl	r2, [r3, #0]
   d53a8:	4b22      	ldr	r3, [pc, #136]	; (d5434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d53aa:	681a      	ldr	r2, [r3, #0]
   d53ac:	07d1      	lsls	r1, r2, #31
   d53ae:	bf5c      	itt	pl
   d53b0:	2201      	movpl	r2, #1
   d53b2:	601a      	strpl	r2, [r3, #0]
   d53b4:	4b20      	ldr	r3, [pc, #128]	; (d5438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d53b6:	681a      	ldr	r2, [r3, #0]
   d53b8:	07d2      	lsls	r2, r2, #31
   d53ba:	bf5c      	itt	pl
   d53bc:	2201      	movpl	r2, #1
   d53be:	601a      	strpl	r2, [r3, #0]
   d53c0:	4b1e      	ldr	r3, [pc, #120]	; (d543c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d53c2:	681a      	ldr	r2, [r3, #0]
   d53c4:	07d0      	lsls	r0, r2, #31
   d53c6:	bf5c      	itt	pl
   d53c8:	2201      	movpl	r2, #1
   d53ca:	601a      	strpl	r2, [r3, #0]
   d53cc:	4b1c      	ldr	r3, [pc, #112]	; (d5440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d53ce:	681a      	ldr	r2, [r3, #0]
   d53d0:	07d1      	lsls	r1, r2, #31
   d53d2:	bf5c      	itt	pl
   d53d4:	2201      	movpl	r2, #1
   d53d6:	601a      	strpl	r2, [r3, #0]
   d53d8:	4b1a      	ldr	r3, [pc, #104]	; (d5444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d53da:	681a      	ldr	r2, [r3, #0]
   d53dc:	07d2      	lsls	r2, r2, #31
   d53de:	bf5c      	itt	pl
   d53e0:	2201      	movpl	r2, #1
   d53e2:	601a      	strpl	r2, [r3, #0]
   d53e4:	4b18      	ldr	r3, [pc, #96]	; (d5448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d53e6:	681a      	ldr	r2, [r3, #0]
   d53e8:	07d0      	lsls	r0, r2, #31
   d53ea:	bf5c      	itt	pl
   d53ec:	2201      	movpl	r2, #1
   d53ee:	601a      	strpl	r2, [r3, #0]
   d53f0:	4b16      	ldr	r3, [pc, #88]	; (d544c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d53f2:	681a      	ldr	r2, [r3, #0]
   d53f4:	07d1      	lsls	r1, r2, #31
   d53f6:	bf5c      	itt	pl
   d53f8:	2201      	movpl	r2, #1
   d53fa:	601a      	strpl	r2, [r3, #0]
   d53fc:	4b14      	ldr	r3, [pc, #80]	; (d5450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d53fe:	681a      	ldr	r2, [r3, #0]
   d5400:	07d2      	lsls	r2, r2, #31
   d5402:	bf5c      	itt	pl
   d5404:	2201      	movpl	r2, #1
   d5406:	601a      	strpl	r2, [r3, #0]
   d5408:	4b12      	ldr	r3, [pc, #72]	; (d5454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d540a:	681a      	ldr	r2, [r3, #0]
   d540c:	07d0      	lsls	r0, r2, #31
   d540e:	bf5c      	itt	pl
   d5410:	2201      	movpl	r2, #1
   d5412:	601a      	strpl	r2, [r3, #0]
   d5414:	4b10      	ldr	r3, [pc, #64]	; (d5458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5416:	681a      	ldr	r2, [r3, #0]
   d5418:	07d1      	lsls	r1, r2, #31
   d541a:	bf5c      	itt	pl
   d541c:	2201      	movpl	r2, #1
   d541e:	601a      	strpl	r2, [r3, #0]
   d5420:	4b0e      	ldr	r3, [pc, #56]	; (d545c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5422:	681a      	ldr	r2, [r3, #0]
   d5424:	07d2      	lsls	r2, r2, #31
   d5426:	bf5c      	itt	pl
   d5428:	2201      	movpl	r2, #1
   d542a:	601a      	strpl	r2, [r3, #0]
   d542c:	4770      	bx	lr
   d542e:	bf00      	nop
   d5430:	2003e77c 	.word	0x2003e77c
   d5434:	2003e778 	.word	0x2003e778
   d5438:	2003e774 	.word	0x2003e774
   d543c:	2003e770 	.word	0x2003e770
   d5440:	2003e76c 	.word	0x2003e76c
   d5444:	2003e768 	.word	0x2003e768
   d5448:	2003e764 	.word	0x2003e764
   d544c:	2003e760 	.word	0x2003e760
   d5450:	2003e75c 	.word	0x2003e75c
   d5454:	2003e758 	.word	0x2003e758
   d5458:	2003e754 	.word	0x2003e754
   d545c:	2003e750 	.word	0x2003e750

000d5460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5460:	4b18      	ldr	r3, [pc, #96]	; (d54c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5462:	681a      	ldr	r2, [r3, #0]
   d5464:	07d1      	lsls	r1, r2, #31
   d5466:	bf5c      	itt	pl
   d5468:	2201      	movpl	r2, #1
   d546a:	601a      	strpl	r2, [r3, #0]
   d546c:	4b16      	ldr	r3, [pc, #88]	; (d54c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d546e:	681a      	ldr	r2, [r3, #0]
   d5470:	07d2      	lsls	r2, r2, #31
   d5472:	bf5c      	itt	pl
   d5474:	2201      	movpl	r2, #1
   d5476:	601a      	strpl	r2, [r3, #0]
   d5478:	4b14      	ldr	r3, [pc, #80]	; (d54cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d547a:	681a      	ldr	r2, [r3, #0]
   d547c:	07d0      	lsls	r0, r2, #31
   d547e:	bf5c      	itt	pl
   d5480:	2201      	movpl	r2, #1
   d5482:	601a      	strpl	r2, [r3, #0]
   d5484:	4b12      	ldr	r3, [pc, #72]	; (d54d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5486:	681a      	ldr	r2, [r3, #0]
   d5488:	07d1      	lsls	r1, r2, #31
   d548a:	bf5c      	itt	pl
   d548c:	2201      	movpl	r2, #1
   d548e:	601a      	strpl	r2, [r3, #0]
   d5490:	4b10      	ldr	r3, [pc, #64]	; (d54d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5492:	681a      	ldr	r2, [r3, #0]
   d5494:	07d2      	lsls	r2, r2, #31
   d5496:	bf5c      	itt	pl
   d5498:	2201      	movpl	r2, #1
   d549a:	601a      	strpl	r2, [r3, #0]
   d549c:	4b0e      	ldr	r3, [pc, #56]	; (d54d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d549e:	681a      	ldr	r2, [r3, #0]
   d54a0:	07d0      	lsls	r0, r2, #31
   d54a2:	bf5c      	itt	pl
   d54a4:	2201      	movpl	r2, #1
   d54a6:	601a      	strpl	r2, [r3, #0]
   d54a8:	4b0c      	ldr	r3, [pc, #48]	; (d54dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d54aa:	681a      	ldr	r2, [r3, #0]
   d54ac:	07d1      	lsls	r1, r2, #31
   d54ae:	bf5c      	itt	pl
   d54b0:	2201      	movpl	r2, #1
   d54b2:	601a      	strpl	r2, [r3, #0]
   d54b4:	4b0a      	ldr	r3, [pc, #40]	; (d54e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d54b6:	681a      	ldr	r2, [r3, #0]
   d54b8:	07d2      	lsls	r2, r2, #31
   d54ba:	bf5c      	itt	pl
   d54bc:	2201      	movpl	r2, #1
   d54be:	601a      	strpl	r2, [r3, #0]
   d54c0:	4770      	bx	lr
   d54c2:	bf00      	nop
   d54c4:	2003e79c 	.word	0x2003e79c
   d54c8:	2003e798 	.word	0x2003e798
   d54cc:	2003e794 	.word	0x2003e794
   d54d0:	2003e790 	.word	0x2003e790
   d54d4:	2003e78c 	.word	0x2003e78c
   d54d8:	2003e788 	.word	0x2003e788
   d54dc:	2003e784 	.word	0x2003e784
   d54e0:	2003e780 	.word	0x2003e780

000d54e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d54e4:	4b18      	ldr	r3, [pc, #96]	; (d5548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d54e6:	681a      	ldr	r2, [r3, #0]
   d54e8:	07d1      	lsls	r1, r2, #31
   d54ea:	bf5c      	itt	pl
   d54ec:	2201      	movpl	r2, #1
   d54ee:	601a      	strpl	r2, [r3, #0]
   d54f0:	4b16      	ldr	r3, [pc, #88]	; (d554c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d54f2:	681a      	ldr	r2, [r3, #0]
   d54f4:	07d2      	lsls	r2, r2, #31
   d54f6:	bf5c      	itt	pl
   d54f8:	2201      	movpl	r2, #1
   d54fa:	601a      	strpl	r2, [r3, #0]
   d54fc:	4b14      	ldr	r3, [pc, #80]	; (d5550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d54fe:	681a      	ldr	r2, [r3, #0]
   d5500:	07d0      	lsls	r0, r2, #31
   d5502:	bf5c      	itt	pl
   d5504:	2201      	movpl	r2, #1
   d5506:	601a      	strpl	r2, [r3, #0]
   d5508:	4b12      	ldr	r3, [pc, #72]	; (d5554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d550a:	681a      	ldr	r2, [r3, #0]
   d550c:	07d1      	lsls	r1, r2, #31
   d550e:	bf5c      	itt	pl
   d5510:	2201      	movpl	r2, #1
   d5512:	601a      	strpl	r2, [r3, #0]
   d5514:	4b10      	ldr	r3, [pc, #64]	; (d5558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5516:	681a      	ldr	r2, [r3, #0]
   d5518:	07d2      	lsls	r2, r2, #31
   d551a:	bf5c      	itt	pl
   d551c:	2201      	movpl	r2, #1
   d551e:	601a      	strpl	r2, [r3, #0]
   d5520:	4b0e      	ldr	r3, [pc, #56]	; (d555c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5522:	681a      	ldr	r2, [r3, #0]
   d5524:	07d0      	lsls	r0, r2, #31
   d5526:	bf5c      	itt	pl
   d5528:	2201      	movpl	r2, #1
   d552a:	601a      	strpl	r2, [r3, #0]
   d552c:	4b0c      	ldr	r3, [pc, #48]	; (d5560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d552e:	681a      	ldr	r2, [r3, #0]
   d5530:	07d1      	lsls	r1, r2, #31
   d5532:	bf5c      	itt	pl
   d5534:	2201      	movpl	r2, #1
   d5536:	601a      	strpl	r2, [r3, #0]
   d5538:	4b0a      	ldr	r3, [pc, #40]	; (d5564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d553a:	681a      	ldr	r2, [r3, #0]
   d553c:	07d2      	lsls	r2, r2, #31
   d553e:	bf5c      	itt	pl
   d5540:	2201      	movpl	r2, #1
   d5542:	601a      	strpl	r2, [r3, #0]
   d5544:	4770      	bx	lr
   d5546:	bf00      	nop
   d5548:	2003e7bc 	.word	0x2003e7bc
   d554c:	2003e7b8 	.word	0x2003e7b8
   d5550:	2003e7b4 	.word	0x2003e7b4
   d5554:	2003e7b0 	.word	0x2003e7b0
   d5558:	2003e7ac 	.word	0x2003e7ac
   d555c:	2003e7a8 	.word	0x2003e7a8
   d5560:	2003e7a4 	.word	0x2003e7a4
   d5564:	2003e7a0 	.word	0x2003e7a0

000d5568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5568:	4b24      	ldr	r3, [pc, #144]	; (d55fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d556a:	681a      	ldr	r2, [r3, #0]
   d556c:	07d0      	lsls	r0, r2, #31
   d556e:	bf5c      	itt	pl
   d5570:	2201      	movpl	r2, #1
   d5572:	601a      	strpl	r2, [r3, #0]
   d5574:	4b22      	ldr	r3, [pc, #136]	; (d5600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5576:	681a      	ldr	r2, [r3, #0]
   d5578:	07d1      	lsls	r1, r2, #31
   d557a:	bf5c      	itt	pl
   d557c:	2201      	movpl	r2, #1
   d557e:	601a      	strpl	r2, [r3, #0]
   d5580:	4b20      	ldr	r3, [pc, #128]	; (d5604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5582:	681a      	ldr	r2, [r3, #0]
   d5584:	07d2      	lsls	r2, r2, #31
   d5586:	bf5c      	itt	pl
   d5588:	2201      	movpl	r2, #1
   d558a:	601a      	strpl	r2, [r3, #0]
   d558c:	4b1e      	ldr	r3, [pc, #120]	; (d5608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d558e:	681a      	ldr	r2, [r3, #0]
   d5590:	07d0      	lsls	r0, r2, #31
   d5592:	bf5c      	itt	pl
   d5594:	2201      	movpl	r2, #1
   d5596:	601a      	strpl	r2, [r3, #0]
   d5598:	4b1c      	ldr	r3, [pc, #112]	; (d560c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d559a:	681a      	ldr	r2, [r3, #0]
   d559c:	07d1      	lsls	r1, r2, #31
   d559e:	bf5c      	itt	pl
   d55a0:	2201      	movpl	r2, #1
   d55a2:	601a      	strpl	r2, [r3, #0]
   d55a4:	4b1a      	ldr	r3, [pc, #104]	; (d5610 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d55a6:	681a      	ldr	r2, [r3, #0]
   d55a8:	07d2      	lsls	r2, r2, #31
   d55aa:	bf5c      	itt	pl
   d55ac:	2201      	movpl	r2, #1
   d55ae:	601a      	strpl	r2, [r3, #0]
   d55b0:	4b18      	ldr	r3, [pc, #96]	; (d5614 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d55b2:	681a      	ldr	r2, [r3, #0]
   d55b4:	07d0      	lsls	r0, r2, #31
   d55b6:	bf5c      	itt	pl
   d55b8:	2201      	movpl	r2, #1
   d55ba:	601a      	strpl	r2, [r3, #0]
   d55bc:	4b16      	ldr	r3, [pc, #88]	; (d5618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d55be:	681a      	ldr	r2, [r3, #0]
   d55c0:	07d1      	lsls	r1, r2, #31
   d55c2:	bf5c      	itt	pl
   d55c4:	2201      	movpl	r2, #1
   d55c6:	601a      	strpl	r2, [r3, #0]
   d55c8:	4b14      	ldr	r3, [pc, #80]	; (d561c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d55ca:	681a      	ldr	r2, [r3, #0]
   d55cc:	07d2      	lsls	r2, r2, #31
   d55ce:	bf5c      	itt	pl
   d55d0:	2201      	movpl	r2, #1
   d55d2:	601a      	strpl	r2, [r3, #0]
   d55d4:	4b12      	ldr	r3, [pc, #72]	; (d5620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d55d6:	681a      	ldr	r2, [r3, #0]
   d55d8:	07d0      	lsls	r0, r2, #31
   d55da:	bf5c      	itt	pl
   d55dc:	2201      	movpl	r2, #1
   d55de:	601a      	strpl	r2, [r3, #0]
   d55e0:	4b10      	ldr	r3, [pc, #64]	; (d5624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d55e2:	681a      	ldr	r2, [r3, #0]
   d55e4:	07d1      	lsls	r1, r2, #31
   d55e6:	bf5c      	itt	pl
   d55e8:	2201      	movpl	r2, #1
   d55ea:	601a      	strpl	r2, [r3, #0]
   d55ec:	4b0e      	ldr	r3, [pc, #56]	; (d5628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d55ee:	681a      	ldr	r2, [r3, #0]
   d55f0:	07d2      	lsls	r2, r2, #31
   d55f2:	bf5c      	itt	pl
   d55f4:	2201      	movpl	r2, #1
   d55f6:	601a      	strpl	r2, [r3, #0]
   d55f8:	4770      	bx	lr
   d55fa:	bf00      	nop
   d55fc:	2003e7ec 	.word	0x2003e7ec
   d5600:	2003e7e8 	.word	0x2003e7e8
   d5604:	2003e7e4 	.word	0x2003e7e4
   d5608:	2003e7e0 	.word	0x2003e7e0
   d560c:	2003e7dc 	.word	0x2003e7dc
   d5610:	2003e7d8 	.word	0x2003e7d8
   d5614:	2003e7d4 	.word	0x2003e7d4
   d5618:	2003e7d0 	.word	0x2003e7d0
   d561c:	2003e7cc 	.word	0x2003e7cc
   d5620:	2003e7c8 	.word	0x2003e7c8
   d5624:	2003e7c4 	.word	0x2003e7c4
   d5628:	2003e7c0 	.word	0x2003e7c0

000d562c <__aeabi_drsub>:
   d562c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5630:	e002      	b.n	d5638 <__adddf3>
   d5632:	bf00      	nop

000d5634 <__aeabi_dsub>:
   d5634:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5638 <__adddf3>:
   d5638:	b530      	push	{r4, r5, lr}
   d563a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d563e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5642:	ea94 0f05 	teq	r4, r5
   d5646:	bf08      	it	eq
   d5648:	ea90 0f02 	teqeq	r0, r2
   d564c:	bf1f      	itttt	ne
   d564e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5652:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5656:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d565a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d565e:	f000 80e2 	beq.w	d5826 <__adddf3+0x1ee>
   d5662:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5666:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d566a:	bfb8      	it	lt
   d566c:	426d      	neglt	r5, r5
   d566e:	dd0c      	ble.n	d568a <__adddf3+0x52>
   d5670:	442c      	add	r4, r5
   d5672:	ea80 0202 	eor.w	r2, r0, r2
   d5676:	ea81 0303 	eor.w	r3, r1, r3
   d567a:	ea82 0000 	eor.w	r0, r2, r0
   d567e:	ea83 0101 	eor.w	r1, r3, r1
   d5682:	ea80 0202 	eor.w	r2, r0, r2
   d5686:	ea81 0303 	eor.w	r3, r1, r3
   d568a:	2d36      	cmp	r5, #54	; 0x36
   d568c:	bf88      	it	hi
   d568e:	bd30      	pophi	{r4, r5, pc}
   d5690:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5694:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5698:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d569c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d56a0:	d002      	beq.n	d56a8 <__adddf3+0x70>
   d56a2:	4240      	negs	r0, r0
   d56a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d56a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d56ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d56b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d56b4:	d002      	beq.n	d56bc <__adddf3+0x84>
   d56b6:	4252      	negs	r2, r2
   d56b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d56bc:	ea94 0f05 	teq	r4, r5
   d56c0:	f000 80a7 	beq.w	d5812 <__adddf3+0x1da>
   d56c4:	f1a4 0401 	sub.w	r4, r4, #1
   d56c8:	f1d5 0e20 	rsbs	lr, r5, #32
   d56cc:	db0d      	blt.n	d56ea <__adddf3+0xb2>
   d56ce:	fa02 fc0e 	lsl.w	ip, r2, lr
   d56d2:	fa22 f205 	lsr.w	r2, r2, r5
   d56d6:	1880      	adds	r0, r0, r2
   d56d8:	f141 0100 	adc.w	r1, r1, #0
   d56dc:	fa03 f20e 	lsl.w	r2, r3, lr
   d56e0:	1880      	adds	r0, r0, r2
   d56e2:	fa43 f305 	asr.w	r3, r3, r5
   d56e6:	4159      	adcs	r1, r3
   d56e8:	e00e      	b.n	d5708 <__adddf3+0xd0>
   d56ea:	f1a5 0520 	sub.w	r5, r5, #32
   d56ee:	f10e 0e20 	add.w	lr, lr, #32
   d56f2:	2a01      	cmp	r2, #1
   d56f4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d56f8:	bf28      	it	cs
   d56fa:	f04c 0c02 	orrcs.w	ip, ip, #2
   d56fe:	fa43 f305 	asr.w	r3, r3, r5
   d5702:	18c0      	adds	r0, r0, r3
   d5704:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5708:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d570c:	d507      	bpl.n	d571e <__adddf3+0xe6>
   d570e:	f04f 0e00 	mov.w	lr, #0
   d5712:	f1dc 0c00 	rsbs	ip, ip, #0
   d5716:	eb7e 0000 	sbcs.w	r0, lr, r0
   d571a:	eb6e 0101 	sbc.w	r1, lr, r1
   d571e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5722:	d31b      	bcc.n	d575c <__adddf3+0x124>
   d5724:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5728:	d30c      	bcc.n	d5744 <__adddf3+0x10c>
   d572a:	0849      	lsrs	r1, r1, #1
   d572c:	ea5f 0030 	movs.w	r0, r0, rrx
   d5730:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5734:	f104 0401 	add.w	r4, r4, #1
   d5738:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d573c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5740:	f080 809a 	bcs.w	d5878 <__adddf3+0x240>
   d5744:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5748:	bf08      	it	eq
   d574a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d574e:	f150 0000 	adcs.w	r0, r0, #0
   d5752:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5756:	ea41 0105 	orr.w	r1, r1, r5
   d575a:	bd30      	pop	{r4, r5, pc}
   d575c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5760:	4140      	adcs	r0, r0
   d5762:	eb41 0101 	adc.w	r1, r1, r1
   d5766:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d576a:	f1a4 0401 	sub.w	r4, r4, #1
   d576e:	d1e9      	bne.n	d5744 <__adddf3+0x10c>
   d5770:	f091 0f00 	teq	r1, #0
   d5774:	bf04      	itt	eq
   d5776:	4601      	moveq	r1, r0
   d5778:	2000      	moveq	r0, #0
   d577a:	fab1 f381 	clz	r3, r1
   d577e:	bf08      	it	eq
   d5780:	3320      	addeq	r3, #32
   d5782:	f1a3 030b 	sub.w	r3, r3, #11
   d5786:	f1b3 0220 	subs.w	r2, r3, #32
   d578a:	da0c      	bge.n	d57a6 <__adddf3+0x16e>
   d578c:	320c      	adds	r2, #12
   d578e:	dd08      	ble.n	d57a2 <__adddf3+0x16a>
   d5790:	f102 0c14 	add.w	ip, r2, #20
   d5794:	f1c2 020c 	rsb	r2, r2, #12
   d5798:	fa01 f00c 	lsl.w	r0, r1, ip
   d579c:	fa21 f102 	lsr.w	r1, r1, r2
   d57a0:	e00c      	b.n	d57bc <__adddf3+0x184>
   d57a2:	f102 0214 	add.w	r2, r2, #20
   d57a6:	bfd8      	it	le
   d57a8:	f1c2 0c20 	rsble	ip, r2, #32
   d57ac:	fa01 f102 	lsl.w	r1, r1, r2
   d57b0:	fa20 fc0c 	lsr.w	ip, r0, ip
   d57b4:	bfdc      	itt	le
   d57b6:	ea41 010c 	orrle.w	r1, r1, ip
   d57ba:	4090      	lslle	r0, r2
   d57bc:	1ae4      	subs	r4, r4, r3
   d57be:	bfa2      	ittt	ge
   d57c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d57c4:	4329      	orrge	r1, r5
   d57c6:	bd30      	popge	{r4, r5, pc}
   d57c8:	ea6f 0404 	mvn.w	r4, r4
   d57cc:	3c1f      	subs	r4, #31
   d57ce:	da1c      	bge.n	d580a <__adddf3+0x1d2>
   d57d0:	340c      	adds	r4, #12
   d57d2:	dc0e      	bgt.n	d57f2 <__adddf3+0x1ba>
   d57d4:	f104 0414 	add.w	r4, r4, #20
   d57d8:	f1c4 0220 	rsb	r2, r4, #32
   d57dc:	fa20 f004 	lsr.w	r0, r0, r4
   d57e0:	fa01 f302 	lsl.w	r3, r1, r2
   d57e4:	ea40 0003 	orr.w	r0, r0, r3
   d57e8:	fa21 f304 	lsr.w	r3, r1, r4
   d57ec:	ea45 0103 	orr.w	r1, r5, r3
   d57f0:	bd30      	pop	{r4, r5, pc}
   d57f2:	f1c4 040c 	rsb	r4, r4, #12
   d57f6:	f1c4 0220 	rsb	r2, r4, #32
   d57fa:	fa20 f002 	lsr.w	r0, r0, r2
   d57fe:	fa01 f304 	lsl.w	r3, r1, r4
   d5802:	ea40 0003 	orr.w	r0, r0, r3
   d5806:	4629      	mov	r1, r5
   d5808:	bd30      	pop	{r4, r5, pc}
   d580a:	fa21 f004 	lsr.w	r0, r1, r4
   d580e:	4629      	mov	r1, r5
   d5810:	bd30      	pop	{r4, r5, pc}
   d5812:	f094 0f00 	teq	r4, #0
   d5816:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d581a:	bf06      	itte	eq
   d581c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5820:	3401      	addeq	r4, #1
   d5822:	3d01      	subne	r5, #1
   d5824:	e74e      	b.n	d56c4 <__adddf3+0x8c>
   d5826:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d582a:	bf18      	it	ne
   d582c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5830:	d029      	beq.n	d5886 <__adddf3+0x24e>
   d5832:	ea94 0f05 	teq	r4, r5
   d5836:	bf08      	it	eq
   d5838:	ea90 0f02 	teqeq	r0, r2
   d583c:	d005      	beq.n	d584a <__adddf3+0x212>
   d583e:	ea54 0c00 	orrs.w	ip, r4, r0
   d5842:	bf04      	itt	eq
   d5844:	4619      	moveq	r1, r3
   d5846:	4610      	moveq	r0, r2
   d5848:	bd30      	pop	{r4, r5, pc}
   d584a:	ea91 0f03 	teq	r1, r3
   d584e:	bf1e      	ittt	ne
   d5850:	2100      	movne	r1, #0
   d5852:	2000      	movne	r0, #0
   d5854:	bd30      	popne	{r4, r5, pc}
   d5856:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d585a:	d105      	bne.n	d5868 <__adddf3+0x230>
   d585c:	0040      	lsls	r0, r0, #1
   d585e:	4149      	adcs	r1, r1
   d5860:	bf28      	it	cs
   d5862:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5866:	bd30      	pop	{r4, r5, pc}
   d5868:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d586c:	bf3c      	itt	cc
   d586e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5872:	bd30      	popcc	{r4, r5, pc}
   d5874:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5878:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d587c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5880:	f04f 0000 	mov.w	r0, #0
   d5884:	bd30      	pop	{r4, r5, pc}
   d5886:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d588a:	bf1a      	itte	ne
   d588c:	4619      	movne	r1, r3
   d588e:	4610      	movne	r0, r2
   d5890:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5894:	bf1c      	itt	ne
   d5896:	460b      	movne	r3, r1
   d5898:	4602      	movne	r2, r0
   d589a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d589e:	bf06      	itte	eq
   d58a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d58a4:	ea91 0f03 	teqeq	r1, r3
   d58a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d58ac:	bd30      	pop	{r4, r5, pc}
   d58ae:	bf00      	nop

000d58b0 <__aeabi_ui2d>:
   d58b0:	f090 0f00 	teq	r0, #0
   d58b4:	bf04      	itt	eq
   d58b6:	2100      	moveq	r1, #0
   d58b8:	4770      	bxeq	lr
   d58ba:	b530      	push	{r4, r5, lr}
   d58bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d58c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d58c4:	f04f 0500 	mov.w	r5, #0
   d58c8:	f04f 0100 	mov.w	r1, #0
   d58cc:	e750      	b.n	d5770 <__adddf3+0x138>
   d58ce:	bf00      	nop

000d58d0 <__aeabi_i2d>:
   d58d0:	f090 0f00 	teq	r0, #0
   d58d4:	bf04      	itt	eq
   d58d6:	2100      	moveq	r1, #0
   d58d8:	4770      	bxeq	lr
   d58da:	b530      	push	{r4, r5, lr}
   d58dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d58e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d58e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d58e8:	bf48      	it	mi
   d58ea:	4240      	negmi	r0, r0
   d58ec:	f04f 0100 	mov.w	r1, #0
   d58f0:	e73e      	b.n	d5770 <__adddf3+0x138>
   d58f2:	bf00      	nop

000d58f4 <__aeabi_f2d>:
   d58f4:	0042      	lsls	r2, r0, #1
   d58f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d58fa:	ea4f 0131 	mov.w	r1, r1, rrx
   d58fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5902:	bf1f      	itttt	ne
   d5904:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5908:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d590c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5910:	4770      	bxne	lr
   d5912:	f092 0f00 	teq	r2, #0
   d5916:	bf14      	ite	ne
   d5918:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d591c:	4770      	bxeq	lr
   d591e:	b530      	push	{r4, r5, lr}
   d5920:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5924:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5928:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d592c:	e720      	b.n	d5770 <__adddf3+0x138>
   d592e:	bf00      	nop

000d5930 <__aeabi_ul2d>:
   d5930:	ea50 0201 	orrs.w	r2, r0, r1
   d5934:	bf08      	it	eq
   d5936:	4770      	bxeq	lr
   d5938:	b530      	push	{r4, r5, lr}
   d593a:	f04f 0500 	mov.w	r5, #0
   d593e:	e00a      	b.n	d5956 <__aeabi_l2d+0x16>

000d5940 <__aeabi_l2d>:
   d5940:	ea50 0201 	orrs.w	r2, r0, r1
   d5944:	bf08      	it	eq
   d5946:	4770      	bxeq	lr
   d5948:	b530      	push	{r4, r5, lr}
   d594a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d594e:	d502      	bpl.n	d5956 <__aeabi_l2d+0x16>
   d5950:	4240      	negs	r0, r0
   d5952:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5956:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d595a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d595e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5962:	f43f aedc 	beq.w	d571e <__adddf3+0xe6>
   d5966:	f04f 0203 	mov.w	r2, #3
   d596a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d596e:	bf18      	it	ne
   d5970:	3203      	addne	r2, #3
   d5972:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5976:	bf18      	it	ne
   d5978:	3203      	addne	r2, #3
   d597a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d597e:	f1c2 0320 	rsb	r3, r2, #32
   d5982:	fa00 fc03 	lsl.w	ip, r0, r3
   d5986:	fa20 f002 	lsr.w	r0, r0, r2
   d598a:	fa01 fe03 	lsl.w	lr, r1, r3
   d598e:	ea40 000e 	orr.w	r0, r0, lr
   d5992:	fa21 f102 	lsr.w	r1, r1, r2
   d5996:	4414      	add	r4, r2
   d5998:	e6c1      	b.n	d571e <__adddf3+0xe6>
   d599a:	bf00      	nop

000d599c <__aeabi_dmul>:
   d599c:	b570      	push	{r4, r5, r6, lr}
   d599e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d59a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d59a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d59aa:	bf1d      	ittte	ne
   d59ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d59b0:	ea94 0f0c 	teqne	r4, ip
   d59b4:	ea95 0f0c 	teqne	r5, ip
   d59b8:	f000 f8de 	bleq	d5b78 <__aeabi_dmul+0x1dc>
   d59bc:	442c      	add	r4, r5
   d59be:	ea81 0603 	eor.w	r6, r1, r3
   d59c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d59c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d59ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d59ce:	bf18      	it	ne
   d59d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d59d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d59d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d59dc:	d038      	beq.n	d5a50 <__aeabi_dmul+0xb4>
   d59de:	fba0 ce02 	umull	ip, lr, r0, r2
   d59e2:	f04f 0500 	mov.w	r5, #0
   d59e6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d59ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d59ee:	fbe0 e503 	umlal	lr, r5, r0, r3
   d59f2:	f04f 0600 	mov.w	r6, #0
   d59f6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d59fa:	f09c 0f00 	teq	ip, #0
   d59fe:	bf18      	it	ne
   d5a00:	f04e 0e01 	orrne.w	lr, lr, #1
   d5a04:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5a08:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5a0c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5a10:	d204      	bcs.n	d5a1c <__aeabi_dmul+0x80>
   d5a12:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5a16:	416d      	adcs	r5, r5
   d5a18:	eb46 0606 	adc.w	r6, r6, r6
   d5a1c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5a20:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5a24:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5a28:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5a2c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5a30:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5a34:	bf88      	it	hi
   d5a36:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5a3a:	d81e      	bhi.n	d5a7a <__aeabi_dmul+0xde>
   d5a3c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5a40:	bf08      	it	eq
   d5a42:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5a46:	f150 0000 	adcs.w	r0, r0, #0
   d5a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5a4e:	bd70      	pop	{r4, r5, r6, pc}
   d5a50:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5a54:	ea46 0101 	orr.w	r1, r6, r1
   d5a58:	ea40 0002 	orr.w	r0, r0, r2
   d5a5c:	ea81 0103 	eor.w	r1, r1, r3
   d5a60:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5a64:	bfc2      	ittt	gt
   d5a66:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5a6a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5a6e:	bd70      	popgt	{r4, r5, r6, pc}
   d5a70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5a74:	f04f 0e00 	mov.w	lr, #0
   d5a78:	3c01      	subs	r4, #1
   d5a7a:	f300 80ab 	bgt.w	d5bd4 <__aeabi_dmul+0x238>
   d5a7e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5a82:	bfde      	ittt	le
   d5a84:	2000      	movle	r0, #0
   d5a86:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5a8a:	bd70      	pople	{r4, r5, r6, pc}
   d5a8c:	f1c4 0400 	rsb	r4, r4, #0
   d5a90:	3c20      	subs	r4, #32
   d5a92:	da35      	bge.n	d5b00 <__aeabi_dmul+0x164>
   d5a94:	340c      	adds	r4, #12
   d5a96:	dc1b      	bgt.n	d5ad0 <__aeabi_dmul+0x134>
   d5a98:	f104 0414 	add.w	r4, r4, #20
   d5a9c:	f1c4 0520 	rsb	r5, r4, #32
   d5aa0:	fa00 f305 	lsl.w	r3, r0, r5
   d5aa4:	fa20 f004 	lsr.w	r0, r0, r4
   d5aa8:	fa01 f205 	lsl.w	r2, r1, r5
   d5aac:	ea40 0002 	orr.w	r0, r0, r2
   d5ab0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5ab4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5ab8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5abc:	fa21 f604 	lsr.w	r6, r1, r4
   d5ac0:	eb42 0106 	adc.w	r1, r2, r6
   d5ac4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5ac8:	bf08      	it	eq
   d5aca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5ace:	bd70      	pop	{r4, r5, r6, pc}
   d5ad0:	f1c4 040c 	rsb	r4, r4, #12
   d5ad4:	f1c4 0520 	rsb	r5, r4, #32
   d5ad8:	fa00 f304 	lsl.w	r3, r0, r4
   d5adc:	fa20 f005 	lsr.w	r0, r0, r5
   d5ae0:	fa01 f204 	lsl.w	r2, r1, r4
   d5ae4:	ea40 0002 	orr.w	r0, r0, r2
   d5ae8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5aec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5af0:	f141 0100 	adc.w	r1, r1, #0
   d5af4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5af8:	bf08      	it	eq
   d5afa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5afe:	bd70      	pop	{r4, r5, r6, pc}
   d5b00:	f1c4 0520 	rsb	r5, r4, #32
   d5b04:	fa00 f205 	lsl.w	r2, r0, r5
   d5b08:	ea4e 0e02 	orr.w	lr, lr, r2
   d5b0c:	fa20 f304 	lsr.w	r3, r0, r4
   d5b10:	fa01 f205 	lsl.w	r2, r1, r5
   d5b14:	ea43 0302 	orr.w	r3, r3, r2
   d5b18:	fa21 f004 	lsr.w	r0, r1, r4
   d5b1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5b20:	fa21 f204 	lsr.w	r2, r1, r4
   d5b24:	ea20 0002 	bic.w	r0, r0, r2
   d5b28:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5b2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5b30:	bf08      	it	eq
   d5b32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5b36:	bd70      	pop	{r4, r5, r6, pc}
   d5b38:	f094 0f00 	teq	r4, #0
   d5b3c:	d10f      	bne.n	d5b5e <__aeabi_dmul+0x1c2>
   d5b3e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5b42:	0040      	lsls	r0, r0, #1
   d5b44:	eb41 0101 	adc.w	r1, r1, r1
   d5b48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5b4c:	bf08      	it	eq
   d5b4e:	3c01      	subeq	r4, #1
   d5b50:	d0f7      	beq.n	d5b42 <__aeabi_dmul+0x1a6>
   d5b52:	ea41 0106 	orr.w	r1, r1, r6
   d5b56:	f095 0f00 	teq	r5, #0
   d5b5a:	bf18      	it	ne
   d5b5c:	4770      	bxne	lr
   d5b5e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5b62:	0052      	lsls	r2, r2, #1
   d5b64:	eb43 0303 	adc.w	r3, r3, r3
   d5b68:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5b6c:	bf08      	it	eq
   d5b6e:	3d01      	subeq	r5, #1
   d5b70:	d0f7      	beq.n	d5b62 <__aeabi_dmul+0x1c6>
   d5b72:	ea43 0306 	orr.w	r3, r3, r6
   d5b76:	4770      	bx	lr
   d5b78:	ea94 0f0c 	teq	r4, ip
   d5b7c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5b80:	bf18      	it	ne
   d5b82:	ea95 0f0c 	teqne	r5, ip
   d5b86:	d00c      	beq.n	d5ba2 <__aeabi_dmul+0x206>
   d5b88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5b8c:	bf18      	it	ne
   d5b8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5b92:	d1d1      	bne.n	d5b38 <__aeabi_dmul+0x19c>
   d5b94:	ea81 0103 	eor.w	r1, r1, r3
   d5b98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5b9c:	f04f 0000 	mov.w	r0, #0
   d5ba0:	bd70      	pop	{r4, r5, r6, pc}
   d5ba2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5ba6:	bf06      	itte	eq
   d5ba8:	4610      	moveq	r0, r2
   d5baa:	4619      	moveq	r1, r3
   d5bac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5bb0:	d019      	beq.n	d5be6 <__aeabi_dmul+0x24a>
   d5bb2:	ea94 0f0c 	teq	r4, ip
   d5bb6:	d102      	bne.n	d5bbe <__aeabi_dmul+0x222>
   d5bb8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5bbc:	d113      	bne.n	d5be6 <__aeabi_dmul+0x24a>
   d5bbe:	ea95 0f0c 	teq	r5, ip
   d5bc2:	d105      	bne.n	d5bd0 <__aeabi_dmul+0x234>
   d5bc4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5bc8:	bf1c      	itt	ne
   d5bca:	4610      	movne	r0, r2
   d5bcc:	4619      	movne	r1, r3
   d5bce:	d10a      	bne.n	d5be6 <__aeabi_dmul+0x24a>
   d5bd0:	ea81 0103 	eor.w	r1, r1, r3
   d5bd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5bd8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5bdc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5be0:	f04f 0000 	mov.w	r0, #0
   d5be4:	bd70      	pop	{r4, r5, r6, pc}
   d5be6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5bea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d5bee:	bd70      	pop	{r4, r5, r6, pc}

000d5bf0 <__aeabi_ddiv>:
   d5bf0:	b570      	push	{r4, r5, r6, lr}
   d5bf2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5bf6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5bfa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5bfe:	bf1d      	ittte	ne
   d5c00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5c04:	ea94 0f0c 	teqne	r4, ip
   d5c08:	ea95 0f0c 	teqne	r5, ip
   d5c0c:	f000 f8a7 	bleq	d5d5e <__aeabi_ddiv+0x16e>
   d5c10:	eba4 0405 	sub.w	r4, r4, r5
   d5c14:	ea81 0e03 	eor.w	lr, r1, r3
   d5c18:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5c1c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5c20:	f000 8088 	beq.w	d5d34 <__aeabi_ddiv+0x144>
   d5c24:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5c28:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5c2c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5c30:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5c34:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5c38:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5c3c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5c40:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5c44:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5c48:	429d      	cmp	r5, r3
   d5c4a:	bf08      	it	eq
   d5c4c:	4296      	cmpeq	r6, r2
   d5c4e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5c52:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5c56:	d202      	bcs.n	d5c5e <__aeabi_ddiv+0x6e>
   d5c58:	085b      	lsrs	r3, r3, #1
   d5c5a:	ea4f 0232 	mov.w	r2, r2, rrx
   d5c5e:	1ab6      	subs	r6, r6, r2
   d5c60:	eb65 0503 	sbc.w	r5, r5, r3
   d5c64:	085b      	lsrs	r3, r3, #1
   d5c66:	ea4f 0232 	mov.w	r2, r2, rrx
   d5c6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5c6e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5c72:	ebb6 0e02 	subs.w	lr, r6, r2
   d5c76:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5c7a:	bf22      	ittt	cs
   d5c7c:	1ab6      	subcs	r6, r6, r2
   d5c7e:	4675      	movcs	r5, lr
   d5c80:	ea40 000c 	orrcs.w	r0, r0, ip
   d5c84:	085b      	lsrs	r3, r3, #1
   d5c86:	ea4f 0232 	mov.w	r2, r2, rrx
   d5c8a:	ebb6 0e02 	subs.w	lr, r6, r2
   d5c8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5c92:	bf22      	ittt	cs
   d5c94:	1ab6      	subcs	r6, r6, r2
   d5c96:	4675      	movcs	r5, lr
   d5c98:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5c9c:	085b      	lsrs	r3, r3, #1
   d5c9e:	ea4f 0232 	mov.w	r2, r2, rrx
   d5ca2:	ebb6 0e02 	subs.w	lr, r6, r2
   d5ca6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5caa:	bf22      	ittt	cs
   d5cac:	1ab6      	subcs	r6, r6, r2
   d5cae:	4675      	movcs	r5, lr
   d5cb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5cb4:	085b      	lsrs	r3, r3, #1
   d5cb6:	ea4f 0232 	mov.w	r2, r2, rrx
   d5cba:	ebb6 0e02 	subs.w	lr, r6, r2
   d5cbe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5cc2:	bf22      	ittt	cs
   d5cc4:	1ab6      	subcs	r6, r6, r2
   d5cc6:	4675      	movcs	r5, lr
   d5cc8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5ccc:	ea55 0e06 	orrs.w	lr, r5, r6
   d5cd0:	d018      	beq.n	d5d04 <__aeabi_ddiv+0x114>
   d5cd2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5cd6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d5cda:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d5cde:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d5ce2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5ce6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5cea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5cee:	d1c0      	bne.n	d5c72 <__aeabi_ddiv+0x82>
   d5cf0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5cf4:	d10b      	bne.n	d5d0e <__aeabi_ddiv+0x11e>
   d5cf6:	ea41 0100 	orr.w	r1, r1, r0
   d5cfa:	f04f 0000 	mov.w	r0, #0
   d5cfe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5d02:	e7b6      	b.n	d5c72 <__aeabi_ddiv+0x82>
   d5d04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5d08:	bf04      	itt	eq
   d5d0a:	4301      	orreq	r1, r0
   d5d0c:	2000      	moveq	r0, #0
   d5d0e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5d12:	bf88      	it	hi
   d5d14:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5d18:	f63f aeaf 	bhi.w	d5a7a <__aeabi_dmul+0xde>
   d5d1c:	ebb5 0c03 	subs.w	ip, r5, r3
   d5d20:	bf04      	itt	eq
   d5d22:	ebb6 0c02 	subseq.w	ip, r6, r2
   d5d26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5d2a:	f150 0000 	adcs.w	r0, r0, #0
   d5d2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5d32:	bd70      	pop	{r4, r5, r6, pc}
   d5d34:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5d38:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5d3c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5d40:	bfc2      	ittt	gt
   d5d42:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5d46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5d4a:	bd70      	popgt	{r4, r5, r6, pc}
   d5d4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5d50:	f04f 0e00 	mov.w	lr, #0
   d5d54:	3c01      	subs	r4, #1
   d5d56:	e690      	b.n	d5a7a <__aeabi_dmul+0xde>
   d5d58:	ea45 0e06 	orr.w	lr, r5, r6
   d5d5c:	e68d      	b.n	d5a7a <__aeabi_dmul+0xde>
   d5d5e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5d62:	ea94 0f0c 	teq	r4, ip
   d5d66:	bf08      	it	eq
   d5d68:	ea95 0f0c 	teqeq	r5, ip
   d5d6c:	f43f af3b 	beq.w	d5be6 <__aeabi_dmul+0x24a>
   d5d70:	ea94 0f0c 	teq	r4, ip
   d5d74:	d10a      	bne.n	d5d8c <__aeabi_ddiv+0x19c>
   d5d76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5d7a:	f47f af34 	bne.w	d5be6 <__aeabi_dmul+0x24a>
   d5d7e:	ea95 0f0c 	teq	r5, ip
   d5d82:	f47f af25 	bne.w	d5bd0 <__aeabi_dmul+0x234>
   d5d86:	4610      	mov	r0, r2
   d5d88:	4619      	mov	r1, r3
   d5d8a:	e72c      	b.n	d5be6 <__aeabi_dmul+0x24a>
   d5d8c:	ea95 0f0c 	teq	r5, ip
   d5d90:	d106      	bne.n	d5da0 <__aeabi_ddiv+0x1b0>
   d5d92:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5d96:	f43f aefd 	beq.w	d5b94 <__aeabi_dmul+0x1f8>
   d5d9a:	4610      	mov	r0, r2
   d5d9c:	4619      	mov	r1, r3
   d5d9e:	e722      	b.n	d5be6 <__aeabi_dmul+0x24a>
   d5da0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5da4:	bf18      	it	ne
   d5da6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5daa:	f47f aec5 	bne.w	d5b38 <__aeabi_dmul+0x19c>
   d5dae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5db2:	f47f af0d 	bne.w	d5bd0 <__aeabi_dmul+0x234>
   d5db6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d5dba:	f47f aeeb 	bne.w	d5b94 <__aeabi_dmul+0x1f8>
   d5dbe:	e712      	b.n	d5be6 <__aeabi_dmul+0x24a>

000d5dc0 <__gedf2>:
   d5dc0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d5dc4:	e006      	b.n	d5dd4 <__cmpdf2+0x4>
   d5dc6:	bf00      	nop

000d5dc8 <__ledf2>:
   d5dc8:	f04f 0c01 	mov.w	ip, #1
   d5dcc:	e002      	b.n	d5dd4 <__cmpdf2+0x4>
   d5dce:	bf00      	nop

000d5dd0 <__cmpdf2>:
   d5dd0:	f04f 0c01 	mov.w	ip, #1
   d5dd4:	f84d cd04 	str.w	ip, [sp, #-4]!
   d5dd8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5ddc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5de0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5de4:	bf18      	it	ne
   d5de6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d5dea:	d01b      	beq.n	d5e24 <__cmpdf2+0x54>
   d5dec:	b001      	add	sp, #4
   d5dee:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d5df2:	bf0c      	ite	eq
   d5df4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d5df8:	ea91 0f03 	teqne	r1, r3
   d5dfc:	bf02      	ittt	eq
   d5dfe:	ea90 0f02 	teqeq	r0, r2
   d5e02:	2000      	moveq	r0, #0
   d5e04:	4770      	bxeq	lr
   d5e06:	f110 0f00 	cmn.w	r0, #0
   d5e0a:	ea91 0f03 	teq	r1, r3
   d5e0e:	bf58      	it	pl
   d5e10:	4299      	cmppl	r1, r3
   d5e12:	bf08      	it	eq
   d5e14:	4290      	cmpeq	r0, r2
   d5e16:	bf2c      	ite	cs
   d5e18:	17d8      	asrcs	r0, r3, #31
   d5e1a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d5e1e:	f040 0001 	orr.w	r0, r0, #1
   d5e22:	4770      	bx	lr
   d5e24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5e28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5e2c:	d102      	bne.n	d5e34 <__cmpdf2+0x64>
   d5e2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d5e32:	d107      	bne.n	d5e44 <__cmpdf2+0x74>
   d5e34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5e38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5e3c:	d1d6      	bne.n	d5dec <__cmpdf2+0x1c>
   d5e3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d5e42:	d0d3      	beq.n	d5dec <__cmpdf2+0x1c>
   d5e44:	f85d 0b04 	ldr.w	r0, [sp], #4
   d5e48:	4770      	bx	lr
   d5e4a:	bf00      	nop

000d5e4c <__aeabi_cdrcmple>:
   d5e4c:	4684      	mov	ip, r0
   d5e4e:	4610      	mov	r0, r2
   d5e50:	4662      	mov	r2, ip
   d5e52:	468c      	mov	ip, r1
   d5e54:	4619      	mov	r1, r3
   d5e56:	4663      	mov	r3, ip
   d5e58:	e000      	b.n	d5e5c <__aeabi_cdcmpeq>
   d5e5a:	bf00      	nop

000d5e5c <__aeabi_cdcmpeq>:
   d5e5c:	b501      	push	{r0, lr}
   d5e5e:	f7ff ffb7 	bl	d5dd0 <__cmpdf2>
   d5e62:	2800      	cmp	r0, #0
   d5e64:	bf48      	it	mi
   d5e66:	f110 0f00 	cmnmi.w	r0, #0
   d5e6a:	bd01      	pop	{r0, pc}

000d5e6c <__aeabi_dcmpeq>:
   d5e6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5e70:	f7ff fff4 	bl	d5e5c <__aeabi_cdcmpeq>
   d5e74:	bf0c      	ite	eq
   d5e76:	2001      	moveq	r0, #1
   d5e78:	2000      	movne	r0, #0
   d5e7a:	f85d fb08 	ldr.w	pc, [sp], #8
   d5e7e:	bf00      	nop

000d5e80 <__aeabi_dcmplt>:
   d5e80:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5e84:	f7ff ffea 	bl	d5e5c <__aeabi_cdcmpeq>
   d5e88:	bf34      	ite	cc
   d5e8a:	2001      	movcc	r0, #1
   d5e8c:	2000      	movcs	r0, #0
   d5e8e:	f85d fb08 	ldr.w	pc, [sp], #8
   d5e92:	bf00      	nop

000d5e94 <__aeabi_dcmple>:
   d5e94:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5e98:	f7ff ffe0 	bl	d5e5c <__aeabi_cdcmpeq>
   d5e9c:	bf94      	ite	ls
   d5e9e:	2001      	movls	r0, #1
   d5ea0:	2000      	movhi	r0, #0
   d5ea2:	f85d fb08 	ldr.w	pc, [sp], #8
   d5ea6:	bf00      	nop

000d5ea8 <__aeabi_dcmpge>:
   d5ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5eac:	f7ff ffce 	bl	d5e4c <__aeabi_cdrcmple>
   d5eb0:	bf94      	ite	ls
   d5eb2:	2001      	movls	r0, #1
   d5eb4:	2000      	movhi	r0, #0
   d5eb6:	f85d fb08 	ldr.w	pc, [sp], #8
   d5eba:	bf00      	nop

000d5ebc <__aeabi_dcmpgt>:
   d5ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5ec0:	f7ff ffc4 	bl	d5e4c <__aeabi_cdrcmple>
   d5ec4:	bf34      	ite	cc
   d5ec6:	2001      	movcc	r0, #1
   d5ec8:	2000      	movcs	r0, #0
   d5eca:	f85d fb08 	ldr.w	pc, [sp], #8
   d5ece:	bf00      	nop

000d5ed0 <__aeabi_dcmpun>:
   d5ed0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5ed4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5ed8:	d102      	bne.n	d5ee0 <__aeabi_dcmpun+0x10>
   d5eda:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d5ede:	d10a      	bne.n	d5ef6 <__aeabi_dcmpun+0x26>
   d5ee0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5ee4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5ee8:	d102      	bne.n	d5ef0 <__aeabi_dcmpun+0x20>
   d5eea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d5eee:	d102      	bne.n	d5ef6 <__aeabi_dcmpun+0x26>
   d5ef0:	f04f 0000 	mov.w	r0, #0
   d5ef4:	4770      	bx	lr
   d5ef6:	f04f 0001 	mov.w	r0, #1
   d5efa:	4770      	bx	lr

000d5efc <__aeabi_d2iz>:
   d5efc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d5f00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d5f04:	d215      	bcs.n	d5f32 <__aeabi_d2iz+0x36>
   d5f06:	d511      	bpl.n	d5f2c <__aeabi_d2iz+0x30>
   d5f08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d5f0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d5f10:	d912      	bls.n	d5f38 <__aeabi_d2iz+0x3c>
   d5f12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5f16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d5f1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d5f1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5f22:	fa23 f002 	lsr.w	r0, r3, r2
   d5f26:	bf18      	it	ne
   d5f28:	4240      	negne	r0, r0
   d5f2a:	4770      	bx	lr
   d5f2c:	f04f 0000 	mov.w	r0, #0
   d5f30:	4770      	bx	lr
   d5f32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d5f36:	d105      	bne.n	d5f44 <__aeabi_d2iz+0x48>
   d5f38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d5f3c:	bf08      	it	eq
   d5f3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d5f42:	4770      	bx	lr
   d5f44:	f04f 0000 	mov.w	r0, #0
   d5f48:	4770      	bx	lr
   d5f4a:	bf00      	nop

000d5f4c <__aeabi_d2uiz>:
   d5f4c:	004a      	lsls	r2, r1, #1
   d5f4e:	d211      	bcs.n	d5f74 <__aeabi_d2uiz+0x28>
   d5f50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d5f54:	d211      	bcs.n	d5f7a <__aeabi_d2uiz+0x2e>
   d5f56:	d50d      	bpl.n	d5f74 <__aeabi_d2uiz+0x28>
   d5f58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d5f5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d5f60:	d40e      	bmi.n	d5f80 <__aeabi_d2uiz+0x34>
   d5f62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5f66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d5f6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d5f6e:	fa23 f002 	lsr.w	r0, r3, r2
   d5f72:	4770      	bx	lr
   d5f74:	f04f 0000 	mov.w	r0, #0
   d5f78:	4770      	bx	lr
   d5f7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d5f7e:	d102      	bne.n	d5f86 <__aeabi_d2uiz+0x3a>
   d5f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5f84:	4770      	bx	lr
   d5f86:	f04f 0000 	mov.w	r0, #0
   d5f8a:	4770      	bx	lr

000d5f8c <__aeabi_d2lz>:
   d5f8c:	b538      	push	{r3, r4, r5, lr}
   d5f8e:	2200      	movs	r2, #0
   d5f90:	2300      	movs	r3, #0
   d5f92:	4604      	mov	r4, r0
   d5f94:	460d      	mov	r5, r1
   d5f96:	f7ff ff73 	bl	d5e80 <__aeabi_dcmplt>
   d5f9a:	b928      	cbnz	r0, d5fa8 <__aeabi_d2lz+0x1c>
   d5f9c:	4620      	mov	r0, r4
   d5f9e:	4629      	mov	r1, r5
   d5fa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5fa4:	f000 b80a 	b.w	d5fbc <__aeabi_d2ulz>
   d5fa8:	4620      	mov	r0, r4
   d5faa:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   d5fae:	f000 f805 	bl	d5fbc <__aeabi_d2ulz>
   d5fb2:	4240      	negs	r0, r0
   d5fb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5fb8:	bd38      	pop	{r3, r4, r5, pc}
   d5fba:	bf00      	nop

000d5fbc <__aeabi_d2ulz>:
   d5fbc:	b5d0      	push	{r4, r6, r7, lr}
   d5fbe:	2200      	movs	r2, #0
   d5fc0:	4b0e      	ldr	r3, [pc, #56]	; (d5ffc <__aeabi_d2ulz+0x40>)
   d5fc2:	4606      	mov	r6, r0
   d5fc4:	460f      	mov	r7, r1
   d5fc6:	f7ff fce9 	bl	d599c <__aeabi_dmul>
   d5fca:	f7ff ffbf 	bl	d5f4c <__aeabi_d2uiz>
   d5fce:	4604      	mov	r4, r0
   d5fd0:	f7ff fc6e 	bl	d58b0 <__aeabi_ui2d>
   d5fd4:	2200      	movs	r2, #0
   d5fd6:	4b0a      	ldr	r3, [pc, #40]	; (d6000 <__aeabi_d2ulz+0x44>)
   d5fd8:	f7ff fce0 	bl	d599c <__aeabi_dmul>
   d5fdc:	4602      	mov	r2, r0
   d5fde:	460b      	mov	r3, r1
   d5fe0:	4630      	mov	r0, r6
   d5fe2:	4639      	mov	r1, r7
   d5fe4:	f7ff fb26 	bl	d5634 <__aeabi_dsub>
   d5fe8:	f7ff ffb0 	bl	d5f4c <__aeabi_d2uiz>
   d5fec:	4623      	mov	r3, r4
   d5fee:	2200      	movs	r2, #0
   d5ff0:	ea42 0200 	orr.w	r2, r2, r0
   d5ff4:	4610      	mov	r0, r2
   d5ff6:	4619      	mov	r1, r3
   d5ff8:	bdd0      	pop	{r4, r6, r7, pc}
   d5ffa:	bf00      	nop
   d5ffc:	3df00000 	.word	0x3df00000
   d6000:	41f00000 	.word	0x41f00000

000d6004 <__cxa_atexit>:
   d6004:	b510      	push	{r4, lr}
   d6006:	4c05      	ldr	r4, [pc, #20]	; (d601c <__cxa_atexit+0x18>)
   d6008:	4613      	mov	r3, r2
   d600a:	b12c      	cbz	r4, d6018 <__cxa_atexit+0x14>
   d600c:	460a      	mov	r2, r1
   d600e:	4601      	mov	r1, r0
   d6010:	2002      	movs	r0, #2
   d6012:	f3af 8000 	nop.w
   d6016:	bd10      	pop	{r4, pc}
   d6018:	4620      	mov	r0, r4
   d601a:	bd10      	pop	{r4, pc}
   d601c:	00000000 	.word	0x00000000

000d6020 <memcpy>:
   d6020:	b510      	push	{r4, lr}
   d6022:	1e43      	subs	r3, r0, #1
   d6024:	440a      	add	r2, r1
   d6026:	4291      	cmp	r1, r2
   d6028:	d004      	beq.n	d6034 <memcpy+0x14>
   d602a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d602e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6032:	e7f8      	b.n	d6026 <memcpy+0x6>
   d6034:	bd10      	pop	{r4, pc}

000d6036 <memset>:
   d6036:	4402      	add	r2, r0
   d6038:	4603      	mov	r3, r0
   d603a:	4293      	cmp	r3, r2
   d603c:	d002      	beq.n	d6044 <memset+0xe>
   d603e:	f803 1b01 	strb.w	r1, [r3], #1
   d6042:	e7fa      	b.n	d603a <memset+0x4>
   d6044:	4770      	bx	lr
	...

000d6048 <srand>:
   d6048:	b538      	push	{r3, r4, r5, lr}
   d604a:	4b12      	ldr	r3, [pc, #72]	; (d6094 <srand+0x4c>)
   d604c:	681c      	ldr	r4, [r3, #0]
   d604e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6050:	4605      	mov	r5, r0
   d6052:	b9d3      	cbnz	r3, d608a <srand+0x42>
   d6054:	2018      	movs	r0, #24
   d6056:	f7fe fbd1 	bl	d47fc <malloc>
   d605a:	f243 330e 	movw	r3, #13070	; 0x330e
   d605e:	63a0      	str	r0, [r4, #56]	; 0x38
   d6060:	8003      	strh	r3, [r0, #0]
   d6062:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6066:	8043      	strh	r3, [r0, #2]
   d6068:	f241 2334 	movw	r3, #4660	; 0x1234
   d606c:	8083      	strh	r3, [r0, #4]
   d606e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6072:	80c3      	strh	r3, [r0, #6]
   d6074:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6078:	8103      	strh	r3, [r0, #8]
   d607a:	2305      	movs	r3, #5
   d607c:	8143      	strh	r3, [r0, #10]
   d607e:	230b      	movs	r3, #11
   d6080:	8183      	strh	r3, [r0, #12]
   d6082:	2201      	movs	r2, #1
   d6084:	2300      	movs	r3, #0
   d6086:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d608a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d608c:	2200      	movs	r2, #0
   d608e:	611d      	str	r5, [r3, #16]
   d6090:	615a      	str	r2, [r3, #20]
   d6092:	bd38      	pop	{r3, r4, r5, pc}
   d6094:	2003e43c 	.word	0x2003e43c

000d6098 <strlen>:
   d6098:	4603      	mov	r3, r0
   d609a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d609e:	2a00      	cmp	r2, #0
   d60a0:	d1fb      	bne.n	d609a <strlen+0x2>
   d60a2:	1a18      	subs	r0, r3, r0
   d60a4:	3801      	subs	r0, #1
   d60a6:	4770      	bx	lr

000d60a8 <dynalib_user>:
   d60a8:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d60b8:	0000 0000                                   ....

000d60bc <_ZTVN5spark13CellularClassE>:
	...
   d60c4:	4881 000d 4877 000d 486d 000d 4823 000d     .H..wH..mH..#H..
   d60d4:	4861 000d 4855 000d 4849 000d 4841 000d     aH..UH..IH..AH..
   d60e4:	4837 000d 482d 000d 4cad 000d               7H..-H...L..

000d60f0 <_ZTVN5spark13EthernetClassE>:
	...
   d60f8:	493d 000d 4933 000d 4929 000d 491f 000d     =I..3I..)I...I..
   d6108:	4913 000d 4907 000d 48fb 000d 48f3 000d     .I...I...H...H..
   d6118:	48e9 000d 48df 000d 4cad 000d               .H...H...L..

000d6124 <_ZTV7TwoWire>:
	...
   d612c:	495d 000d 49a7 000d 497f 000d 495f 000d     ]I...I...I.._I..
   d613c:	4987 000d 498f 000d 4997 000d 499f 000d     .I...I...I...I..

000d614c <_ZTV9IPAddress>:
	...
   d6154:	4a2b 000d 4a1d 000d 4a1f 000d 6e6c 6600     +J...J...J..ln.f
   d6164:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
   d6174:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
   d6184:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
   d6194:	2500 0069 6564 6174 6c69 2073 203d 6200     .%i.details = .b
   d61a4:	7561 0064 6553 6972 6c61 5300 7265 6169     aud.Serial.Seria
   d61b4:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
   d61c4:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
   d61d4:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
   d61e4:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
   d61f4:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
   d6204:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
   d6214:	0072 7061 0070 6f6e 656e 7400 6172 6563     r.app.none.trace
   d6224:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   d6234:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

000d6240 <_ZTVN5spark9MeshClassE>:
	...
   d6248:	4b6f 000d 4b65 000d 4b5b 000d 4b51 000d     oK..eK..[K..QK..
   d6258:	4b45 000d 4b39 000d 4b2d 000d 4b25 000d     EK..9K..-K..%K..
   d6268:	4b1b 000d 4b11 000d 4cad 000d               .K...K...L..

000d6274 <_ZTVN5spark12NetworkClassE>:
	...
   d627c:	4c45 000d 4c4f 000d 4c59 000d 4c63 000d     EL..OL..YL..cL..
   d628c:	4c6d 000d 4c79 000d 4c85 000d 4c91 000d     mL..yL...L...L..
   d629c:	4c99 000d 4ca3 000d 4cad 000d 616e 006e     .L...L...L..nan.
   d62ac:	766f 0066 002e 6e69 0066 0000               ovf...inf...

000d62b8 <_ZTV8SPIClass>:
	...
   d62c0:	4ff5 000d 4ff7 000d 005a 2b25 3330 3a64     .O...O..Z.%+03d:
   d62d0:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d62e0:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d62f0:	0000 0000                                   ....

000d62f4 <_ZTV11USARTSerial>:
	...
   d62fc:	5059 000d 507d 000d 5089 000d 4d45 000d     YP..}P...P..EM..
   d630c:	5065 000d 5071 000d 506b 000d 5077 000d     eP..qP..kP..wP..
   d631c:	505b 000d 505f 000d                         [P.._P..

000d6324 <_ZTV9USBSerial>:
	...
   d632c:	515d 000d 51a1 000d 517b 000d 4d45 000d     ]Q...Q..{Q..EM..
   d633c:	5175 000d 515f 000d 5167 000d 519b 000d     uQ.._Q..gQ...Q..
   d634c:	516f 000d 5159 000d                         oQ..YQ..

000d6354 <__sf_fake_stdin>:
	...

000d6374 <__sf_fake_stdout>:
	...

000d6394 <__sf_fake_stderr>:
	...
   d63b4:	0043                                        C.

000d63b6 <link_const_variable_data_end>:
	...

000d63b8 <link_constructors_location>:
   d63b8:	000d4171 	.word	0x000d4171
   d63bc:	000d44bf 	.word	0x000d44bf
   d63c0:	000d488d 	.word	0x000d488d
   d63c4:	000d4949 	.word	0x000d4949
   d63c8:	000d4b01 	.word	0x000d4b01
   d63cc:	000d4bf9 	.word	0x000d4bf9
   d63d0:	000d4d31 	.word	0x000d4d31
   d63d4:	000d4fd9 	.word	0x000d4fd9
   d63d8:	000d502d 	.word	0x000d502d
   d63dc:	000d5045 	.word	0x000d5045
   d63e0:	000d534d 	.word	0x000d534d
   d63e4:	000d539d 	.word	0x000d539d
   d63e8:	000d5461 	.word	0x000d5461
   d63ec:	000d54e5 	.word	0x000d54e5
   d63f0:	000d5569 	.word	0x000d5569

000d63f4 <link_constructors_end>:
	...
