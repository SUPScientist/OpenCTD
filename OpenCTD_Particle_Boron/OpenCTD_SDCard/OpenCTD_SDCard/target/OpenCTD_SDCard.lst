
/Users/pjb/Dropbox/Particle_Projects/OPO_OpenCTDTest/OpenCTD_SDCard/OpenCTD_SDCard/target/OpenCTD_SDCard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003548  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  000175f4  2**0
                  CONTENTS
  3 .data         00000068  2003df48  000d7560  0000df48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000840  2003dfb0  2003dfb0  0001dfb0  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d75c8  000d75c8  000175c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d75f0  000d75f0  000175f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   0012ee28  00000000  00000000  000175f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0001ae77  00000000  00000000  0014641c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001c6de  00000000  00000000  00161293  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002280  00000000  00000000  0017d971  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003d10  00000000  00000000  0017fbf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00045b1b  00000000  00000000  00183901  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00048711  00000000  00000000  001c941c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000dd638  00000000  00000000  00211b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c1f0  00000000  00000000  002ef168  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	10 70 0d 00                                         .p..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 ffac 	bl	d6f8a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 ffb1 	bl	d6fa0 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003df48 	.word	0x2003df48
   d4048:	000d7560 	.word	0x000d7560
   d404c:	2003dfb0 	.word	0x2003dfb0
   d4050:	2003dfb0 	.word	0x2003dfb0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fd69 	bl	d6b30 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7554 	.word	0x000d7554
   d4080:	000d74dc 	.word	0x000d74dc

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b94a 	b.w	d431c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa09 	bl	d44a0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bd1b 	b.w	d6acc <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 bfb3 	b.w	d6000 <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 bfb9 	b.w	d6010 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 bfb7 	b.w	d6010 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d40b2:	4770      	bx	lr

000d40b4 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d40b4:	3008      	adds	r0, #8
   d40b6:	f000 bd0b 	b.w	d4ad0 <_ZN7FatFile5writeEPKvj>

000d40ba <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d40ba:	b507      	push	{r0, r1, r2, lr}
   d40bc:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d40be:	2201      	movs	r2, #1
   d40c0:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d40c4:	3008      	adds	r0, #8
   d40c6:	4619      	mov	r1, r3
   d40c8:	f000 fd02 	bl	d4ad0 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d40cc:	b003      	add	sp, #12
   d40ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d40d4 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d40d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40d6:	4602      	mov	r2, r0
   d40d8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d40da:	7913      	ldrb	r3, [r2, #4]
   d40dc:	6895      	ldr	r5, [r2, #8]
   d40de:	b133      	cbz	r3, d40ee <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d40e0:	b93d      	cbnz	r5, d40f2 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d40e2:	490c      	ldr	r1, [pc, #48]	; (d4114 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d40e4:	b004      	add	sp, #16
   d40e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d40ea:	f002 ba2d 	b.w	d6548 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d40ee:	4b0a      	ldr	r3, [pc, #40]	; (d4118 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d40f0:	e000      	b.n	d40f4 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d40f2:	4b0a      	ldr	r3, [pc, #40]	; (d411c <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d40f4:	7b16      	ldrb	r6, [r2, #12]
   d40f6:	4c0a      	ldr	r4, [pc, #40]	; (d4120 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d40f8:	490a      	ldr	r1, [pc, #40]	; (d4124 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d40fa:	7b52      	ldrb	r2, [r2, #13]
   d40fc:	9202      	str	r2, [sp, #8]
   d40fe:	2e01      	cmp	r6, #1
   d4100:	bf08      	it	eq
   d4102:	4621      	moveq	r1, r4
   d4104:	9101      	str	r1, [sp, #4]
   d4106:	9500      	str	r5, [sp, #0]
   d4108:	4a07      	ldr	r2, [pc, #28]	; (d4128 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d410a:	2100      	movs	r1, #0
   d410c:	f002 fa9c 	bl	d6648 <_ZN5Print11printf_implEbPKcz>
  }
   d4110:	b004      	add	sp, #16
   d4112:	bd70      	pop	{r4, r5, r6, pc}
   d4114:	000d7066 	.word	0x000d7066
   d4118:	000d72a6 	.word	0x000d72a6
   d411c:	000d7055 	.word	0x000d7055
   d4120:	000d705e 	.word	0x000d705e
   d4124:	000d7062 	.word	0x000d7062
   d4128:	000d707c 	.word	0x000d707c

000d412c <_ZN6SdFileD0Ev>:
   d412c:	b510      	push	{r4, lr}
   d412e:	4604      	mov	r4, r0
   d4130:	f7ff ffb3 	bl	d409a <_ZdlPv>
   d4134:	4620      	mov	r0, r4
   d4136:	bd10      	pop	{r4, pc}

000d4138 <_ZN12SdFileSystemI9SdSpiCardE10errorPrintEP5Print.part.8.constprop.12>:
    errorPrint(&Serial);
  }
  /** %Print any SD error code.
   * \param[in] pr Print device.
   */
  void errorPrint(Print* pr) {
   d4138:	b538      	push	{r3, r4, r5, lr}
   d413a:	460c      	mov	r4, r1
   d413c:	4605      	mov	r5, r0
    if (!cardErrorCode()) {
      return;
    }
    pr->print(F("SD errorCode: 0X"));
   d413e:	490b      	ldr	r1, [pc, #44]	; (d416c <_ZN12SdFileSystemI9SdSpiCardE10errorPrintEP5Print.part.8.constprop.12+0x34>)
   d4140:	4620      	mov	r0, r4
   d4142:	f002 fa08 	bl	d6556 <_ZN5Print5printEPK19__FlashStringHelper>
    pr->print(cardErrorCode(), HEX);
   d4146:	2210      	movs	r2, #16
   d4148:	f895 1460 	ldrb.w	r1, [r5, #1120]	; 0x460
   d414c:	4620      	mov	r0, r4
   d414e:	f002 fa4b 	bl	d65e8 <_ZN5Print5printEhi>
    pr->print(F(",0X"));
   d4152:	4907      	ldr	r1, [pc, #28]	; (d4170 <_ZN12SdFileSystemI9SdSpiCardE10errorPrintEP5Print.part.8.constprop.12+0x38>)
   d4154:	4620      	mov	r0, r4
   d4156:	f002 f9fe 	bl	d6556 <_ZN5Print5printEPK19__FlashStringHelper>
    pr->println(cardErrorData(), HEX);
   d415a:	f895 1469 	ldrb.w	r1, [r5, #1129]	; 0x469
   d415e:	4620      	mov	r0, r4
   d4160:	2210      	movs	r2, #16
  }
   d4162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      return;
    }
    pr->print(F("SD errorCode: 0X"));
    pr->print(cardErrorCode(), HEX);
    pr->print(F(",0X"));
    pr->println(cardErrorData(), HEX);
   d4166:	f002 ba41 	b.w	d65ec <_ZN5Print7printlnEmi>
   d416a:	bf00      	nop
   d416c:	000d709a 	.word	0x000d709a
   d4170:	000d70ab 	.word	0x000d70ab

000d4174 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d4174:	b530      	push	{r4, r5, lr}
   d4176:	b085      	sub	sp, #20
    SPI_CLK_CORE = 72*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d4178:	4b1c      	ldr	r3, [pc, #112]	; (d41ec <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
   d417a:	9300      	str	r3, [sp, #0]
   d417c:	7913      	ldrb	r3, [r2, #4]
   d417e:	f88d 3004 	strb.w	r3, [sp, #4]
   d4182:	6893      	ldr	r3, [r2, #8]
   d4184:	9302      	str	r3, [sp, #8]
   d4186:	7b13      	ldrb	r3, [r2, #12]
   d4188:	f88d 300c 	strb.w	r3, [sp, #12]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d418c:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d4190:	7b53      	ldrb	r3, [r2, #13]
   d4192:	f88d 300d 	strb.w	r3, [sp, #13]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d4196:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4198:	460a      	mov	r2, r1
   d419a:	466b      	mov	r3, sp
   d419c:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d41a0:	4628      	mov	r0, r5
   d41a2:	f001 fae9 	bl	d5778 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d41a6:	b1f0      	cbz	r0, d41e6 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d41a8:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d41aa:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d41ae:	4628      	mov	r0, r5
   d41b0:	f000 fc38 	bl	d4a24 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d41b4:	2101      	movs	r1, #1
   d41b6:	4620      	mov	r0, r4
   d41b8:	f001 f983 	bl	d54c2 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d41bc:	4601      	mov	r1, r0
   d41be:	b168      	cbz	r0, d41dc <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
   d41c0:	4621      	mov	r1, r4
   d41c2:	4628      	mov	r0, r5
   d41c4:	f000 fa59 	bl	d467a <_ZN7FatFile8openRootEP9FatVolume>
   d41c8:	b168      	cbz	r0, d41e6 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d41ca:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d41ce:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d41d2:	bf16      	itet	ne
   d41d4:	4b06      	ldrne	r3, [pc, #24]	; (d41f0 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
   d41d6:	4618      	moveq	r0, r3
   d41d8:	601d      	strne	r5, [r3, #0]
   d41da:	e005      	b.n	d41e8 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d41dc:	4620      	mov	r0, r4
   d41de:	f001 f970 	bl	d54c2 <_ZN9FatVolume4initEh>
   d41e2:	2800      	cmp	r0, #0
   d41e4:	d1ec      	bne.n	d41c0 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
   d41e6:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d41e8:	b005      	add	sp, #20
   d41ea:	bd30      	pop	{r4, r5, pc}
   d41ec:	000d702c 	.word	0x000d702c
   d41f0:	2003e470 	.word	0x2003e470

000d41f4 <_Z11writeHeaderv>:
// User functions.  Edit writeHeader() and logData() for your requirements.

const uint8_t ANALOG_COUNT = 4;
//------------------------------------------------------------------------------
// Write data header.
void writeHeader() {
   d41f4:	b510      	push	{r4, lr}
  file.print(F("micros"));
   d41f6:	490b      	ldr	r1, [pc, #44]	; (d4224 <_Z11writeHeaderv+0x30>)
   d41f8:	480b      	ldr	r0, [pc, #44]	; (d4228 <_Z11writeHeaderv+0x34>)
   d41fa:	f002 f9ac 	bl	d6556 <_ZN5Print5printEPK19__FlashStringHelper>
   d41fe:	2400      	movs	r4, #0
  for (uint8_t i = 0; i < ANALOG_COUNT; i++) {
    file.print(F(",adc"));
   d4200:	490a      	ldr	r1, [pc, #40]	; (d422c <_Z11writeHeaderv+0x38>)
   d4202:	4809      	ldr	r0, [pc, #36]	; (d4228 <_Z11writeHeaderv+0x34>)
   d4204:	f002 f9a7 	bl	d6556 <_ZN5Print5printEPK19__FlashStringHelper>
    file.print(i, DEC);
   d4208:	b2e1      	uxtb	r1, r4
   d420a:	220a      	movs	r2, #10
   d420c:	4806      	ldr	r0, [pc, #24]	; (d4228 <_Z11writeHeaderv+0x34>)
   d420e:	3401      	adds	r4, #1
   d4210:	f002 f9ea 	bl	d65e8 <_ZN5Print5printEhi>
const uint8_t ANALOG_COUNT = 4;
//------------------------------------------------------------------------------
// Write data header.
void writeHeader() {
  file.print(F("micros"));
  for (uint8_t i = 0; i < ANALOG_COUNT; i++) {
   d4214:	2c04      	cmp	r4, #4
   d4216:	d1f3      	bne.n	d4200 <_Z11writeHeaderv+0xc>
    file.print(F(",adc"));
    file.print(i, DEC);
  }
  file.println();
   d4218:	4803      	ldr	r0, [pc, #12]	; (d4228 <_Z11writeHeaderv+0x34>)
}
   d421a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  file.print(F("micros"));
  for (uint8_t i = 0; i < ANALOG_COUNT; i++) {
    file.print(F(",adc"));
    file.print(i, DEC);
  }
  file.println();
   d421e:	f002 b99e 	b.w	d655e <_ZN5Print7printlnEv>
   d4222:	bf00      	nop
   d4224:	000d70af 	.word	0x000d70af
   d4228:	2003dfb4 	.word	0x2003dfb4
   d422c:	000d70b6 	.word	0x000d70b6

000d4230 <_Z7logDatav>:
}
//------------------------------------------------------------------------------
// Log a data record.
void logData() {
   d4230:	b513      	push	{r0, r1, r4, lr}
   d4232:	2400      	movs	r4, #0
  uint16_t data[ANALOG_COUNT];

  // Read all channels to avoid SD write latency between readings.
  for (uint8_t i = 0; i < ANALOG_COUNT; i++) {
    data[i] = analogRead(i);
   d4234:	b2a0      	uxth	r0, r4
   d4236:	f002 fce3 	bl	d6c00 <analogRead>
   d423a:	f82d 0014 	strh.w	r0, [sp, r4, lsl #1]
   d423e:	3401      	adds	r4, #1
// Log a data record.
void logData() {
  uint16_t data[ANALOG_COUNT];

  // Read all channels to avoid SD write latency between readings.
  for (uint8_t i = 0; i < ANALOG_COUNT; i++) {
   d4240:	2c04      	cmp	r4, #4
   d4242:	d1f7      	bne.n	d4234 <_Z7logDatav+0x4>
    data[i] = analogRead(i);
  }
  // Write data to file.  Start with log time in micros.
  file.print(logTime);
   d4244:	4b0c      	ldr	r3, [pc, #48]	; (d4278 <_Z7logDatav+0x48>)
   d4246:	480d      	ldr	r0, [pc, #52]	; (d427c <_Z7logDatav+0x4c>)
   d4248:	6819      	ldr	r1, [r3, #0]
   d424a:	220a      	movs	r2, #10
   d424c:	f002 f9bf 	bl	d65ce <_ZN5Print5printEmi>
   d4250:	2400      	movs	r4, #0

  // Write ADC data to CSV record.
  for (uint8_t i = 0; i < ANALOG_COUNT; i++) {
    file.write(',');
   d4252:	212c      	movs	r1, #44	; 0x2c
   d4254:	4809      	ldr	r0, [pc, #36]	; (d427c <_Z7logDatav+0x4c>)
   d4256:	f7ff ff30 	bl	d40ba <_ZN9PrintFile5writeEh>
    file.print(data[i]);
   d425a:	f83d 1014 	ldrh.w	r1, [sp, r4, lsl #1]
   d425e:	4807      	ldr	r0, [pc, #28]	; (d427c <_Z7logDatav+0x4c>)
   d4260:	220a      	movs	r2, #10
   d4262:	3401      	adds	r4, #1
   d4264:	f002 f9ee 	bl	d6644 <_ZN5Print5printEii>
  }
  // Write data to file.  Start with log time in micros.
  file.print(logTime);

  // Write ADC data to CSV record.
  for (uint8_t i = 0; i < ANALOG_COUNT; i++) {
   d4268:	2c04      	cmp	r4, #4
   d426a:	d1f2      	bne.n	d4252 <_Z7logDatav+0x22>
    file.write(',');
    file.print(data[i]);
  }
  file.println();
   d426c:	4803      	ldr	r0, [pc, #12]	; (d427c <_Z7logDatav+0x4c>)
}
   d426e:	b002      	add	sp, #8
   d4270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  // Write ADC data to CSV record.
  for (uint8_t i = 0; i < ANALOG_COUNT; i++) {
    file.write(',');
    file.print(data[i]);
  }
  file.println();
   d4274:	f002 b973 	b.w	d655e <_ZN5Print7printlnEv>
   d4278:	2003e46c 	.word	0x2003e46c
   d427c:	2003dfb4 	.word	0x2003dfb4

000d4280 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv>:
    pr->print(F("error: "));
    pr->println(msg);
    errorPrint(pr);
  }
  /** %Print any SD error code and halt. */
  void initErrorHalt() {
   d4280:	b508      	push	{r3, lr}
   d4282:	4604      	mov	r4, r0
    initErrorHalt(&Serial);
   d4284:	f002 fbde 	bl	d6a44 <_Z16_fetch_usbserialv>
  /** Print error details after begin() fails.
   *
   * \param[in] pr Print destination.
   */
  void initErrorPrint(Print* pr) {
    if (cardErrorCode()) {
   d4288:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
    pr->println(msg);
    errorPrint(pr);
  }
  /** %Print any SD error code and halt. */
  void initErrorHalt() {
    initErrorHalt(&Serial);
   d428c:	4605      	mov	r5, r0
  /** Print error details after begin() fails.
   *
   * \param[in] pr Print destination.
   */
  void initErrorPrint(Print* pr) {
    if (cardErrorCode()) {
   d428e:	b193      	cbz	r3, d42b6 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x36>
      pr->println(F("Can't access SD card. Do not reformat."));
   d4290:	4910      	ldr	r1, [pc, #64]	; (d42d4 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x54>)
   d4292:	f002 f97a 	bl	d658a <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (cardErrorCode() == SD_CARD_ERROR_CMD0) {
   d4296:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
   d429a:	2b20      	cmp	r3, #32
   d429c:	d103      	bne.n	d42a6 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x26>
        pr->println(F("No card, wrong chip select pin, or SPI problem?"));
   d429e:	490e      	ldr	r1, [pc, #56]	; (d42d8 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x58>)
   d42a0:	4628      	mov	r0, r5
   d42a2:	f002 f972 	bl	d658a <_ZN5Print7printlnEPK19__FlashStringHelper>
  }
  /** %Print any SD error code.
   * \param[in] pr Print device.
   */
  void errorPrint(Print* pr) {
    if (!cardErrorCode()) {
   d42a6:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
   d42aa:	b183      	cbz	r3, d42ce <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x4e>
   d42ac:	4629      	mov	r1, r5
   d42ae:	4620      	mov	r0, r4
   d42b0:	f7ff ff42 	bl	d4138 <_ZN12SdFileSystemI9SdSpiCardE10errorPrintEP5Print.part.8.constprop.12>
   d42b4:	e00b      	b.n	d42ce <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x4e>
      pr->println(F("Can't access SD card. Do not reformat."));
      if (cardErrorCode() == SD_CARD_ERROR_CMD0) {
        pr->println(F("No card, wrong chip select pin, or SPI problem?"));
      }
      errorPrint(pr);
    } else if (vol()->fatType() == 0) {
   d42b6:	79e3      	ldrb	r3, [r4, #7]
   d42b8:	b90b      	cbnz	r3, d42be <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x3e>
      pr->println(F("Invalid format, reformat SD."));
   d42ba:	4908      	ldr	r1, [pc, #32]	; (d42dc <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x5c>)
   d42bc:	e005      	b.n	d42ca <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x4a>
    } else if (!vwd()->isOpen()) {
   d42be:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d42c2:	b90b      	cbnz	r3, d42c8 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x48>
      pr->println(F("Can't open root directory."));
   d42c4:	4906      	ldr	r1, [pc, #24]	; (d42e0 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x60>)
   d42c6:	e000      	b.n	d42ca <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x4a>
    } else {
      pr->println(F("No error found."));
   d42c8:	4906      	ldr	r1, [pc, #24]	; (d42e4 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x64>)
   d42ca:	f002 f95e 	bl	d658a <_ZN5Print7printlnEPK19__FlashStringHelper>
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   d42ce:	f001 fc83 	bl	d5bd8 <os_thread_yield>
   d42d2:	e7fc      	b.n	d42ce <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x4e>
   d42d4:	000d70bb 	.word	0x000d70bb
   d42d8:	000d70e2 	.word	0x000d70e2
   d42dc:	000d7112 	.word	0x000d7112
   d42e0:	000d712f 	.word	0x000d712f
   d42e4:	000d714a 	.word	0x000d714a

000d42e8 <_ZN12SdFileSystemI9SdSpiCardE9errorHaltEPK19__FlashStringHelper>:
#if defined(ARDUINO) || defined(DOXYGEN)
  /** %Print msg, any SD error code, and halt.
   *
   * \param[in] msg Message to print.
   */
  void errorHalt(const __FlashStringHelper* msg) {
   d42e8:	b508      	push	{r3, lr}
   d42ea:	460e      	mov	r6, r1
   d42ec:	4604      	mov	r4, r0
    errorHalt(&Serial, msg);
   d42ee:	f002 fba9 	bl	d6a44 <_Z16_fetch_usbserialv>
   *
   * \param[in] pr Print destination.
   * \param[in] msg Message to print.
   */
  void errorPrint(Print* pr, const __FlashStringHelper* msg) {
    pr->print(F("error: "));
   d42f2:	4909      	ldr	r1, [pc, #36]	; (d4318 <_ZN12SdFileSystemI9SdSpiCardE9errorHaltEPK19__FlashStringHelper+0x30>)
  /** %Print msg, any SD error code, and halt.
   *
   * \param[in] msg Message to print.
   */
  void errorHalt(const __FlashStringHelper* msg) {
    errorHalt(&Serial, msg);
   d42f4:	4605      	mov	r5, r0
   *
   * \param[in] pr Print destination.
   * \param[in] msg Message to print.
   */
  void errorPrint(Print* pr, const __FlashStringHelper* msg) {
    pr->print(F("error: "));
   d42f6:	f002 f92e 	bl	d6556 <_ZN5Print5printEPK19__FlashStringHelper>
    pr->println(msg);
   d42fa:	4631      	mov	r1, r6
   d42fc:	4628      	mov	r0, r5
   d42fe:	f002 f944 	bl	d658a <_ZN5Print7printlnEPK19__FlashStringHelper>
  }
  /** %Print any SD error code.
   * \param[in] pr Print device.
   */
  void errorPrint(Print* pr) {
    if (!cardErrorCode()) {
   d4302:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
   d4306:	b11b      	cbz	r3, d4310 <_ZN12SdFileSystemI9SdSpiCardE9errorHaltEPK19__FlashStringHelper+0x28>
   d4308:	4629      	mov	r1, r5
   d430a:	4620      	mov	r0, r4
   d430c:	f7ff ff14 	bl	d4138 <_ZN12SdFileSystemI9SdSpiCardE10errorPrintEP5Print.part.8.constprop.12>
   d4310:	f001 fc62 	bl	d5bd8 <os_thread_yield>
   d4314:	e7fc      	b.n	d4310 <_ZN12SdFileSystemI9SdSpiCardE9errorHaltEPK19__FlashStringHelper+0x28>
   d4316:	bf00      	nop
   d4318:	000d715a 	.word	0x000d715a

000d431c <setup>:
//==============================================================================
// Error messages stored in flash.
#define error(msg) sd.errorHalt(F(msg))
//------------------------------------------------------------------------------
SYSTEM_MODE(MANUAL);
void setup() {
   d431c:	b530      	push	{r4, r5, lr}
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d431e:	4851      	ldr	r0, [pc, #324]	; (d4464 <setup+0x148>)
   d4320:	2300      	movs	r3, #0
   d4322:	b08f      	sub	sp, #60	; 0x3c
   d4324:	461a      	mov	r2, r3
   d4326:	4619      	mov	r1, r3
   d4328:	6840      	ldr	r0, [r0, #4]
   d432a:	f001 fe41 	bl	d5fb0 <network_off>
  Cellular.off();
  
  const uint8_t BASE_NAME_SIZE = sizeof(FILE_BASE_NAME) - 1;
  char fileName[13] = FILE_BASE_NAME "00.csv";
   d432e:	4a4e      	ldr	r2, [pc, #312]	; (d4468 <setup+0x14c>)
   d4330:	6851      	ldr	r1, [r2, #4]
   d4332:	6810      	ldr	r0, [r2, #0]
   d4334:	ab01      	add	r3, sp, #4
   d4336:	c303      	stmia	r3!, {r0, r1}
   d4338:	8911      	ldrh	r1, [r2, #8]
   d433a:	7a92      	ldrb	r2, [r2, #10]
   d433c:	8019      	strh	r1, [r3, #0]
   d433e:	709a      	strb	r2, [r3, #2]
   d4340:	2300      	movs	r3, #0
   d4342:	f8ad 300f 	strh.w	r3, [sp, #15]

  Serial.begin(9600);
   d4346:	f002 fb7d 	bl	d6a44 <_Z16_fetch_usbserialv>
   d434a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d434e:	f002 fb67 	bl	d6a20 <_ZN9USBSerial5beginEl>
  
  // Wait for USB Serial 
  while (!Serial) {
   d4352:	f002 fb77 	bl	d6a44 <_Z16_fetch_usbserialv>
   d4356:	f002 fb6a 	bl	d6a2e <_ZN9USBSerialcvbEv>
   d435a:	b910      	cbnz	r0, d4362 <setup+0x46>
   d435c:	f001 fc3c 	bl	d5bd8 <os_thread_yield>
   d4360:	e7f7      	b.n	d4352 <setup+0x36>
    SysCall::yield();
  }
  delay(1000);
   d4362:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4366:	f001 fe63 	bl	d6030 <delay>

  Serial.println(F("Type any character to start"));
   d436a:	f002 fb6b 	bl	d6a44 <_Z16_fetch_usbserialv>
   d436e:	493f      	ldr	r1, [pc, #252]	; (d446c <setup+0x150>)
   d4370:	f002 f90b 	bl	d658a <_ZN5Print7printlnEPK19__FlashStringHelper>
  while (!Serial.available()) {
   d4374:	f002 fb66 	bl	d6a44 <_Z16_fetch_usbserialv>
   d4378:	6803      	ldr	r3, [r0, #0]
   d437a:	691b      	ldr	r3, [r3, #16]
   d437c:	4798      	blx	r3
   d437e:	b910      	cbnz	r0, d4386 <setup+0x6a>
   d4380:	f001 fc2a 	bl	d5bd8 <os_thread_yield>
   d4384:	e7f6      	b.n	d4374 <setup+0x58>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d4386:	4b3a      	ldr	r3, [pc, #232]	; (d4470 <setup+0x154>)
   d4388:	9305      	str	r3, [sp, #20]
   d438a:	4b3a      	ldr	r3, [pc, #232]	; (d4474 <setup+0x158>)
   d438c:	9307      	str	r3, [sp, #28]
   d438e:	2400      	movs	r4, #0
   d4390:	2301      	movs	r3, #1
    SysCall::yield();
  }
  
  // Initialize at the highest speed supported by the board that is
  // not over 50 MHz. Try a lower speed if SPI errors occur.
  if (!sd.begin(chipSelect, SD_SCK_MHZ(50))) {
   d4392:	aa05      	add	r2, sp, #20
   d4394:	210e      	movs	r1, #14
   d4396:	4838      	ldr	r0, [pc, #224]	; (d4478 <setup+0x15c>)
   d4398:	f88d 4018 	strb.w	r4, [sp, #24]
   d439c:	f88d 3020 	strb.w	r3, [sp, #32]
   d43a0:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d43a4:	f7ff fee6 	bl	d4174 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
   d43a8:	b910      	cbnz	r0, d43b0 <setup+0x94>
    sd.initErrorHalt();
   d43aa:	4833      	ldr	r0, [pc, #204]	; (d4478 <setup+0x15c>)
   d43ac:	f7ff ff68 	bl	d4280 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv>
  }
  while (sd.exists(fileName)) {
    if (fileName[BASE_NAME_SIZE + 1] != '9') {
      fileName[BASE_NAME_SIZE + 1]++;
    } else if (fileName[BASE_NAME_SIZE] != '9') {
      fileName[BASE_NAME_SIZE + 1] = '0';
   d43b0:	2530      	movs	r5, #48	; 0x30
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d43b2:	2300      	movs	r3, #0
   d43b4:	aa01      	add	r2, sp, #4
   d43b6:	4931      	ldr	r1, [pc, #196]	; (d447c <setup+0x160>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d43b8:	f88d 4014 	strb.w	r4, [sp, #20]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d43bc:	a805      	add	r0, sp, #20
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d43be:	f88d 4015 	strb.w	r4, [sp, #21]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d43c2:	f000 fb36 	bl	d4a32 <_ZN7FatFile4openEPS_PKci>

  // Find an unused file name.
  if (BASE_NAME_SIZE > 6) {
    error("FILE_BASE_NAME too long");
  }
  while (sd.exists(fileName)) {
   d43c6:	b198      	cbz	r0, d43f0 <setup+0xd4>
    if (fileName[BASE_NAME_SIZE + 1] != '9') {
   d43c8:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d43cc:	2b39      	cmp	r3, #57	; 0x39
   d43ce:	d003      	beq.n	d43d8 <setup+0xbc>
      fileName[BASE_NAME_SIZE + 1]++;
   d43d0:	3301      	adds	r3, #1
   d43d2:	f88d 3009 	strb.w	r3, [sp, #9]
   d43d6:	e7ec      	b.n	d43b2 <setup+0x96>
    } else if (fileName[BASE_NAME_SIZE] != '9') {
   d43d8:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d43dc:	2b39      	cmp	r3, #57	; 0x39
   d43de:	d005      	beq.n	d43ec <setup+0xd0>
      fileName[BASE_NAME_SIZE + 1] = '0';
      fileName[BASE_NAME_SIZE]++;
   d43e0:	3301      	adds	r3, #1
  }
  while (sd.exists(fileName)) {
    if (fileName[BASE_NAME_SIZE + 1] != '9') {
      fileName[BASE_NAME_SIZE + 1]++;
    } else if (fileName[BASE_NAME_SIZE] != '9') {
      fileName[BASE_NAME_SIZE + 1] = '0';
   d43e2:	f88d 5009 	strb.w	r5, [sp, #9]
      fileName[BASE_NAME_SIZE]++;
   d43e6:	f88d 3008 	strb.w	r3, [sp, #8]
   d43ea:	e7e2      	b.n	d43b2 <setup+0x96>
    } else {
      error("Can't create file name");
   d43ec:	4924      	ldr	r1, [pc, #144]	; (d4480 <setup+0x164>)
   d43ee:	e009      	b.n	d4404 <setup+0xe8>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d43f0:	4924      	ldr	r1, [pc, #144]	; (d4484 <setup+0x168>)
   d43f2:	4825      	ldr	r0, [pc, #148]	; (d4488 <setup+0x16c>)
   d43f4:	6809      	ldr	r1, [r1, #0]
   d43f6:	f640 2301 	movw	r3, #2561	; 0xa01
   d43fa:	aa01      	add	r2, sp, #4
   d43fc:	f000 fb19 	bl	d4a32 <_ZN7FatFile4openEPS_PKci>
    }
  }
  if (!file.open(fileName, O_WRONLY | O_CREAT | O_EXCL)) {
   d4400:	b950      	cbnz	r0, d4418 <setup+0xfc>
    error("file.open");
   d4402:	4922      	ldr	r1, [pc, #136]	; (d448c <setup+0x170>)
   d4404:	481c      	ldr	r0, [pc, #112]	; (d4478 <setup+0x15c>)
   d4406:	f7ff ff6f 	bl	d42e8 <_ZN12SdFileSystemI9SdSpiCardE9errorHaltEPK19__FlashStringHelper>
  }
  // Read any Serial data.
  do {
    delay(10);
  } while (Serial.available() && Serial.read() >= 0);
   d440a:	f002 fb1b 	bl	d6a44 <_Z16_fetch_usbserialv>
   d440e:	6803      	ldr	r3, [r0, #0]
   d4410:	695b      	ldr	r3, [r3, #20]
   d4412:	4798      	blx	r3
   d4414:	2800      	cmp	r0, #0
   d4416:	db09      	blt.n	d442c <setup+0x110>
  if (!file.open(fileName, O_WRONLY | O_CREAT | O_EXCL)) {
    error("file.open");
  }
  // Read any Serial data.
  do {
    delay(10);
   d4418:	200a      	movs	r0, #10
   d441a:	f001 fe09 	bl	d6030 <delay>
  } while (Serial.available() && Serial.read() >= 0);
   d441e:	f002 fb11 	bl	d6a44 <_Z16_fetch_usbserialv>
   d4422:	6803      	ldr	r3, [r0, #0]
   d4424:	691b      	ldr	r3, [r3, #16]
   d4426:	4798      	blx	r3
   d4428:	2800      	cmp	r0, #0
   d442a:	d1ee      	bne.n	d440a <setup+0xee>

  Serial.print(F("Logging to: "));
   d442c:	f002 fb0a 	bl	d6a44 <_Z16_fetch_usbserialv>
   d4430:	4917      	ldr	r1, [pc, #92]	; (d4490 <setup+0x174>)
   d4432:	f002 f890 	bl	d6556 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(fileName);
   d4436:	f002 fb05 	bl	d6a44 <_Z16_fetch_usbserialv>
   d443a:	a901      	add	r1, sp, #4
   d443c:	f002 f89b 	bl	d6576 <_ZN5Print7printlnEPKc>
  Serial.println(F("Type any character to stop"));
   d4440:	f002 fb00 	bl	d6a44 <_Z16_fetch_usbserialv>
   d4444:	4913      	ldr	r1, [pc, #76]	; (d4494 <setup+0x178>)
   d4446:	f002 f8a0 	bl	d658a <_ZN5Print7printlnEPK19__FlashStringHelper>

  // Write data header.
  writeHeader();
   d444a:	f7ff fed3 	bl	d41f4 <_Z11writeHeaderv>

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d444e:	f001 fc03 	bl	d5c58 <HAL_Timer_Get_Micro_Seconds>

  // Start on a multiple of the sample interval.
  logTime = micros()/(1000UL*SAMPLE_INTERVAL_MS) + 1;
  logTime *= 1000UL*SAMPLE_INTERVAL_MS;
   d4452:	4b11      	ldr	r3, [pc, #68]	; (d4498 <setup+0x17c>)
   d4454:	4a11      	ldr	r2, [pc, #68]	; (d449c <setup+0x180>)
   d4456:	fbb0 f0f3 	udiv	r0, r0, r3
   d445a:	fb00 3303 	mla	r3, r0, r3, r3
   d445e:	6013      	str	r3, [r2, #0]
}
   d4460:	b00f      	add	sp, #60	; 0x3c
   d4462:	bd30      	pop	{r4, r5, pc}
   d4464:	2003e480 	.word	0x2003e480
   d4468:	000d7048 	.word	0x000d7048
   d446c:	000d7162 	.word	0x000d7162
   d4470:	000d702c 	.word	0x000d702c
   d4474:	02faf080 	.word	0x02faf080
   d4478:	2003dfe8 	.word	0x2003dfe8
   d447c:	2003e424 	.word	0x2003e424
   d4480:	000d717e 	.word	0x000d717e
   d4484:	2003e470 	.word	0x2003e470
   d4488:	2003dfbc 	.word	0x2003dfbc
   d448c:	000d7195 	.word	0x000d7195
   d4490:	000d719f 	.word	0x000d719f
   d4494:	000d71ac 	.word	0x000d71ac
   d4498:	000f4240 	.word	0x000f4240
   d449c:	2003e46c 	.word	0x2003e46c

000d44a0 <loop>:
//------------------------------------------------------------------------------
void loop() {
   d44a0:	b510      	push	{r4, lr}
  // Time for next record.
  logTime += 1000UL*SAMPLE_INTERVAL_MS;
   d44a2:	4b19      	ldr	r3, [pc, #100]	; (d4508 <loop+0x68>)
   d44a4:	681a      	ldr	r2, [r3, #0]
   d44a6:	f502 2274 	add.w	r2, r2, #999424	; 0xf4000
   d44aa:	f502 7210 	add.w	r2, r2, #576	; 0x240
   d44ae:	601a      	str	r2, [r3, #0]
   d44b0:	461c      	mov	r4, r3
   d44b2:	f001 fbd1 	bl	d5c58 <HAL_Timer_Get_Micro_Seconds>

  // Wait for log time.
  int32_t diff;
  do {
    diff = micros() - logTime;
   d44b6:	6823      	ldr	r3, [r4, #0]
  } while (diff < 0);
   d44b8:	1ac0      	subs	r0, r0, r3
   d44ba:	d4fa      	bmi.n	d44b2 <loop+0x12>

  // Check for data rate too high.
  if (diff > 10) {
   d44bc:	280a      	cmp	r0, #10
   d44be:	dd01      	ble.n	d44c4 <loop+0x24>
    error("Missed data record");
   d44c0:	4912      	ldr	r1, [pc, #72]	; (d450c <loop+0x6c>)
   d44c2:	e00b      	b.n	d44dc <loop+0x3c>
  }

  logData();

  // Force data to SD and update the directory entry to avoid data loss.
  if (!file.sync() || file.getWriteError()) {
   d44c4:	4c12      	ldr	r4, [pc, #72]	; (d4510 <loop+0x70>)
  // Check for data rate too high.
  if (diff > 10) {
    error("Missed data record");
  }

  logData();
   d44c6:	f7ff feb3 	bl	d4230 <_Z7logDatav>

  // Force data to SD and update the directory entry to avoid data loss.
  if (!file.sync() || file.getWriteError()) {
   d44ca:	f104 0008 	add.w	r0, r4, #8
   d44ce:	f000 fa73 	bl	d49b8 <_ZN7FatFile4syncEv>
   d44d2:	b110      	cbz	r0, d44da <loop+0x3a>
   d44d4:	7a63      	ldrb	r3, [r4, #9]
   d44d6:	07db      	lsls	r3, r3, #31
   d44d8:	d503      	bpl.n	d44e2 <loop+0x42>
    error("write error");
   d44da:	490e      	ldr	r1, [pc, #56]	; (d4514 <loop+0x74>)
   d44dc:	480e      	ldr	r0, [pc, #56]	; (d4518 <loop+0x78>)
   d44de:	f7ff ff03 	bl	d42e8 <_ZN12SdFileSystemI9SdSpiCardE9errorHaltEPK19__FlashStringHelper>
  }

  if (Serial.available()) {
   d44e2:	f002 faaf 	bl	d6a44 <_Z16_fetch_usbserialv>
   d44e6:	6803      	ldr	r3, [r0, #0]
   d44e8:	691b      	ldr	r3, [r3, #16]
   d44ea:	4798      	blx	r3
   d44ec:	b158      	cbz	r0, d4506 <loop+0x66>
    // Close file and stop.
    file.close();
   d44ee:	f104 0008 	add.w	r0, r4, #8
   d44f2:	f000 fa97 	bl	d4a24 <_ZN7FatFile5closeEv>
    Serial.println(F("Done"));
   d44f6:	f002 faa5 	bl	d6a44 <_Z16_fetch_usbserialv>
   d44fa:	4908      	ldr	r1, [pc, #32]	; (d451c <loop+0x7c>)
   d44fc:	f002 f845 	bl	d658a <_ZN5Print7printlnEPK19__FlashStringHelper>
   d4500:	f001 fb6a 	bl	d5bd8 <os_thread_yield>
   d4504:	e7fc      	b.n	d4500 <loop+0x60>
    SysCall::halt();
  }
   d4506:	bd10      	pop	{r4, pc}
   d4508:	2003e46c 	.word	0x2003e46c
   d450c:	000d71c7 	.word	0x000d71c7
   d4510:	2003dfb4 	.word	0x2003dfb4
   d4514:	000d71df 	.word	0x000d71df
   d4518:	2003dfe8 	.word	0x2003dfe8
   d451c:	000d71da 	.word	0x000d71da

000d4520 <_GLOBAL__sub_I_sd>:
   d4520:	b510      	push	{r4, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4522:	f001 fba9 	bl	d5c78 <HAL_Pin_Map>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4526:	4b18      	ldr	r3, [pc, #96]	; (d4588 <_GLOBAL__sub_I_sd+0x68>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4528:	4818      	ldr	r0, [pc, #96]	; (d458c <_GLOBAL__sub_I_sd+0x6c>)
//------------------------------------------------------------------------------
// File system object.
SdFat sd;

// Log file.
SdFile file;
   d452a:	4919      	ldr	r1, [pc, #100]	; (d4590 <_GLOBAL__sub_I_sd+0x70>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d452c:	2264      	movs	r2, #100	; 0x64
   d452e:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  {
  }

  __SPISettings()
  {
   d4532:	4a18      	ldr	r2, [pc, #96]	; (d4594 <_GLOBAL__sub_I_sd+0x74>)
   d4534:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   d4538:	2201      	movs	r2, #1
   d453a:	2400      	movs	r4, #0
   d453c:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4540:	4a15      	ldr	r2, [pc, #84]	; (d4598 <_GLOBAL__sub_I_sd+0x78>)
   d4542:	71dc      	strb	r4, [r3, #7]
   d4544:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
   d4548:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
   d454c:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
   d4550:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   d4554:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
   d4558:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
   d455c:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   d4560:	7204      	strb	r4, [r0, #8]
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
   d4562:	4b0e      	ldr	r3, [pc, #56]	; (d459c <_GLOBAL__sub_I_sd+0x7c>)
   d4564:	7244      	strb	r4, [r0, #9]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4566:	6044      	str	r4, [r0, #4]
   d4568:	4a0d      	ldr	r2, [pc, #52]	; (d45a0 <_GLOBAL__sub_I_sd+0x80>)
   d456a:	6003      	str	r3, [r0, #0]
   d456c:	f002 fba2 	bl	d6cb4 <__aeabi_atexit>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4570:	4b0c      	ldr	r3, [pc, #48]	; (d45a4 <_GLOBAL__sub_I_sd+0x84>)
   d4572:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4576:	701c      	strb	r4, [r3, #0]
   d4578:	805c      	strh	r4, [r3, #2]
   d457a:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d457c:	2003      	movs	r0, #3
    // Close file and stop.
    file.close();
    Serial.println(F("Done"));
    SysCall::halt();
  }
   d457e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4582:	f001 bcb9 	b.w	d5ef8 <set_system_mode>
   d4586:	bf00      	nop
   d4588:	2003dfe8 	.word	0x2003dfe8
   d458c:	2003dfb4 	.word	0x2003dfb4
   d4590:	000d40b3 	.word	0x000d40b3
   d4594:	000d702c 	.word	0x000d702c
   d4598:	2003e730 	.word	0x2003e730
   d459c:	000d7038 	.word	0x000d7038
   d45a0:	2003dfb0 	.word	0x2003dfb0
   d45a4:	2003dfe0 	.word	0x2003dfe0

000d45a8 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d45a8:	f001 bb66 	b.w	d5c78 <HAL_Pin_Map>

000d45ac <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d45ac:	b510      	push	{r4, lr}
   d45ae:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d45b0:	3024      	adds	r0, #36	; 0x24
   d45b2:	f000 fe77 	bl	d52a4 <_ZN8FatCache4syncEv>
   d45b6:	b128      	cbz	r0, d45c4 <_ZN9FatVolume9cacheSyncEv+0x18>
   d45b8:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d45bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d45c0:	f000 be70 	b.w	d52a4 <_ZN8FatCache4syncEv>
  }
   d45c4:	bd10      	pop	{r4, pc}

000d45c6 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d45c6:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d45c8:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d45ca:	f043 0304 	orr.w	r3, r3, #4
   d45ce:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d45d0:	f100 0210 	add.w	r2, r0, #16
   d45d4:	6880      	ldr	r0, [r0, #8]
   d45d6:	f000 bf1b 	b.w	d5410 <_ZN9FatVolume15allocateClusterEmPm>
	...

000d45dc <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d45dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d45e0:	7803      	ldrb	r3, [r0, #0]
   d45e2:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d45e6:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d45e8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d45ec:	b10b      	cbz	r3, d45f2 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d45ee:	2600      	movs	r6, #0
   d45f0:	e02e      	b.n	d4650 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d45f2:	6942      	ldr	r2, [r0, #20]
   d45f4:	4b18      	ldr	r3, [pc, #96]	; (d4658 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d45f6:	429a      	cmp	r2, r3
   d45f8:	d8f9      	bhi.n	d45ee <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d45fa:	f7ff ffe4 	bl	d45c6 <_ZN7FatFile10addClusterEv>
   d45fe:	4606      	mov	r6, r0
   d4600:	2800      	cmp	r0, #0
   d4602:	d0f4      	beq.n	d45ee <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d4604:	6921      	ldr	r1, [r4, #16]
   d4606:	68a0      	ldr	r0, [r4, #8]
   d4608:	f000 fe97 	bl	d533a <_ZNK9FatVolume17clusterFirstBlockEm>
   d460c:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d460e:	68a0      	ldr	r0, [r4, #8]
   d4610:	2205      	movs	r2, #5
   d4612:	4639      	mov	r1, r7
   d4614:	3024      	adds	r0, #36	; 0x24
   d4616:	f000 fe6c 	bl	d52f2 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d461a:	4680      	mov	r8, r0
   d461c:	2800      	cmp	r0, #0
   d461e:	d0e6      	beq.n	d45ee <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d4620:	4629      	mov	r1, r5
   d4622:	f44f 7200 	mov.w	r2, #512	; 0x200
   d4626:	f002 fcbb 	bl	d6fa0 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d462a:	2501      	movs	r5, #1
   d462c:	68a3      	ldr	r3, [r4, #8]
   d462e:	791a      	ldrb	r2, [r3, #4]
   d4630:	42aa      	cmp	r2, r5
   d4632:	d909      	bls.n	d4648 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d4634:	4642      	mov	r2, r8
   d4636:	19e9      	adds	r1, r5, r7
   d4638:	6818      	ldr	r0, [r3, #0]
   d463a:	f001 f9db 	bl	d59f4 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d463e:	2800      	cmp	r0, #0
   d4640:	d0d5      	beq.n	d45ee <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d4642:	3501      	adds	r5, #1
   d4644:	b2ed      	uxtb	r5, r5
   d4646:	e7f1      	b.n	d462c <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d4648:	6963      	ldr	r3, [r4, #20]
   d464a:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d464e:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d4650:	4630      	mov	r0, r6
   d4652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4656:	bf00      	nop
   d4658:	001ffdff 	.word	0x001ffdff

000d465c <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d465c:	b510      	push	{r4, lr}
   d465e:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d4660:	6880      	ldr	r0, [r0, #8]
   d4662:	460a      	mov	r2, r1
   d4664:	3024      	adds	r0, #36	; 0x24
   d4666:	69a1      	ldr	r1, [r4, #24]
   d4668:	f000 fe43 	bl	d52f2 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d466c:	b120      	cbz	r0, d4678 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d466e:	88a3      	ldrh	r3, [r4, #4]
   d4670:	f003 030f 	and.w	r3, r3, #15
   d4674:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d4678:	bd10      	pop	{r4, pc}

000d467a <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d467a:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d467c:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d467e:	4605      	mov	r5, r0
   d4680:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d4682:	b984      	cbnz	r4, d46a6 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d4684:	2224      	movs	r2, #36	; 0x24
   d4686:	4621      	mov	r1, r4
   d4688:	f002 fc8a 	bl	d6fa0 <memset>

  m_vol = vol;
   d468c:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d468e:	79f3      	ldrb	r3, [r6, #7]
   d4690:	2b10      	cmp	r3, #16
   d4692:	d003      	beq.n	d469c <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d4694:	2b20      	cmp	r3, #32
   d4696:	d106      	bne.n	d46a6 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d4698:	2340      	movs	r3, #64	; 0x40
   d469a:	e000      	b.n	d469e <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d469c:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d469e:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d46a0:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d46a2:	70a8      	strb	r0, [r5, #2]
   d46a4:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d46a6:	2000      	movs	r0, #0
   d46a8:	bd70      	pop	{r4, r5, r6, pc}

000d46aa <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d46aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d46ae:	7803      	ldrb	r3, [r0, #0]
   d46b0:	4604      	mov	r4, r0
   d46b2:	4689      	mov	r9, r1
   d46b4:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d46b6:	b14b      	cbz	r3, d46cc <_ZN7FatFile4readEPvj+0x22>
   d46b8:	7882      	ldrb	r2, [r0, #2]
   d46ba:	07d1      	lsls	r1, r2, #31
   d46bc:	d506      	bpl.n	d46cc <_ZN7FatFile4readEPvj+0x22>
   d46be:	e00c      	b.n	d46da <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d46c0:	465a      	mov	r2, fp
   d46c2:	6921      	ldr	r1, [r4, #16]
   d46c4:	f000 fe3f 	bl	d5346 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d46c8:	2800      	cmp	r0, #0
   d46ca:	da3d      	bge.n	d4748 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d46cc:	7863      	ldrb	r3, [r4, #1]
   d46ce:	f043 0302 	orr.w	r3, r3, #2
   d46d2:	7063      	strb	r3, [r4, #1]
  return -1;
   d46d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d46d8:	e097      	b.n	d480a <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d46da:	071a      	lsls	r2, r3, #28
   d46dc:	d503      	bpl.n	d46e6 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d46de:	69e3      	ldr	r3, [r4, #28]
   d46e0:	6962      	ldr	r2, [r4, #20]
   d46e2:	1a9b      	subs	r3, r3, r2
   d46e4:	e007      	b.n	d46f6 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d46e6:	069a      	lsls	r2, r3, #26
   d46e8:	d508      	bpl.n	d46fc <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d46ea:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d46ec:	891a      	ldrh	r2, [r3, #8]
   d46ee:	6963      	ldr	r3, [r4, #20]
   d46f0:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d46f4:	b29b      	uxth	r3, r3
   d46f6:	429d      	cmp	r5, r3
   d46f8:	bf28      	it	cs
   d46fa:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d46fc:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d46fe:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4702:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d4706:	2e00      	cmp	r6, #0
   d4708:	d035      	beq.n	d4776 <_ZN7FatFile4readEPvj+0xcc>
   d470a:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d470c:	6963      	ldr	r3, [r4, #20]
   d470e:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d4710:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d4714:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d4718:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d471c:	d002      	beq.n	d4724 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d471e:	6a03      	ldr	r3, [r0, #32]
   d4720:	4419      	add	r1, r3
   d4722:	e01d      	b.n	d4760 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d4724:	f890 8005 	ldrb.w	r8, [r0, #5]
   d4728:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d472c:	f1ba 0f00 	cmp.w	sl, #0
   d4730:	d110      	bne.n	d4754 <_ZN7FatFile4readEPvj+0xaa>
   d4732:	f1b8 0f00 	cmp.w	r8, #0
   d4736:	d10d      	bne.n	d4754 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d4738:	2b00      	cmp	r3, #0
   d473a:	d1c1      	bne.n	d46c0 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d473c:	0653      	lsls	r3, r2, #25
   d473e:	bf4c      	ite	mi
   d4740:	6a03      	ldrmi	r3, [r0, #32]
   d4742:	6a23      	ldrpl	r3, [r4, #32]
   d4744:	6123      	str	r3, [r4, #16]
   d4746:	e005      	b.n	d4754 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d4748:	d104      	bne.n	d4754 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d474a:	7823      	ldrb	r3, [r4, #0]
   d474c:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4750:	d111      	bne.n	d4776 <_ZN7FatFile4readEPvj+0xcc>
   d4752:	e7bb      	b.n	d46cc <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d4754:	6921      	ldr	r1, [r4, #16]
   d4756:	68a0      	ldr	r0, [r4, #8]
   d4758:	f000 fdef 	bl	d533a <_ZNK9FatVolume17clusterFirstBlockEm>
   d475c:	eb08 0100 	add.w	r1, r8, r0
   d4760:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d4762:	f1ba 0f00 	cmp.w	sl, #0
   d4766:	d135      	bne.n	d47d4 <_ZN7FatFile4readEPvj+0x12a>
   d4768:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d476c:	d332      	bcc.n	d47d4 <_ZN7FatFile4readEPvj+0x12a>
   d476e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4770:	4299      	cmp	r1, r3
   d4772:	d102      	bne.n	d477a <_ZN7FatFile4readEPvj+0xd0>
   d4774:	e02e      	b.n	d47d4 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d4776:	1ba8      	subs	r0, r5, r6
   d4778:	e047      	b.n	d480a <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d477a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d477e:	d31b      	bcc.n	d47b8 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d4780:	7822      	ldrb	r2, [r4, #0]
   d4782:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d4784:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d4788:	d406      	bmi.n	d4798 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d478a:	7902      	ldrb	r2, [r0, #4]
   d478c:	ebc8 0202 	rsb	r2, r8, r2
   d4790:	b2d2      	uxtb	r2, r2
   d4792:	4592      	cmp	sl, r2
   d4794:	bf28      	it	cs
   d4796:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4798:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d479a:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d479e:	d207      	bcs.n	d47b0 <_ZN7FatFile4readEPvj+0x106>
   d47a0:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d47a2:	4653      	mov	r3, sl
   d47a4:	464a      	mov	r2, r9
   d47a6:	6800      	ldr	r0, [r0, #0]
   d47a8:	f001 f8e2 	bl	d5970 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d47ac:	b960      	cbnz	r0, d47c8 <_ZN7FatFile4readEPvj+0x11e>
   d47ae:	e78d      	b.n	d46cc <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d47b0:	4453      	add	r3, sl
   d47b2:	4299      	cmp	r1, r3
   d47b4:	d321      	bcc.n	d47fa <_ZN7FatFile4readEPvj+0x150>
   d47b6:	e7f3      	b.n	d47a0 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d47b8:	464a      	mov	r2, r9
   d47ba:	6800      	ldr	r0, [r0, #0]
   d47bc:	f001 f890 	bl	d58e0 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d47c0:	2800      	cmp	r0, #0
   d47c2:	d083      	beq.n	d46cc <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d47c4:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d47c8:	6963      	ldr	r3, [r4, #20]
   d47ca:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d47cc:	44b9      	add	r9, r7
    m_curPosition += n;
   d47ce:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d47d0:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d47d2:	e798      	b.n	d4706 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d47d4:	2200      	movs	r2, #0
   d47d6:	3024      	adds	r0, #36	; 0x24
   d47d8:	f000 fd8b 	bl	d52f2 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d47dc:	2800      	cmp	r0, #0
   d47de:	f43f af75 	beq.w	d46cc <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d47e2:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d47e6:	42b7      	cmp	r7, r6
   d47e8:	bf28      	it	cs
   d47ea:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d47ec:	eb00 010a 	add.w	r1, r0, sl
   d47f0:	463a      	mov	r2, r7
   d47f2:	4648      	mov	r0, r9
   d47f4:	f002 fbc9 	bl	d6f8a <memcpy>
   d47f8:	e7e6      	b.n	d47c8 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d47fa:	3024      	adds	r0, #36	; 0x24
   d47fc:	9101      	str	r1, [sp, #4]
   d47fe:	f000 fd51 	bl	d52a4 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d4802:	9901      	ldr	r1, [sp, #4]
   d4804:	2800      	cmp	r0, #0
   d4806:	d1cb      	bne.n	d47a0 <_ZN7FatFile4readEPvj+0xf6>
   d4808:	e760      	b.n	d46cc <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d480a:	b003      	add	sp, #12
   d480c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4810 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d4810:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d4812:	6943      	ldr	r3, [r0, #20]
   d4814:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d4818:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d481a:	b105      	cbz	r5, d481e <_ZN7FatFile12readDirCacheEb+0xe>
   d481c:	b969      	cbnz	r1, d483a <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d481e:	2201      	movs	r2, #1
   d4820:	f10d 0107 	add.w	r1, sp, #7
   d4824:	4620      	mov	r0, r4
   d4826:	f7ff ff40 	bl	d46aa <_ZN7FatFile4readEPvj>
   d482a:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d482c:	2801      	cmp	r0, #1
   d482e:	d001      	beq.n	d4834 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d4830:	2000      	movs	r0, #0
   d4832:	e008      	b.n	d4846 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d4834:	6963      	ldr	r3, [r4, #20]
   d4836:	331f      	adds	r3, #31
   d4838:	e000      	b.n	d483c <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d483a:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d483c:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d483e:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d4840:	3030      	adds	r0, #48	; 0x30
   d4842:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d4846:	b003      	add	sp, #12
   d4848:	bd30      	pop	{r4, r5, pc}

000d484a <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d484a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d484e:	460e      	mov	r6, r1
   d4850:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d4852:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d4854:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d4856:	2900      	cmp	r1, #0
   d4858:	d039      	beq.n	d48ce <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d485a:	6945      	ldr	r5, [r0, #20]
   d485c:	42b5      	cmp	r5, r6
   d485e:	d03a      	beq.n	d48d6 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d4860:	b90e      	cbnz	r6, d4866 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d4862:	6106      	str	r6, [r0, #16]
    goto done;
   d4864:	e031      	b.n	d48ca <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d4866:	070b      	lsls	r3, r1, #28
   d4868:	d503      	bpl.n	d4872 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d486a:	69c3      	ldr	r3, [r0, #28]
   d486c:	429e      	cmp	r6, r3
   d486e:	d82e      	bhi.n	d48ce <_ZN7FatFile7seekSetEm+0x84>
   d4870:	e007      	b.n	d4882 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d4872:	0688      	lsls	r0, r1, #26
   d4874:	d505      	bpl.n	d4882 <_ZN7FatFile7seekSetEm+0x38>
   d4876:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d4878:	891b      	ldrh	r3, [r3, #8]
   d487a:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d487e:	d826      	bhi.n	d48ce <_ZN7FatFile7seekSetEm+0x84>
   d4880:	e023      	b.n	d48ca <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d4882:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d4886:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d488a:	1e6a      	subs	r2, r5, #1
   d488c:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d4890:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d4892:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d4894:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d4896:	429a      	cmp	r2, r3
   d4898:	d800      	bhi.n	d489c <_ZN7FatFile7seekSetEm+0x52>
   d489a:	b94d      	cbnz	r5, d48b0 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d489c:	064a      	lsls	r2, r1, #25
   d489e:	bf4c      	ite	mi
   d48a0:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d48a4:	6a22      	ldrpl	r2, [r4, #32]
   d48a6:	6122      	str	r2, [r4, #16]
   d48a8:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d48aa:	f104 0810 	add.w	r8, r4, #16
   d48ae:	e00a      	b.n	d48c6 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d48b0:	1a9b      	subs	r3, r3, r2
   d48b2:	e7f9      	b.n	d48a8 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d48b4:	4642      	mov	r2, r8
   d48b6:	6921      	ldr	r1, [r4, #16]
   d48b8:	68a0      	ldr	r0, [r4, #8]
   d48ba:	f000 fd44 	bl	d5346 <_ZN9FatVolume6fatGetEmPm>
   d48be:	2800      	cmp	r0, #0
   d48c0:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   d48c4:	dd03      	ble.n	d48ce <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d48c6:	2d00      	cmp	r5, #0
   d48c8:	d1f4      	bne.n	d48b4 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d48ca:	6166      	str	r6, [r4, #20]
   d48cc:	e003      	b.n	d48d6 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d48ce:	6127      	str	r7, [r4, #16]
  return false;
   d48d0:	2000      	movs	r0, #0
   d48d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d48d6:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d48d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d48dc <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d48dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d48de:	460f      	mov	r7, r1
   d48e0:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d48e2:	2100      	movs	r1, #0
   d48e4:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d48e6:	4604      	mov	r4, r0
   d48e8:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d48ea:	f002 fb59 	bl	d6fa0 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d48ee:	68b8      	ldr	r0, [r7, #8]
   d48f0:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d48f2:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d48f6:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d48f8:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d48fc:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d48fe:	6a3b      	ldr	r3, [r7, #32]
   d4900:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d4902:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d4904:	7acb      	ldrb	r3, [r1, #11]
   d4906:	071d      	lsls	r5, r3, #28
   d4908:	d44c      	bmi.n	d49a4 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d490a:	1883      	adds	r3, r0, r2
   d490c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d4910:	f003 0317 	and.w	r3, r3, #23
   d4914:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d4916:	7ac9      	ldrb	r1, [r1, #11]
   d4918:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d491c:	bf04      	itt	eq
   d491e:	f043 0308 	orreq.w	r3, r3, #8
   d4922:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d4924:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d4928:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d492a:	f006 0303 	and.w	r3, r6, #3
   d492e:	2b01      	cmp	r3, #1
   d4930:	d009      	beq.n	d4946 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d4932:	2b02      	cmp	r3, #2
   d4934:	d005      	beq.n	d4942 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d4936:	2b00      	cmp	r3, #0
   d4938:	d134      	bne.n	d49a4 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d493a:	0571      	lsls	r1, r6, #21
   d493c:	d432      	bmi.n	d49a4 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d493e:	2301      	movs	r3, #1
   d4940:	e002      	b.n	d4948 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d4942:	2303      	movs	r3, #3
   d4944:	e000      	b.n	d4948 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d4946:	2302      	movs	r3, #2
   d4948:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d494a:	78a1      	ldrb	r1, [r4, #2]
   d494c:	078b      	lsls	r3, r1, #30
   d494e:	d503      	bpl.n	d4958 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d4950:	7823      	ldrb	r3, [r4, #0]
   d4952:	f013 0f11 	tst.w	r3, #17
   d4956:	d125      	bne.n	d49a4 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d4958:	b24b      	sxtb	r3, r1
   d495a:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d495e:	f006 0108 	and.w	r1, r6, #8
   d4962:	bf14      	ite	ne
   d4964:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d4968:	2700      	moveq	r7, #0
   d496a:	4319      	orrs	r1, r3
   d496c:	4339      	orrs	r1, r7
   d496e:	70a1      	strb	r1, [r4, #2]
   d4970:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d4972:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d4974:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d4976:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d4978:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d497c:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d4980:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d4984:	d504      	bpl.n	d4990 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d4986:	b181      	cbz	r1, d49aa <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d4988:	f000 fd7d 	bl	d5486 <_ZN9FatVolume9freeChainEm>
   d498c:	b968      	cbnz	r0, d49aa <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d498e:	e009      	b.n	d49a4 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d4990:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d4992:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d4994:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d4996:	0473      	lsls	r3, r6, #17
   d4998:	d50c      	bpl.n	d49b4 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d499a:	69e1      	ldr	r1, [r4, #28]
   d499c:	4620      	mov	r0, r4
   d499e:	f7ff ff54 	bl	d484a <_ZN7FatFile7seekSetEm>
   d49a2:	b938      	cbnz	r0, d49b4 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d49a4:	2000      	movs	r0, #0
   d49a6:	7020      	strb	r0, [r4, #0]
  return false;
   d49a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d49aa:	78a3      	ldrb	r3, [r4, #2]
   d49ac:	f043 0304 	orr.w	r3, r3, #4
   d49b0:	70a3      	strb	r3, [r4, #2]
   d49b2:	e7f0      	b.n	d4996 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d49b4:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d49b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d49b8 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d49b8:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d49ba:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d49bc:	4604      	mov	r4, r0
  if (!isOpen()) {
   d49be:	b90b      	cbnz	r3, d49c4 <_ZN7FatFile4syncEv+0xc>
    return true;
   d49c0:	2001      	movs	r0, #1
   d49c2:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d49c4:	7883      	ldrb	r3, [r0, #2]
   d49c6:	075a      	lsls	r2, r3, #29
   d49c8:	d523      	bpl.n	d4a12 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d49ca:	2101      	movs	r1, #1
   d49cc:	f7ff fe46 	bl	d465c <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d49d0:	4605      	mov	r5, r0
   d49d2:	b928      	cbnz	r0, d49e0 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d49d4:	7863      	ldrb	r3, [r4, #1]
   d49d6:	f043 0301 	orr.w	r3, r3, #1
   d49da:	7063      	strb	r3, [r4, #1]
  return false;
   d49dc:	2000      	movs	r0, #0
   d49de:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d49e0:	7803      	ldrb	r3, [r0, #0]
   d49e2:	2be5      	cmp	r3, #229	; 0xe5
   d49e4:	d0f6      	beq.n	d49d4 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d49e6:	7823      	ldrb	r3, [r4, #0]
   d49e8:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d49ea:	bf44      	itt	mi
   d49ec:	69e3      	ldrmi	r3, [r4, #28]
   d49ee:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d49f0:	8c23      	ldrh	r3, [r4, #32]
   d49f2:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d49f4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d49f6:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d49f8:	4b09      	ldr	r3, [pc, #36]	; (d4a20 <_ZN7FatFile4syncEv+0x68>)
   d49fa:	681b      	ldr	r3, [r3, #0]
   d49fc:	b12b      	cbz	r3, d4a0a <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d49fe:	f100 0116 	add.w	r1, r0, #22
   d4a02:	3018      	adds	r0, #24
   d4a04:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d4a06:	8b2b      	ldrh	r3, [r5, #24]
   d4a08:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d4a0a:	78a3      	ldrb	r3, [r4, #2]
   d4a0c:	f023 0304 	bic.w	r3, r3, #4
   d4a10:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d4a12:	68a0      	ldr	r0, [r4, #8]
   d4a14:	f7ff fdca 	bl	d45ac <_ZN9FatVolume9cacheSyncEv>
   d4a18:	2800      	cmp	r0, #0
   d4a1a:	d0db      	beq.n	d49d4 <_ZN7FatFile4syncEv+0x1c>
   d4a1c:	e7d0      	b.n	d49c0 <_ZN7FatFile4syncEv+0x8>
   d4a1e:	bf00      	nop
   d4a20:	2003e474 	.word	0x2003e474

000d4a24 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d4a24:	b510      	push	{r4, lr}
   d4a26:	4604      	mov	r4, r0
  bool rtn = sync();
   d4a28:	f7ff ffc6 	bl	d49b8 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d4a2c:	2300      	movs	r3, #0
   d4a2e:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d4a30:	bd10      	pop	{r4, pc}

000d4a32 <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d4a32:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4a34:	b093      	sub	sp, #76	; 0x4c
   d4a36:	461f      	mov	r7, r3
   d4a38:	2300      	movs	r3, #0
   d4a3a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d4a3e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d4a42:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d4a44:	9201      	str	r2, [sp, #4]
   d4a46:	4606      	mov	r6, r0
   d4a48:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d4a4a:	b10b      	cbz	r3, d4a50 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d4a4c:	2000      	movs	r0, #0
   d4a4e:	e03d      	b.n	d4acc <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d4a50:	780b      	ldrb	r3, [r1, #0]
   d4a52:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4a56:	d0f9      	beq.n	d4a4c <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d4a58:	7813      	ldrb	r3, [r2, #0]
   d4a5a:	2b2f      	cmp	r3, #47	; 0x2f
   d4a5c:	d112      	bne.n	d4a84 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d4a5e:	9b01      	ldr	r3, [sp, #4]
   d4a60:	781a      	ldrb	r2, [r3, #0]
   d4a62:	2a2f      	cmp	r2, #47	; 0x2f
   d4a64:	d102      	bne.n	d4a6c <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d4a66:	3301      	adds	r3, #1
   d4a68:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d4a6a:	e7f8      	b.n	d4a5e <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d4a6c:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d4a6e:	b91a      	cbnz	r2, d4a78 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d4a70:	4630      	mov	r0, r6
   d4a72:	f7ff fe02 	bl	d467a <_ZN7FatFile8openRootEP9FatVolume>
   d4a76:	e029      	b.n	d4acc <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d4a78:	a809      	add	r0, sp, #36	; 0x24
   d4a7a:	f7ff fdfe 	bl	d467a <_ZN7FatFile8openRootEP9FatVolume>
   d4a7e:	2800      	cmp	r0, #0
   d4a80:	d0e4      	beq.n	d4a4c <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d4a82:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d4a84:	aa01      	add	r2, sp, #4
   d4a86:	a903      	add	r1, sp, #12
   d4a88:	9801      	ldr	r0, [sp, #4]
   d4a8a:	f000 f8ff 	bl	d4c8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d4a8e:	2800      	cmp	r0, #0
   d4a90:	d0dc      	beq.n	d4a4c <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d4a92:	9b01      	ldr	r3, [sp, #4]
   d4a94:	781b      	ldrb	r3, [r3, #0]
   d4a96:	b19b      	cbz	r3, d4ac0 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d4a98:	2300      	movs	r3, #0
   d4a9a:	aa03      	add	r2, sp, #12
   d4a9c:	4621      	mov	r1, r4
   d4a9e:	4630      	mov	r0, r6
   d4aa0:	f000 fa36 	bl	d4f10 <_ZN7FatFile4openEPS_P7fname_ti>
   d4aa4:	2800      	cmp	r0, #0
   d4aa6:	d0d1      	beq.n	d4a4c <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d4aa8:	4635      	mov	r5, r6
   d4aaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4aac:	ac09      	add	r4, sp, #36	; 0x24
   d4aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4ab4:	682b      	ldr	r3, [r5, #0]
   d4ab6:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d4ab8:	4630      	mov	r0, r6
   d4aba:	f7ff ffb3 	bl	d4a24 <_ZN7FatFile5closeEv>
   d4abe:	e7e0      	b.n	d4a82 <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d4ac0:	463b      	mov	r3, r7
   d4ac2:	aa03      	add	r2, sp, #12
   d4ac4:	4621      	mov	r1, r4
   d4ac6:	4630      	mov	r0, r6
   d4ac8:	f000 fa22 	bl	d4f10 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d4acc:	b013      	add	sp, #76	; 0x4c
   d4ace:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4ad0 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d4ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4ad4:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d4ad6:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4ad8:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d4ada:	4604      	mov	r4, r0
   d4adc:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4ade:	d508      	bpl.n	d4af2 <_ZN7FatFile5writeEPKvj+0x22>
   d4ae0:	7883      	ldrb	r3, [r0, #2]
   d4ae2:	079a      	lsls	r2, r3, #30
   d4ae4:	d505      	bpl.n	d4af2 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d4ae6:	071b      	lsls	r3, r3, #28
   d4ae8:	d50b      	bpl.n	d4b02 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d4aea:	69e1      	ldr	r1, [r4, #28]
   d4aec:	f7ff fead 	bl	d484a <_ZN7FatFile7seekSetEm>
   d4af0:	b938      	cbnz	r0, d4b02 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d4af2:	7863      	ldrb	r3, [r4, #1]
   d4af4:	f043 0301 	orr.w	r3, r3, #1
   d4af8:	7063      	strb	r3, [r4, #1]
  return -1;
   d4afa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d4afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d4b02:	6963      	ldr	r3, [r4, #20]
   d4b04:	43db      	mvns	r3, r3
   d4b06:	4598      	cmp	r8, r3
   d4b08:	d8f3      	bhi.n	d4af2 <_ZN7FatFile5writeEPKvj+0x22>
   d4b0a:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d4b0c:	f04f 0a00 	mov.w	sl, #0
   d4b10:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d4b12:	2e00      	cmp	r6, #0
   d4b14:	f000 8081 	beq.w	d4c1a <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d4b18:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d4b1a:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d4b1c:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d4b20:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d4b24:	d11c      	bne.n	d4b60 <_ZN7FatFile5writeEPKvj+0x90>
   d4b26:	b9df      	cbnz	r7, d4b60 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d4b28:	6921      	ldr	r1, [r4, #16]
   d4b2a:	b171      	cbz	r1, d4b4a <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4b2c:	f104 0210 	add.w	r2, r4, #16
   d4b30:	f000 fc09 	bl	d5346 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d4b34:	2800      	cmp	r0, #0
   d4b36:	dbdc      	blt.n	d4af2 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d4b38:	f040 808e 	bne.w	d4c58 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d4b3c:	4620      	mov	r0, r4
   d4b3e:	f7ff fd42 	bl	d45c6 <_ZN7FatFile10addClusterEv>
   d4b42:	2800      	cmp	r0, #0
   d4b44:	f040 8088 	bne.w	d4c58 <_ZN7FatFile5writeEPKvj+0x188>
   d4b48:	e7d3      	b.n	d4af2 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d4b4a:	6a23      	ldr	r3, [r4, #32]
   d4b4c:	b93b      	cbnz	r3, d4b5e <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d4b4e:	4620      	mov	r0, r4
   d4b50:	f7ff fd39 	bl	d45c6 <_ZN7FatFile10addClusterEv>
   d4b54:	2800      	cmp	r0, #0
   d4b56:	d0cc      	beq.n	d4af2 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d4b58:	6923      	ldr	r3, [r4, #16]
   d4b5a:	6223      	str	r3, [r4, #32]
   d4b5c:	e000      	b.n	d4b60 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d4b5e:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d4b60:	6921      	ldr	r1, [r4, #16]
   d4b62:	68a0      	ldr	r0, [r4, #8]
   d4b64:	f000 fbe9 	bl	d533a <_ZNK9FatVolume17clusterFirstBlockEm>
   d4b68:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d4b6a:	b917      	cbnz	r7, d4b72 <_ZN7FatFile5writeEPKvj+0xa2>
   d4b6c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d4b70:	d221      	bcs.n	d4bb6 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d4b72:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d4b76:	42b5      	cmp	r5, r6
   d4b78:	bf28      	it	cs
   d4b7a:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d4b7c:	b937      	cbnz	r7, d4b8c <_ZN7FatFile5writeEPKvj+0xbc>
   d4b7e:	6963      	ldr	r3, [r4, #20]
   d4b80:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d4b82:	4293      	cmp	r3, r2
   d4b84:	bf34      	ite	cc
   d4b86:	2201      	movcc	r2, #1
   d4b88:	2205      	movcs	r2, #5
   d4b8a:	e000      	b.n	d4b8e <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d4b8c:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d4b8e:	68a0      	ldr	r0, [r4, #8]
   d4b90:	3024      	adds	r0, #36	; 0x24
   d4b92:	f000 fbae 	bl	d52f2 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d4b96:	2800      	cmp	r0, #0
   d4b98:	d0ab      	beq.n	d4af2 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d4b9a:	4438      	add	r0, r7
   d4b9c:	462a      	mov	r2, r5
   d4b9e:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d4ba0:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d4ba2:	f002 f9f2 	bl	d6f8a <memcpy>
      if (512 == (n + blockOffset)) {
   d4ba6:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d4baa:	d130      	bne.n	d4c0e <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d4bac:	68a0      	ldr	r0, [r4, #8]
   d4bae:	3024      	adds	r0, #36	; 0x24
   d4bb0:	f000 fb78 	bl	d52a4 <_ZN8FatCache4syncEv>
   d4bb4:	e017      	b.n	d4be6 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d4bb6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d4bba:	68a0      	ldr	r0, [r4, #8]
   d4bbc:	d315      	bcc.n	d4bea <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d4bbe:	7902      	ldrb	r2, [r0, #4]
   d4bc0:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d4bc2:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d4bc4:	b2d2      	uxtb	r2, r2
   d4bc6:	4293      	cmp	r3, r2
   d4bc8:	bf28      	it	cs
   d4bca:	4613      	movcs	r3, r2
   d4bcc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4bce:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d4bd0:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4bd4:	d302      	bcc.n	d4bdc <_ZN7FatFile5writeEPKvj+0x10c>
   d4bd6:	441a      	add	r2, r3
   d4bd8:	4291      	cmp	r1, r2
   d4bda:	d337      	bcc.n	d4c4c <_ZN7FatFile5writeEPKvj+0x17c>
   d4bdc:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d4bde:	464a      	mov	r2, r9
   d4be0:	6838      	ldr	r0, [r7, #0]
   d4be2:	f000 ff79 	bl	d5ad8 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d4be6:	b990      	cbnz	r0, d4c0e <_ZN7FatFile5writeEPKvj+0x13e>
   d4be8:	e783      	b.n	d4af2 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d4bea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4bec:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d4bee:	bf02      	ittt	eq
   d4bf0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d4bf4:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d4bf8:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d4bfa:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d4bfc:	464a      	mov	r2, r9
   d4bfe:	6818      	ldr	r0, [r3, #0]
   d4c00:	f000 fef8 	bl	d59f4 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d4c04:	2800      	cmp	r0, #0
   d4c06:	f43f af74 	beq.w	d4af2 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d4c0a:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d4c0e:	6963      	ldr	r3, [r4, #20]
   d4c10:	442b      	add	r3, r5
   d4c12:	6163      	str	r3, [r4, #20]
    src += n;
   d4c14:	44a9      	add	r9, r5
    nToWrite -= n;
   d4c16:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d4c18:	e77a      	b.n	d4b10 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d4c1a:	69e2      	ldr	r2, [r4, #28]
   d4c1c:	4293      	cmp	r3, r2
   d4c1e:	d901      	bls.n	d4c24 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d4c20:	61e3      	str	r3, [r4, #28]
   d4c22:	e002      	b.n	d4c2a <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d4c24:	4b0f      	ldr	r3, [pc, #60]	; (d4c64 <_ZN7FatFile5writeEPKvj+0x194>)
   d4c26:	681b      	ldr	r3, [r3, #0]
   d4c28:	b11b      	cbz	r3, d4c32 <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d4c2a:	78a3      	ldrb	r3, [r4, #2]
   d4c2c:	f043 0304 	orr.w	r3, r3, #4
   d4c30:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d4c32:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d4c36:	2b00      	cmp	r3, #0
   d4c38:	db02      	blt.n	d4c40 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d4c3a:	4640      	mov	r0, r8
   d4c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d4c40:	4620      	mov	r0, r4
   d4c42:	f7ff feb9 	bl	d49b8 <_ZN7FatFile4syncEv>
   d4c46:	2800      	cmp	r0, #0
   d4c48:	d1f7      	bne.n	d4c3a <_ZN7FatFile5writeEPKvj+0x16a>
   d4c4a:	e752      	b.n	d4af2 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d4c4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d4c50:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d4c54:	62c2      	str	r2, [r0, #44]	; 0x2c
   d4c56:	e7c1      	b.n	d4bdc <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d4c58:	6921      	ldr	r1, [r4, #16]
   d4c5a:	68a0      	ldr	r0, [r4, #8]
   d4c5c:	f000 fb6d 	bl	d533a <_ZNK9FatVolume17clusterFirstBlockEm>
   d4c60:	4601      	mov	r1, r0
   d4c62:	e783      	b.n	d4b6c <_ZN7FatFile5writeEPKvj+0x9c>
   d4c64:	2003e474 	.word	0x2003e474

000d4c68 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d4c68:	f001 b806 	b.w	d5c78 <HAL_Pin_Map>

000d4c6c <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d4c6c:	1e41      	subs	r1, r0, #1
   d4c6e:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d4c72:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d4c74:	0843      	lsrs	r3, r0, #1
   d4c76:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d4c7a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d4c7e:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d4c82:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d4c84:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d4c86:	d1f5      	bne.n	d4c74 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d4c88:	4770      	bx	lr
	...

000d4c8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d4c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d4c90:	7803      	ldrb	r3, [r0, #0]
   d4c92:	2b20      	cmp	r3, #32
   d4c94:	f100 0401 	add.w	r4, r0, #1
   d4c98:	d101      	bne.n	d4c9e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d4c9a:	4620      	mov	r0, r4
   d4c9c:	e7f8      	b.n	d4c90 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4c9e:	4f70      	ldr	r7, [pc, #448]	; (d4e60 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d4ca0:	6088      	str	r0, [r1, #8]
   d4ca2:	4605      	mov	r5, r0
   d4ca4:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d4ca6:	462e      	mov	r6, r5
   d4ca8:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d4cac:	b30b      	cbz	r3, d4cf2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d4cae:	2b2f      	cmp	r3, #47	; 0x2f
   d4cb0:	d101      	bne.n	d4cb6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d4cb2:	1903      	adds	r3, r0, r4
   d4cb4:	e017      	b.n	d4ce6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4cb6:	2b5c      	cmp	r3, #92	; 0x5c
   d4cb8:	d102      	bne.n	d4cc0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d4cba:	2000      	movs	r0, #0
   d4cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d4cc0:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d4cc4:	b2e4      	uxtb	r4, r4
   d4cc6:	2c1d      	cmp	r4, #29
   d4cc8:	d803      	bhi.n	d4cd2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d4cca:	fa27 f404 	lsr.w	r4, r7, r4
   d4cce:	07e4      	lsls	r4, r4, #31
   d4cd0:	d4f3      	bmi.n	d4cba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d4cd2:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d4cd6:	2c3c      	cmp	r4, #60	; 0x3c
   d4cd8:	d0ef      	beq.n	d4cba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d4cda:	3b20      	subs	r3, #32
   d4cdc:	2b5e      	cmp	r3, #94	; 0x5e
   d4cde:	d9e1      	bls.n	d4ca4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d4ce0:	e7eb      	b.n	d4cba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d4ce2:	2d2f      	cmp	r5, #47	; 0x2f
   d4ce4:	d105      	bne.n	d4cf2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d4ce6:	461e      	mov	r6, r3
   d4ce8:	f813 5b01 	ldrb.w	r5, [r3], #1
   d4cec:	2d20      	cmp	r5, #32
   d4cee:	d1f8      	bne.n	d4ce2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d4cf0:	e7f9      	b.n	d4ce6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d4cf2:	6016      	str	r6, [r2, #0]
   d4cf4:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d4cf6:	4298      	cmp	r0, r3
   d4cf8:	ebc0 0803 	rsb	r8, r0, r3
   d4cfc:	d009      	beq.n	d4d12 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d4cfe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d4d02:	2a2e      	cmp	r2, #46	; 0x2e
   d4d04:	d0f7      	beq.n	d4cf6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d4d06:	2a20      	cmp	r2, #32
   d4d08:	d0f5      	beq.n	d4cf6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d4d0a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d4d0e:	dcd4      	bgt.n	d4cba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d4d10:	e001      	b.n	d4d16 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d4d12:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d4d16:	f8c1 8004 	str.w	r8, [r1, #4]
   d4d1a:	f101 030c 	add.w	r3, r1, #12
   d4d1e:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d4d22:	2420      	movs	r4, #32
   d4d24:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d4d28:	4293      	cmp	r3, r2
   d4d2a:	d1fb      	bne.n	d4d24 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d4d2c:	4603      	mov	r3, r0
   d4d2e:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d4d30:	f813 4b01 	ldrb.w	r4, [r3], #1
   d4d34:	2c2e      	cmp	r4, #46	; 0x2e
   d4d36:	d0fa      	beq.n	d4d2e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d4d38:	2c20      	cmp	r4, #32
   d4d3a:	d0f8      	beq.n	d4d2e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d4d3c:	fab2 f482 	clz	r4, r2
   d4d40:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d4d42:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
   d4d46:	1c73      	adds	r3, r6, #1
   d4d48:	d107      	bne.n	d4d5a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d4d4a:	2700      	movs	r7, #0
   d4d4c:	f04f 0e07 	mov.w	lr, #7
   d4d50:	463d      	mov	r5, r7
   d4d52:	46ba      	mov	sl, r7
   d4d54:	f04f 0908 	mov.w	r9, #8
   d4d58:	e009      	b.n	d4d6e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d4d5a:	5d83      	ldrb	r3, [r0, r6]
   d4d5c:	2b2e      	cmp	r3, #46	; 0x2e
   d4d5e:	d0f4      	beq.n	d4d4a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d4d60:	3e01      	subs	r6, #1
   d4d62:	e7f0      	b.n	d4d46 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d4d64:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d4d66:	2b20      	cmp	r3, #32
   d4d68:	d104      	bne.n	d4d74 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d4d6a:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d4d6c:	3201      	adds	r2, #1
   d4d6e:	4542      	cmp	r2, r8
   d4d70:	dbf8      	blt.n	d4d64 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d4d72:	e04b      	b.n	d4e0c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d4d74:	2b2e      	cmp	r3, #46	; 0x2e
   d4d76:	d102      	bne.n	d4d7e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d4d78:	42b2      	cmp	r2, r6
   d4d7a:	d1f6      	bne.n	d4d6a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d4d7c:	e003      	b.n	d4d86 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d4d7e:	2b22      	cmp	r3, #34	; 0x22
   d4d80:	d017      	beq.n	d4db2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d4d82:	2b7c      	cmp	r3, #124	; 0x7c
   d4d84:	d015      	beq.n	d4db2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d4d86:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d4d8a:	f1bc 0f05 	cmp.w	ip, #5
   d4d8e:	d801      	bhi.n	d4d94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d4d90:	2b2d      	cmp	r3, #45	; 0x2d
   d4d92:	d10e      	bne.n	d4db2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d4d94:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d4d98:	f1bc 0f05 	cmp.w	ip, #5
   d4d9c:	d909      	bls.n	d4db2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d4d9e:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d4da2:	f1bc 0f02 	cmp.w	ip, #2
   d4da6:	d904      	bls.n	d4db2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d4da8:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d4dac:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d4db0:	d902      	bls.n	d4db8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d4db2:	42b2      	cmp	r2, r6
   d4db4:	d10e      	bne.n	d4dd4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d4db6:	e049      	b.n	d4e4c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d4db8:	42b2      	cmp	r2, r6
   d4dba:	d047      	beq.n	d4e4c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d4dbc:	4575      	cmp	r5, lr
   d4dbe:	d821      	bhi.n	d4e04 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d4dc0:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d4dc4:	f1bc 0f19 	cmp.w	ip, #25
   d4dc8:	d808      	bhi.n	d4ddc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d4dca:	3b20      	subs	r3, #32
   d4dcc:	b2db      	uxtb	r3, r3
        lc |= bit;
   d4dce:	ea49 0707 	orr.w	r7, r9, r7
   d4dd2:	e00a      	b.n	d4dea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d4dd4:	4575      	cmp	r5, lr
   d4dd6:	d815      	bhi.n	d4e04 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d4dd8:	2400      	movs	r4, #0
      c = '_';
   d4dda:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d4ddc:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d4de0:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d4de4:	bf98      	it	ls
   d4de6:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d4dea:	f105 0c01 	add.w	ip, r5, #1
   d4dee:	fa5f fc8c 	uxtb.w	ip, ip
   d4df2:	440d      	add	r5, r1
      if (i < 7) {
   d4df4:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d4df8:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d4dfa:	d801      	bhi.n	d4e00 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d4dfc:	f881 c00c 	strb.w	ip, [r1, #12]
   d4e00:	4665      	mov	r5, ip
   d4e02:	e7b3      	b.n	d4d6c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d4e04:	f1be 0f0a 	cmp.w	lr, #10
   d4e08:	d117      	bne.n	d4e3a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d4e0a:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d4e0c:	7b4b      	ldrb	r3, [r1, #13]
   d4e0e:	2b20      	cmp	r3, #32
   d4e10:	f43f af53 	beq.w	d4cba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d4e14:	b13c      	cbz	r4, d4e26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d4e16:	ea1a 0f07 	tst.w	sl, r7
   d4e1a:	bf18      	it	ne
   d4e1c:	2702      	movne	r7, #2
   d4e1e:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d4e20:	2001      	movs	r0, #1
   d4e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d4e26:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d4e28:	2001      	movs	r0, #1
   d4e2a:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d4e2c:	4419      	add	r1, r3
   d4e2e:	237e      	movs	r3, #126	; 0x7e
   d4e30:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d4e32:	2331      	movs	r3, #49	; 0x31
   d4e34:	738b      	strb	r3, [r1, #14]
   d4e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d4e3a:	42b2      	cmp	r2, r6
   d4e3c:	dce5      	bgt.n	d4e0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d4e3e:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d4e40:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d4e44:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d4e46:	f04f 0910 	mov.w	r9, #16
   d4e4a:	e78e      	b.n	d4d6a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d4e4c:	f1be 0f0a 	cmp.w	lr, #10
   d4e50:	d0db      	beq.n	d4e0a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d4e52:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d4e54:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d4e58:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d4e5a:	f04f 0910 	mov.w	r9, #16
   d4e5e:	e785      	b.n	d4d6c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d4e60:	31000101 	.word	0x31000101

000d4e64 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d4e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d4e68:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d4e6c:	4606      	mov	r6, r0
   d4e6e:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d4e70:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d4e72:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d4e74:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d4e78:	6869      	ldr	r1, [r5, #4]
   d4e7a:	68aa      	ldr	r2, [r5, #8]
   d4e7c:	1863      	adds	r3, r4, r1
   d4e7e:	b29b      	uxth	r3, r3
   d4e80:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d4e82:	4291      	cmp	r1, r2
   d4e84:	d006      	beq.n	d4e94 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d4e86:	f812 0b01 	ldrb.w	r0, [r2], #1
   d4e8a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d4e8e:	4043      	eors	r3, r0
   d4e90:	b29b      	uxth	r3, r3
   d4e92:	e7f6      	b.n	d4e82 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d4e94:	f1b9 0f03 	cmp.w	r9, #3
   d4e98:	bf28      	it	cs
   d4e9a:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4e9e:	f109 0204 	add.w	r2, r9, #4
   d4ea2:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d4ea4:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4ea8:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4eaa:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4eac:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4eae:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4eb0:	bf94      	ite	ls
   d4eb2:	3130      	addls	r1, #48	; 0x30
   d4eb4:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4eb6:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d4eb8:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d4eba:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d4ebe:	d3f1      	bcc.n	d4ea4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d4ec0:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d4ec4:	2100      	movs	r1, #0
   d4ec6:	735f      	strb	r7, [r3, #13]
   d4ec8:	4630      	mov	r0, r6
   d4eca:	f7ff fcbe 	bl	d484a <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d4ece:	2101      	movs	r1, #1
   d4ed0:	4630      	mov	r0, r6
   d4ed2:	f7ff fc9d 	bl	d4810 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d4ed6:	4601      	mov	r1, r0
   d4ed8:	b928      	cbnz	r0, d4ee6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d4eda:	7870      	ldrb	r0, [r6, #1]
   d4edc:	fab0 f080 	clz	r0, r0
   d4ee0:	0940      	lsrs	r0, r0, #5
   d4ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d4ee6:	7803      	ldrb	r3, [r0, #0]
   d4ee8:	b14b      	cbz	r3, d4efe <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d4eea:	7ac3      	ldrb	r3, [r0, #11]
   d4eec:	071b      	lsls	r3, r3, #28
   d4eee:	d4ee      	bmi.n	d4ece <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d4ef0:	220b      	movs	r2, #11
   d4ef2:	4640      	mov	r0, r8
   d4ef4:	f002 f83a 	bl	d6f6c <memcmp>
   d4ef8:	2800      	cmp	r0, #0
   d4efa:	d1e8      	bne.n	d4ece <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d4efc:	e002      	b.n	d4f04 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d4efe:	2001      	movs	r0, #1
   d4f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4f04:	3401      	adds	r4, #1
   d4f06:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d4f08:	2c64      	cmp	r4, #100	; 0x64
   d4f0a:	d1b5      	bne.n	d4e78 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d4f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4f10 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d4f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4f14:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4f16:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d4f18:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4f1a:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d4f1e:	9005      	str	r0, [sp, #20]
   d4f20:	460e      	mov	r6, r1
   d4f22:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4f24:	d101      	bne.n	d4f2a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d4f26:	2000      	movs	r0, #0
   d4f28:	e1a0      	b.n	d526c <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4f2a:	9b05      	ldr	r3, [sp, #20]
   d4f2c:	781b      	ldrb	r3, [r3, #0]
   d4f2e:	2b00      	cmp	r3, #0
   d4f30:	d1f9      	bne.n	d4f26 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d4f32:	6853      	ldr	r3, [r2, #4]
   d4f34:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d4f36:	7813      	ldrb	r3, [r2, #0]
   d4f38:	079b      	lsls	r3, r3, #30
   d4f3a:	f000 818d 	beq.w	d5258 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d4f3e:	9b02      	ldr	r3, [sp, #8]
   d4f40:	270d      	movs	r7, #13
   d4f42:	330c      	adds	r3, #12
   d4f44:	fbb3 f7f7 	udiv	r7, r3, r7
   d4f48:	3701      	adds	r7, #1
   d4f4a:	b2ff      	uxtb	r7, r7
   d4f4c:	2100      	movs	r1, #0
   d4f4e:	4630      	mov	r0, r6
   d4f50:	f7ff fc7b 	bl	d484a <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d4f54:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d4f58:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d4f5c:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d4f60:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d4f62:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d4f64:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d4f66:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d4f6a:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d4f6c:	6972      	ldr	r2, [r6, #20]
   d4f6e:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d4f70:	2101      	movs	r1, #1
   d4f72:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d4f74:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d4f78:	f7ff fc4a 	bl	d4810 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d4f7c:	9b07      	ldr	r3, [sp, #28]
   d4f7e:	b920      	cbnz	r0, d4f8a <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d4f80:	7873      	ldrb	r3, [r6, #1]
   d4f82:	2b00      	cmp	r3, #0
   d4f84:	f000 8090 	beq.w	d50a8 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d4f88:	e7cd      	b.n	d4f26 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d4f8a:	7802      	ldrb	r2, [r0, #0]
   d4f8c:	2ae5      	cmp	r2, #229	; 0xe5
   d4f8e:	d000      	beq.n	d4f92 <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d4f90:	b942      	cbnz	r2, d4fa4 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d4f92:	2c00      	cmp	r4, #0
   d4f94:	bf08      	it	eq
   d4f96:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d4f98:	42bc      	cmp	r4, r7
        freeFound++;
   d4f9a:	bf3c      	itt	cc
   d4f9c:	3401      	addcc	r4, #1
   d4f9e:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d4fa0:	b922      	cbnz	r2, d4fac <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d4fa2:	e081      	b.n	d50a8 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d4fa4:	42bc      	cmp	r4, r7
   d4fa6:	bf38      	it	cc
   d4fa8:	2400      	movcc	r4, #0
   d4faa:	e003      	b.n	d4fb4 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d4fac:	2ae5      	cmp	r2, #229	; 0xe5
   d4fae:	d101      	bne.n	d4fb4 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d4fb0:	2500      	movs	r5, #0
   d4fb2:	e7db      	b.n	d4f6c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d4fb4:	2a2e      	cmp	r2, #46	; 0x2e
   d4fb6:	d0fb      	beq.n	d4fb0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4fb8:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d4fba:	290f      	cmp	r1, #15
   d4fbc:	d152      	bne.n	d5064 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d4fbe:	b93d      	cbnz	r5, d4fd0 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d4fc0:	0651      	lsls	r1, r2, #25
   d4fc2:	d5d3      	bpl.n	d4f6c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d4fc4:	7b43      	ldrb	r3, [r0, #13]
   d4fc6:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d4fc8:	f002 051f 	and.w	r5, r2, #31
   d4fcc:	462b      	mov	r3, r5
   d4fce:	e007      	b.n	d4fe0 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d4fd0:	3b01      	subs	r3, #1
   d4fd2:	b2db      	uxtb	r3, r3
   d4fd4:	429a      	cmp	r2, r3
   d4fd6:	d1eb      	bne.n	d4fb0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4fd8:	7b42      	ldrb	r2, [r0, #13]
   d4fda:	9903      	ldr	r1, [sp, #12]
   d4fdc:	4291      	cmp	r1, r2
   d4fde:	d1e7      	bne.n	d4fb0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d4fe0:	1e5a      	subs	r2, r3, #1
   d4fe2:	f04f 0c0d 	mov.w	ip, #13
   d4fe6:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d4fea:	9a02      	ldr	r2, [sp, #8]
   d4fec:	4562      	cmp	r2, ip
   d4fee:	d9df      	bls.n	d4fb0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4ff0:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d4ff4:	f1be 0f04 	cmp.w	lr, #4
   d4ff8:	fa5f f28e 	uxtb.w	r2, lr
   d4ffc:	d804      	bhi.n	d5008 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d4ffe:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d5002:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d5006:	e00c      	b.n	d5022 <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d5008:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d500a:	bf95      	itete	ls
   d500c:	f10e 32ff 	addls.w	r2, lr, #4294967295	; 0xffffffff
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5010:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d5014:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5018:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d501c:	bf94      	ite	ls
   d501e:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5020:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d5022:	9902      	ldr	r1, [sp, #8]
   d5024:	4561      	cmp	r1, ip
   d5026:	d103      	bne.n	d5030 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d5028:	2a00      	cmp	r2, #0
   d502a:	bf18      	it	ne
   d502c:	2500      	movne	r5, #0
   d502e:	e79d      	b.n	d4f6c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5030:	2aff      	cmp	r2, #255	; 0xff
   d5032:	d8bd      	bhi.n	d4fb0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5034:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5036:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d503a:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d503c:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d5040:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5044:	bf98      	it	ls
   d5046:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5048:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d504c:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d5050:	bf98      	it	ls
   d5052:	b2d2      	uxtbls	r2, r2
   d5054:	f1bc 0f19 	cmp.w	ip, #25
   d5058:	bf9c      	itt	ls
   d505a:	3120      	addls	r1, #32
   d505c:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d505e:	4291      	cmp	r1, r2
   d5060:	d1a6      	bne.n	d4fb0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5062:	e0fb      	b.n	d525c <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5064:	0709      	lsls	r1, r1, #28
   d5066:	d4a3      	bmi.n	d4fb0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d5068:	b14d      	cbz	r5, d507e <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d506a:	2b01      	cmp	r3, #1
   d506c:	f47f af5b 	bne.w	d4f26 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5070:	f7ff fdfc 	bl	d4c6c <_ZN7FatFile11lfnChecksumEPh>
   d5074:	9b03      	ldr	r3, [sp, #12]
   d5076:	4283      	cmp	r3, r0
   d5078:	f47f af55 	bne.w	d4f26 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d507c:	e00f      	b.n	d509e <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d507e:	220b      	movs	r2, #11
   d5080:	9906      	ldr	r1, [sp, #24]
   d5082:	9307      	str	r3, [sp, #28]
   d5084:	f001 ff72 	bl	d6f6c <memcmp>
   d5088:	9b07      	ldr	r3, [sp, #28]
   d508a:	2800      	cmp	r0, #0
   d508c:	f47f af6e 	bne.w	d4f6c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d5090:	f899 2000 	ldrb.w	r2, [r9]
   d5094:	07d2      	lsls	r2, r2, #31
   d5096:	d502      	bpl.n	d509e <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d5098:	2201      	movs	r2, #1
   d509a:	9204      	str	r2, [sp, #16]
   d509c:	e766      	b.n	d4f6c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d509e:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d50a2:	f000 80d1 	beq.w	d5248 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d50a6:	e73e      	b.n	d4f26 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d50a8:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d50ac:	f43f af3b 	beq.w	d4f26 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d50b0:	f00b 0303 	and.w	r3, fp, #3
   d50b4:	3b01      	subs	r3, #1
   d50b6:	2b01      	cmp	r3, #1
   d50b8:	f63f af35 	bhi.w	d4f26 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d50bc:	2c00      	cmp	r4, #0
   d50be:	bf08      	it	eq
   d50c0:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d50c2:	42bc      	cmp	r4, r7
   d50c4:	d302      	bcc.n	d50cc <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d50c6:	9b04      	ldr	r3, [sp, #16]
   d50c8:	b9cb      	cbnz	r3, d50fe <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d50ca:	e01f      	b.n	d510c <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d50cc:	2100      	movs	r1, #0
   d50ce:	4630      	mov	r0, r6
   d50d0:	f7ff fb9e 	bl	d4810 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d50d4:	b910      	cbnz	r0, d50dc <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d50d6:	7873      	ldrb	r3, [r6, #1]
   d50d8:	b15b      	cbz	r3, d50f2 <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d50da:	e724      	b.n	d4f26 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d50dc:	3401      	adds	r4, #1
   d50de:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d50e0:	e7ef      	b.n	d50c2 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d50e2:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d50e4:	791b      	ldrb	r3, [r3, #4]
   d50e6:	2b01      	cmp	r3, #1
   d50e8:	d8ed      	bhi.n	d50c6 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d50ea:	3410      	adds	r4, #16
   d50ec:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d50ee:	42a7      	cmp	r7, r4
   d50f0:	d9e9      	bls.n	d50c6 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d50f2:	4630      	mov	r0, r6
   d50f4:	f7ff fa72 	bl	d45dc <_ZN7FatFile13addDirClusterEv>
   d50f8:	2800      	cmp	r0, #0
   d50fa:	d1f2      	bne.n	d50e2 <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d50fc:	e713      	b.n	d4f26 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d50fe:	4649      	mov	r1, r9
   d5100:	4630      	mov	r0, r6
   d5102:	f7ff feaf 	bl	d4e64 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d5106:	2800      	cmp	r0, #0
   d5108:	f43f af0d 	beq.w	d4f26 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d510c:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d5110:	4630      	mov	r0, r6
   d5112:	f7ff fb9a 	bl	d484a <_ZN7FatFile7seekSetEm>
   d5116:	2800      	cmp	r0, #0
   d5118:	f43f af05 	beq.w	d4f26 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d511c:	1e7d      	subs	r5, r7, #1
   d511e:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d5120:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d5122:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d5126:	f04f 080f 	mov.w	r8, #15
   d512a:	e041      	b.n	d51b0 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d512c:	2100      	movs	r1, #0
   d512e:	4630      	mov	r0, r6
   d5130:	f7ff fb6e 	bl	d4810 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d5134:	4607      	mov	r7, r0
   d5136:	2800      	cmp	r0, #0
   d5138:	f43f aef5 	beq.w	d4f26 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d513c:	68b2      	ldr	r2, [r6, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d513e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d5142:	42ac      	cmp	r4, r5
   d5144:	f043 0301 	orr.w	r3, r3, #1
   d5148:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d514c:	bf0c      	ite	eq
   d514e:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d5152:	4622      	movne	r2, r4
   d5154:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d5156:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d515a:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d515e:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d5162:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d5164:	f7ff fd82 	bl	d4c6c <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5168:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d516a:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d516c:	f887 a01a 	strb.w	sl, [r7, #26]
   d5170:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5174:	f002 021f 	and.w	r2, r2, #31
   d5178:	230d      	movs	r3, #13
   d517a:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d517c:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5180:	435a      	muls	r2, r3
   d5182:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d5184:	9902      	ldr	r1, [sp, #8]
   d5186:	4291      	cmp	r1, r2
   d5188:	d915      	bls.n	d51b6 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d518a:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d518e:	2b04      	cmp	r3, #4
   d5190:	fa5f fc83 	uxtb.w	ip, r3
   d5194:	f103 0001 	add.w	r0, r3, #1
   d5198:	d813      	bhi.n	d51c2 <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d519a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d519e:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d51a2:	280d      	cmp	r0, #13
   d51a4:	f102 0201 	add.w	r2, r2, #1
   d51a8:	4603      	mov	r3, r0
   d51aa:	d1eb      	bne.n	d5184 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d51ac:	3c01      	subs	r4, #1
   d51ae:	b2e4      	uxtb	r4, r4
   d51b0:	2c00      	cmp	r4, #0
   d51b2:	d1bb      	bne.n	d512c <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d51b4:	e00e      	b.n	d51d4 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d51b6:	bf14      	ite	ne
   d51b8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d51bc:	2100      	moveq	r1, #0
   d51be:	b289      	uxth	r1, r1
   d51c0:	e7e5      	b.n	d518e <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d51c2:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d51c6:	bf94      	ite	ls
   d51c8:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d51cc:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d51d0:	8099      	strh	r1, [r3, #4]
   d51d2:	e7e6      	b.n	d51a2 <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d51d4:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d51d6:	4621      	mov	r1, r4
   d51d8:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d51da:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d51de:	f7ff fb17 	bl	d4810 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d51e2:	4607      	mov	r7, r0
   d51e4:	2800      	cmp	r0, #0
   d51e6:	f43f ae9e 	beq.w	d4f26 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d51ea:	2220      	movs	r2, #32
   d51ec:	4621      	mov	r1, r4
   d51ee:	f001 fed7 	bl	d6fa0 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d51f2:	464b      	mov	r3, r9
   d51f4:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d51f8:	603a      	str	r2, [r7, #0]
   d51fa:	685a      	ldr	r2, [r3, #4]
   d51fc:	607a      	str	r2, [r7, #4]
   d51fe:	891a      	ldrh	r2, [r3, #8]
   d5200:	813a      	strh	r2, [r7, #8]
   d5202:	7a9b      	ldrb	r3, [r3, #10]
   d5204:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d5206:	f899 3000 	ldrb.w	r3, [r9]
   d520a:	f003 0318 	and.w	r3, r3, #24
   d520e:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d5210:	4b18      	ldr	r3, [pc, #96]	; (d5274 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d5212:	681b      	ldr	r3, [r3, #0]
   d5214:	b12b      	cbz	r3, d5222 <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d5216:	f107 010e 	add.w	r1, r7, #14
   d521a:	f107 0010 	add.w	r0, r7, #16
   d521e:	4798      	blx	r3
   d5220:	e006      	b.n	d5230 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d5222:	2321      	movs	r3, #33	; 0x21
   d5224:	743b      	strb	r3, [r7, #16]
   d5226:	2328      	movs	r3, #40	; 0x28
   d5228:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d522a:	2308      	movs	r3, #8
   d522c:	73bc      	strb	r4, [r7, #14]
   d522e:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d5230:	8a3b      	ldrh	r3, [r7, #16]
   d5232:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d5234:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d5236:	89fb      	ldrh	r3, [r7, #14]
   d5238:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d523a:	68b2      	ldr	r2, [r6, #8]
   d523c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d5240:	f043 0301 	orr.w	r3, r3, #1
   d5244:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d5248:	9500      	str	r5, [sp, #0]
   d524a:	465b      	mov	r3, fp
   d524c:	4652      	mov	r2, sl
   d524e:	4631      	mov	r1, r6
   d5250:	9805      	ldr	r0, [sp, #20]
   d5252:	f7ff fb43 	bl	d48dc <_ZN7FatFile15openCachedEntryEPS_tih>
   d5256:	e009      	b.n	d526c <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d5258:	2701      	movs	r7, #1
   d525a:	e677      	b.n	d4f4c <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d525c:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d5260:	f1be 0f0d 	cmp.w	lr, #13
   d5264:	f43f ae82 	beq.w	d4f6c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5268:	46d4      	mov	ip, sl
   d526a:	e6c3      	b.n	d4ff4 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d526c:	b009      	add	sp, #36	; 0x24
   d526e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5272:	bf00      	nop
   d5274:	2003e474 	.word	0x2003e474

000d5278 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d5278:	f000 bcfe 	b.w	d5c78 <HAL_Pin_Map>

000d527c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d527c:	b570      	push	{r4, r5, r6, lr}
   d527e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5280:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5282:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5284:	b149      	cbz	r1, d529a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5286:	f001 febb 	bl	d7000 <strlen>
   d528a:	682b      	ldr	r3, [r5, #0]
   d528c:	4602      	mov	r2, r0
   d528e:	4621      	mov	r1, r4
   d5290:	4628      	mov	r0, r5
   d5292:	68db      	ldr	r3, [r3, #12]
    }
   d5294:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5298:	4718      	bx	r3
    }
   d529a:	bd70      	pop	{r4, r5, r6, pc}

000d529c <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d529c:	f000 bcec 	b.w	d5c78 <HAL_Pin_Map>

000d52a0 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d52a0:	f000 bcea 	b.w	d5c78 <HAL_Pin_Map>

000d52a4 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d52a4:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d52a6:	7803      	ldrb	r3, [r0, #0]
   d52a8:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d52aa:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d52ac:	d51e      	bpl.n	d52ec <_ZN8FatCache4syncEv+0x48>
   d52ae:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d52b0:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d52b2:	f100 060c 	add.w	r6, r0, #12
   d52b6:	4632      	mov	r2, r6
   d52b8:	6818      	ldr	r0, [r3, #0]
   d52ba:	f000 fb9b 	bl	d59f4 <_ZN9SdSpiCard10writeBlockEmPKh>
   d52be:	4605      	mov	r5, r0
   d52c0:	b908      	cbnz	r0, d52c6 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d52c2:	2500      	movs	r5, #0
   d52c4:	e013      	b.n	d52ee <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d52c6:	7823      	ldrb	r3, [r4, #0]
   d52c8:	079b      	lsls	r3, r3, #30
   d52ca:	d404      	bmi.n	d52d6 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d52cc:	7823      	ldrb	r3, [r4, #0]
   d52ce:	f023 0301 	bic.w	r3, r3, #1
   d52d2:	7023      	strb	r3, [r4, #0]
   d52d4:	e00b      	b.n	d52ee <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d52d6:	6863      	ldr	r3, [r4, #4]
   d52d8:	68a0      	ldr	r0, [r4, #8]
   d52da:	6919      	ldr	r1, [r3, #16]
   d52dc:	4632      	mov	r2, r6
   d52de:	4401      	add	r1, r0
   d52e0:	6818      	ldr	r0, [r3, #0]
   d52e2:	f000 fb87 	bl	d59f4 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d52e6:	2800      	cmp	r0, #0
   d52e8:	d1f0      	bne.n	d52cc <_ZN8FatCache4syncEv+0x28>
   d52ea:	e7ea      	b.n	d52c2 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d52ec:	2501      	movs	r5, #1

fail:
  return false;
}
   d52ee:	4628      	mov	r0, r5
   d52f0:	bd70      	pop	{r4, r5, r6, pc}

000d52f2 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d52f2:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d52f4:	6883      	ldr	r3, [r0, #8]
   d52f6:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d52f8:	4604      	mov	r4, r0
   d52fa:	460e      	mov	r6, r1
   d52fc:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d52fe:	d014      	beq.n	d532a <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d5300:	f7ff ffd0 	bl	d52a4 <_ZN8FatCache4syncEv>
   d5304:	b908      	cbnz	r0, d530a <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d5306:	2000      	movs	r0, #0
   d5308:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d530a:	076b      	lsls	r3, r5, #29
   d530c:	d503      	bpl.n	d5316 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d530e:	2300      	movs	r3, #0
   d5310:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d5312:	60a6      	str	r6, [r4, #8]
   d5314:	e009      	b.n	d532a <_ZN8FatCache4readEmh+0x38>
   d5316:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5318:	f104 020c 	add.w	r2, r4, #12
   d531c:	4631      	mov	r1, r6
   d531e:	6818      	ldr	r0, [r3, #0]
   d5320:	f000 fade 	bl	d58e0 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d5324:	2800      	cmp	r0, #0
   d5326:	d1f2      	bne.n	d530e <_ZN8FatCache4readEmh+0x1c>
   d5328:	e7ed      	b.n	d5306 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d532a:	7823      	ldrb	r3, [r4, #0]
   d532c:	4620      	mov	r0, r4
   d532e:	f005 0503 	and.w	r5, r5, #3
   d5332:	431d      	orrs	r5, r3
   d5334:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d5338:	bd70      	pop	{r4, r5, r6, pc}

000d533a <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d533a:	7983      	ldrb	r3, [r0, #6]
   d533c:	6940      	ldr	r0, [r0, #20]
   d533e:	3902      	subs	r1, #2
   d5340:	4099      	lsls	r1, r3
}
   d5342:	4408      	add	r0, r1
   d5344:	4770      	bx	lr

000d5346 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5346:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d5348:	b570      	push	{r4, r5, r6, lr}
   d534a:	4605      	mov	r5, r0
   d534c:	460c      	mov	r4, r1
   d534e:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5350:	d802      	bhi.n	d5358 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d5352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5356:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5358:	69c3      	ldr	r3, [r0, #28]
   d535a:	4299      	cmp	r1, r3
   d535c:	d8f9      	bhi.n	d5352 <_ZN9FatVolume6fatGetEmPm+0xc>
   d535e:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5360:	2b20      	cmp	r3, #32
   d5362:	d110      	bne.n	d5386 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d5364:	6981      	ldr	r1, [r0, #24]
   d5366:	2202      	movs	r2, #2
   d5368:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d536c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5370:	f7ff ffbf 	bl	d52f2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5374:	2800      	cmp	r0, #0
   d5376:	d0ec      	beq.n	d5352 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d5378:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d537c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d5380:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d5384:	e00f      	b.n	d53a6 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d5386:	2b10      	cmp	r3, #16
   d5388:	d1e3      	bne.n	d5352 <_ZN9FatVolume6fatGetEmPm+0xc>
   d538a:	6983      	ldr	r3, [r0, #24]
   d538c:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5390:	2202      	movs	r2, #2
   d5392:	4419      	add	r1, r3
   d5394:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5398:	f7ff ffab 	bl	d52f2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d539c:	2800      	cmp	r0, #0
   d539e:	d0d8      	beq.n	d5352 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d53a0:	b2e4      	uxtb	r4, r4
   d53a2:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d53a6:	69ea      	ldr	r2, [r5, #28]
   d53a8:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d53aa:	bf9a      	itte	ls
   d53ac:	6033      	strls	r3, [r6, #0]
  return 1;
   d53ae:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d53b0:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d53b2:	bd70      	pop	{r4, r5, r6, pc}

000d53b4 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d53b4:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d53b6:	b538      	push	{r3, r4, r5, lr}
   d53b8:	460c      	mov	r4, r1
   d53ba:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d53bc:	d801      	bhi.n	d53c2 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d53be:	2000      	movs	r0, #0
   d53c0:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d53c2:	69c3      	ldr	r3, [r0, #28]
   d53c4:	4299      	cmp	r1, r3
   d53c6:	d8fa      	bhi.n	d53be <_ZN9FatVolume6fatPutEmm+0xa>
   d53c8:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d53ca:	2b20      	cmp	r3, #32
   d53cc:	d10e      	bne.n	d53ec <_ZN9FatVolume6fatPutEmm+0x38>
   d53ce:	6981      	ldr	r1, [r0, #24]
   d53d0:	2203      	movs	r2, #3
   d53d2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d53d6:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d53da:	f7ff ff8a 	bl	d52f2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d53de:	2800      	cmp	r0, #0
   d53e0:	d0ed      	beq.n	d53be <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d53e2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d53e6:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d53ea:	e00f      	b.n	d540c <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d53ec:	2b10      	cmp	r3, #16
   d53ee:	d1e6      	bne.n	d53be <_ZN9FatVolume6fatPutEmm+0xa>
   d53f0:	6983      	ldr	r3, [r0, #24]
   d53f2:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d53f6:	2203      	movs	r2, #3
   d53f8:	4419      	add	r1, r3
   d53fa:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d53fe:	f7ff ff78 	bl	d52f2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d5402:	2800      	cmp	r0, #0
   d5404:	d0db      	beq.n	d53be <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d5406:	b2e4      	uxtb	r4, r4
   d5408:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d540c:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d540e:	bd38      	pop	{r3, r4, r5, pc}

000d5410 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d5410:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d5414:	68c4      	ldr	r4, [r0, #12]
   d5416:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d5418:	4605      	mov	r5, r0
   d541a:	460e      	mov	r6, r1
   d541c:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d541e:	d207      	bcs.n	d5430 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d5420:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d5422:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d5424:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d5426:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d5428:	429c      	cmp	r4, r3
   d542a:	d903      	bls.n	d5434 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d542c:	b9cf      	cbnz	r7, d5462 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d542e:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d5430:	2701      	movs	r7, #1
   d5432:	e7f7      	b.n	d5424 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d5434:	42a6      	cmp	r6, r4
   d5436:	d014      	beq.n	d5462 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d5438:	aa01      	add	r2, sp, #4
   d543a:	4621      	mov	r1, r4
   d543c:	4628      	mov	r0, r5
   d543e:	f7ff ff82 	bl	d5346 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d5442:	2800      	cmp	r0, #0
   d5444:	db0d      	blt.n	d5462 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d5446:	d0ed      	beq.n	d5424 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d5448:	9b01      	ldr	r3, [sp, #4]
   d544a:	2b00      	cmp	r3, #0
   d544c:	d1ea      	bne.n	d5424 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d544e:	b107      	cbz	r7, d5452 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d5450:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d5452:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d5456:	4621      	mov	r1, r4
   d5458:	4628      	mov	r0, r5
   d545a:	f7ff ffab 	bl	d53b4 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d545e:	4607      	mov	r7, r0
   d5460:	b908      	cbnz	r0, d5466 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d5462:	2700      	movs	r7, #0
   d5464:	e00b      	b.n	d547e <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d5466:	b916      	cbnz	r6, d546e <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d5468:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d546c:	e007      	b.n	d547e <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d546e:	4622      	mov	r2, r4
   d5470:	4631      	mov	r1, r6
   d5472:	4628      	mov	r0, r5
   d5474:	f7ff ff9e 	bl	d53b4 <_ZN9FatVolume6fatPutEmm>
   d5478:	2800      	cmp	r0, #0
   d547a:	d1f5      	bne.n	d5468 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d547c:	e7f1      	b.n	d5462 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d547e:	4638      	mov	r0, r7
   d5480:	b002      	add	sp, #8
   d5482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5486 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d5486:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5488:	4605      	mov	r5, r0
   d548a:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d548c:	aa01      	add	r2, sp, #4
   d548e:	4621      	mov	r1, r4
   d5490:	4628      	mov	r0, r5
   d5492:	f7ff ff58 	bl	d5346 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d5496:	1e06      	subs	r6, r0, #0
   d5498:	da01      	bge.n	d549e <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d549a:	2000      	movs	r0, #0
   d549c:	e00f      	b.n	d54be <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d549e:	2200      	movs	r2, #0
   d54a0:	4621      	mov	r1, r4
   d54a2:	4628      	mov	r0, r5
   d54a4:	f7ff ff86 	bl	d53b4 <_ZN9FatVolume6fatPutEmm>
   d54a8:	2800      	cmp	r0, #0
   d54aa:	d0f6      	beq.n	d549a <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d54ac:	68eb      	ldr	r3, [r5, #12]
   d54ae:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d54b0:	bf9c      	itt	ls
   d54b2:	f104 34ff 	addls.w	r4, r4, #4294967295	; 0xffffffff
   d54b6:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d54b8:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d54ba:	2e00      	cmp	r6, #0
   d54bc:	d1e6      	bne.n	d548c <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d54be:	b002      	add	sp, #8
   d54c0:	bd70      	pop	{r4, r5, r6, pc}

000d54c2 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d54c2:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d54c4:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d54c6:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d54c8:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d54ca:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d54cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d54d0:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d54d2:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d54d4:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d54d6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d54da:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d54dc:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d54e0:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d54e4:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d54e8:	b1a1      	cbz	r1, d5514 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d54ea:	2904      	cmp	r1, #4
   d54ec:	d85d      	bhi.n	d55aa <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d54ee:	4611      	mov	r1, r2
   d54f0:	3024      	adds	r0, #36	; 0x24
   d54f2:	f7ff fefe 	bl	d52f2 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d54f6:	2800      	cmp	r0, #0
   d54f8:	d057      	beq.n	d55aa <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d54fa:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d54fe:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d5502:	065b      	lsls	r3, r3, #25
   d5504:	d151      	bne.n	d55aa <_ZN9FatVolume4initEh+0xe8>
   d5506:	351b      	adds	r5, #27
   d5508:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d550c:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d5510:	2d00      	cmp	r5, #0
   d5512:	d04a      	beq.n	d55aa <_ZN9FatVolume4initEh+0xe8>
   d5514:	2200      	movs	r2, #0
   d5516:	4629      	mov	r1, r5
   d5518:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d551c:	f7ff fee9 	bl	d52f2 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d5520:	2800      	cmp	r0, #0
   d5522:	d042      	beq.n	d55aa <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d5524:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d5528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d552c:	d13d      	bne.n	d55aa <_ZN9FatVolume4initEh+0xe8>
   d552e:	7c03      	ldrb	r3, [r0, #16]
   d5530:	2b02      	cmp	r3, #2
   d5532:	d13a      	bne.n	d55aa <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d5534:	89c3      	ldrh	r3, [r0, #14]
   d5536:	2b00      	cmp	r3, #0
   d5538:	d037      	beq.n	d55aa <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d553a:	7b41      	ldrb	r1, [r0, #13]
   d553c:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d553e:	1e4b      	subs	r3, r1, #1
   d5540:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d5542:	2300      	movs	r3, #0
   d5544:	71a3      	strb	r3, [r4, #6]
   d5546:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d5548:	2301      	movs	r3, #1
   d554a:	428b      	cmp	r3, r1
   d554c:	d007      	beq.n	d555e <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d554e:	3e01      	subs	r6, #1
   d5550:	d02b      	beq.n	d55aa <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d5552:	79a2      	ldrb	r2, [r4, #6]
   d5554:	005b      	lsls	r3, r3, #1
   d5556:	3201      	adds	r2, #1
   d5558:	b2db      	uxtb	r3, r3
   d555a:	71a2      	strb	r2, [r4, #6]
   d555c:	e7f5      	b.n	d554a <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d555e:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d5560:	b902      	cbnz	r2, d5564 <_ZN9FatVolume4initEh+0xa2>
   d5562:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d5564:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d5566:	89c6      	ldrh	r6, [r0, #14]
   d5568:	442e      	add	r6, r5
   d556a:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d556c:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d5570:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d5572:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d5576:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d5578:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d557c:	0152      	lsls	r2, r2, #5
   d557e:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d5582:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d5586:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d5588:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d558c:	b903      	cbnz	r3, d5590 <_ZN9FatVolume4initEh+0xce>
   d558e:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d5590:	1aad      	subs	r5, r5, r2
   d5592:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d5594:	79a5      	ldrb	r5, [r4, #6]
   d5596:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d559a:	1c6b      	adds	r3, r5, #1
   d559c:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d559e:	f640 73f4 	movw	r3, #4084	; 0xff4
   d55a2:	429d      	cmp	r5, r3
   d55a4:	d803      	bhi.n	d55ae <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d55a6:	230c      	movs	r3, #12
   d55a8:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d55aa:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d55ac:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d55ae:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d55b2:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d55b4:	bf85      	ittet	hi
   d55b6:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d55b8:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d55ba:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d55bc:	2320      	movhi	r3, #32
   d55be:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d55c0:	2001      	movs	r0, #1

fail:
  return false;
}
   d55c2:	bd70      	pop	{r4, r5, r6, pc}

000d55c4 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d55c4:	f000 bb58 	b.w	d5c78 <HAL_Pin_Map>

000d55c8 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d55c8:	f000 bb56 	b.w	d5c78 <HAL_Pin_Map>

000d55cc <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d55cc:	f000 bb54 	b.w	d5c78 <HAL_Pin_Map>

000d55d0 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d55d0:	f000 bb52 	b.w	d5c78 <HAL_Pin_Map>

000d55d4 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d55d4:	f000 bb50 	b.w	d5c78 <HAL_Pin_Map>

000d55d8 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d55d8:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d55da:	4c0e      	ldr	r4, [pc, #56]	; (d5614 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d55dc:	460e      	mov	r6, r1
   d55de:	4615      	mov	r5, r2
   d55e0:	f000 fb3a 	bl	d5c58 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d55e4:	6823      	ldr	r3, [r4, #0]
   d55e6:	1ac0      	subs	r0, r0, r3
   d55e8:	4b0b      	ldr	r3, [pc, #44]	; (d5618 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d55ea:	4298      	cmp	r0, r3
   d55ec:	d908      	bls.n	d5600 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d55ee:	f000 fb3b 	bl	d5c68 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d55f2:	4b0a      	ldr	r3, [pc, #40]	; (d561c <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d55f4:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d55f6:	f000 fca3 	bl	d5f40 <spark_process>
   d55fa:	f000 fb2d 	bl	d5c58 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d55fe:	6020      	str	r0, [r4, #0]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5600:	f000 fb32 	bl	d5c68 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d5604:	b280      	uxth	r0, r0
   d5606:	1b80      	subs	r0, r0, r6
}
   d5608:	42a8      	cmp	r0, r5
   d560a:	bfd4      	ite	le
   d560c:	2000      	movle	r0, #0
   d560e:	2001      	movgt	r0, #1
   d5610:	bd70      	pop	{r4, r5, r6, pc}
   d5612:	bf00      	nop
   d5614:	2003e478 	.word	0x2003e478
   d5618:	000186a0 	.word	0x000186a0
   d561c:	2003e714 	.word	0x2003e714

000d5620 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d5620:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d5622:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d5624:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d5626:	b94d      	cbnz	r5, d563c <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d5628:	6840      	ldr	r0, [r0, #4]
   d562a:	f000 fa7d 	bl	d5b28 <_ZN14SdSpiAltDriver8activateEv>
   d562e:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d5630:	4629      	mov	r1, r5
   d5632:	7d18      	ldrb	r0, [r3, #20]
   d5634:	f001 facb 	bl	d6bce <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d5638:	2301      	movs	r3, #1
   d563a:	7223      	strb	r3, [r4, #8]
   d563c:	bd38      	pop	{r3, r4, r5, pc}

000d563e <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d563e:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d5640:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d5642:	4604      	mov	r4, r0
  if (m_spiActive) {
   d5644:	b16b      	cbz	r3, d5662 <_ZN9SdSpiCard7spiStopEv+0x24>
   d5646:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d5648:	2101      	movs	r1, #1
   d564a:	7d18      	ldrb	r0, [r3, #20]
   d564c:	f001 fabf 	bl	d6bce <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5650:	21ff      	movs	r1, #255	; 0xff
   d5652:	6860      	ldr	r0, [r4, #4]
   d5654:	f000 fa9a 	bl	d5b8c <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d5658:	6860      	ldr	r0, [r4, #4]
   d565a:	f000 fa79 	bl	d5b50 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d565e:	2300      	movs	r3, #0
   d5660:	7223      	strb	r3, [r4, #8]
   d5662:	bd10      	pop	{r4, pc}

000d5664 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d5664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5666:	4604      	mov	r4, r0
   d5668:	460d      	mov	r5, r1
   d566a:	4616      	mov	r6, r2
   d566c:	f000 fafc 	bl	d5c68 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d5670:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5672:	6860      	ldr	r0, [r4, #4]
   d5674:	f000 fa6f 	bl	d5b56 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d5678:	28ff      	cmp	r0, #255	; 0xff
   d567a:	7260      	strb	r0, [r4, #9]
   d567c:	d109      	bne.n	d5692 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d567e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5682:	4639      	mov	r1, r7
   d5684:	4620      	mov	r0, r4
   d5686:	f7ff ffa7 	bl	d55d8 <_ZN9SdSpiCard10isTimedOutEtt>
   d568a:	2800      	cmp	r0, #0
   d568c:	d0f1      	beq.n	d5672 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d568e:	2355      	movs	r3, #85	; 0x55
   d5690:	e00b      	b.n	d56aa <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d5692:	28fe      	cmp	r0, #254	; 0xfe
   d5694:	d001      	beq.n	d569a <_ZN9SdSpiCard8readDataEPhj+0x36>
   d5696:	2350      	movs	r3, #80	; 0x50
   d5698:	e007      	b.n	d56aa <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d569a:	4632      	mov	r2, r6
   d569c:	4629      	mov	r1, r5
   d569e:	6860      	ldr	r0, [r4, #4]
   d56a0:	f000 fa5e 	bl	d5b60 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d56a4:	7260      	strb	r0, [r4, #9]
   d56a6:	b130      	cbz	r0, d56b6 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d56a8:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d56aa:	4620      	mov	r0, r4
   d56ac:	7023      	strb	r3, [r4, #0]
   d56ae:	f7ff ffc6 	bl	d563e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d56b2:	2000      	movs	r0, #0
}
   d56b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d56b6:	6860      	ldr	r0, [r4, #4]
   d56b8:	f000 fa4d 	bl	d5b56 <_ZN14SdSpiAltDriver7receiveEv>
   d56bc:	6860      	ldr	r0, [r4, #4]
   d56be:	f000 fa4a 	bl	d5b56 <_ZN14SdSpiAltDriver7receiveEv>
   d56c2:	2001      	movs	r0, #1
   d56c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d56c6 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d56c6:	b570      	push	{r4, r5, r6, lr}
   d56c8:	4604      	mov	r4, r0
   d56ca:	460e      	mov	r6, r1
   d56cc:	f000 facc 	bl	d5c68 <HAL_Timer_Get_Milli_Seconds>
   d56d0:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d56d2:	4632      	mov	r2, r6
   d56d4:	4629      	mov	r1, r5
   d56d6:	4620      	mov	r0, r4
   d56d8:	f7ff ff7e 	bl	d55d8 <_ZN9SdSpiCard10isTimedOutEtt>
   d56dc:	b930      	cbnz	r0, d56ec <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d56de:	6860      	ldr	r0, [r4, #4]
   d56e0:	f000 fa39 	bl	d5b56 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d56e4:	28ff      	cmp	r0, #255	; 0xff
   d56e6:	d1f4      	bne.n	d56d2 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d56e8:	2001      	movs	r0, #1
   d56ea:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d56ec:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d56ee:	bd70      	pop	{r4, r5, r6, pc}

000d56f0 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d56f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d56f2:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d56f4:	9201      	str	r2, [sp, #4]
   d56f6:	4604      	mov	r4, r0
   d56f8:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d56fa:	b90b      	cbnz	r3, d5700 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d56fc:	f7ff ff90 	bl	d5620 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d5700:	b125      	cbz	r5, d570c <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d5702:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d5706:	4620      	mov	r0, r4
   d5708:	f7ff ffdd 	bl	d56c6 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d570c:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d5710:	6860      	ldr	r0, [r4, #4]
   d5712:	f000 fa3b 	bl	d5b8c <_ZN14SdSpiAltDriver4sendEh>
   d5716:	f10d 0607 	add.w	r6, sp, #7
   d571a:	f10d 0703 	add.w	r7, sp, #3
   d571e:	f816 1901 	ldrb.w	r1, [r6], #-1
   d5722:	6860      	ldr	r0, [r4, #4]
   d5724:	f000 fa32 	bl	d5b8c <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d5728:	42be      	cmp	r6, r7
   d572a:	d1f8      	bne.n	d571e <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d572c:	2d00      	cmp	r5, #0
   d572e:	bf0c      	ite	eq
   d5730:	2195      	moveq	r1, #149	; 0x95
   d5732:	2187      	movne	r1, #135	; 0x87
   d5734:	6860      	ldr	r0, [r4, #4]
   d5736:	f000 fa29 	bl	d5b8c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d573a:	6860      	ldr	r0, [r4, #4]
   d573c:	f000 fa0b 	bl	d5b56 <_ZN14SdSpiAltDriver7receiveEv>
   d5740:	250b      	movs	r5, #11
   d5742:	6860      	ldr	r0, [r4, #4]
   d5744:	f000 fa07 	bl	d5b56 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d5748:	0603      	lsls	r3, r0, #24
   d574a:	7260      	strb	r0, [r4, #9]
   d574c:	d503      	bpl.n	d5756 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d574e:	3d01      	subs	r5, #1
   d5750:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5754:	d1f5      	bne.n	d5742 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d5756:	b003      	add	sp, #12
   d5758:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d575a <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d575a:	b570      	push	{r4, r5, r6, lr}
   d575c:	4604      	mov	r4, r0
   d575e:	460d      	mov	r5, r1
   d5760:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d5762:	2137      	movs	r1, #55	; 0x37
   d5764:	2200      	movs	r2, #0
   d5766:	f7ff ffc3 	bl	d56f0 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d576a:	4632      	mov	r2, r6
   d576c:	4629      	mov	r1, r5
   d576e:	4620      	mov	r0, r4
  }
   d5770:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d5774:	f7ff bfbc 	b.w	d56f0 <_ZN9SdSpiCard11cardCommandEhm>

000d5778 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d5778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d577c:	2500      	movs	r5, #0
   d577e:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d5780:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d5782:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d5784:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d5786:	4604      	mov	r4, r0
   d5788:	4690      	mov	r8, r2
   d578a:	461e      	mov	r6, r3
   d578c:	f000 fa6c 	bl	d5c68 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d5790:	4641      	mov	r1, r8
   d5792:	4607      	mov	r7, r0
   d5794:	6860      	ldr	r0, [r4, #4]
   d5796:	f000 f9cb 	bl	d5b30 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d579a:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_CORE = 72*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d579c:	4a4f      	ldr	r2, [pc, #316]	; (d58dc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d579e:	721d      	strb	r5, [r3, #8]
   d57a0:	f04f 0801 	mov.w	r8, #1
   d57a4:	60da      	str	r2, [r3, #12]
   d57a6:	745d      	strb	r5, [r3, #17]
   d57a8:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d57ac:	4620      	mov	r0, r4
   d57ae:	f7ff ff37 	bl	d5620 <_ZN9SdSpiCard8spiStartEv>
   d57b2:	6863      	ldr	r3, [r4, #4]
   d57b4:	4641      	mov	r1, r8
   d57b6:	7d18      	ldrb	r0, [r3, #20]
   d57b8:	f001 fa09 	bl	d6bce <digitalWrite>
   d57bc:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d57be:	21ff      	movs	r1, #255	; 0xff
   d57c0:	6860      	ldr	r0, [r4, #4]
   d57c2:	3d01      	subs	r5, #1
   d57c4:	f000 f9e2 	bl	d5b8c <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d57c8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d57cc:	d1f7      	bne.n	d57be <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d57ce:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d57d0:	4629      	mov	r1, r5
   d57d2:	7d18      	ldrb	r0, [r3, #20]
   d57d4:	f001 f9fb 	bl	d6bce <digitalWrite>
   d57d8:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d57da:	2200      	movs	r2, #0
   d57dc:	4611      	mov	r1, r2
   d57de:	4620      	mov	r0, r4
   d57e0:	f7ff ff86 	bl	d56f0 <_ZN9SdSpiCard11cardCommandEhm>
   d57e4:	2801      	cmp	r0, #1
   d57e6:	4680      	mov	r8, r0
   d57e8:	d012      	beq.n	d5810 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d57ea:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d57ec:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d57f0:	d101      	bne.n	d57f6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d57f2:	2320      	movs	r3, #32
   d57f4:	e057      	b.n	d58a6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d57f6:	21fd      	movs	r1, #253	; 0xfd
   d57f8:	6860      	ldr	r0, [r4, #4]
   d57fa:	f000 f9c7 	bl	d5b8c <_ZN14SdSpiAltDriver4sendEh>
   d57fe:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5802:	6860      	ldr	r0, [r4, #4]
   d5804:	f000 f9a7 	bl	d5b56 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d5808:	f1b8 0801 	subs.w	r8, r8, #1
   d580c:	d1f9      	bne.n	d5802 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d580e:	e7e4      	b.n	d57da <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d5810:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d5814:	2108      	movs	r1, #8
   d5816:	4620      	mov	r0, r4
   d5818:	f7ff ff6a 	bl	d56f0 <_ZN9SdSpiCard11cardCommandEhm>
   d581c:	2805      	cmp	r0, #5
   d581e:	d102      	bne.n	d5826 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d5820:	f884 800a 	strb.w	r8, [r4, #10]
   d5824:	e00f      	b.n	d5846 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d5826:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5828:	6860      	ldr	r0, [r4, #4]
   d582a:	f000 f994 	bl	d5b56 <_ZN14SdSpiAltDriver7receiveEv>
   d582e:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d5830:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d5834:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d5836:	d1f7      	bne.n	d5828 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d5838:	28aa      	cmp	r0, #170	; 0xaa
   d583a:	d102      	bne.n	d5842 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d583c:	2302      	movs	r3, #2
   d583e:	72a3      	strb	r3, [r4, #10]
   d5840:	e001      	b.n	d5846 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5842:	2325      	movs	r3, #37	; 0x25
   d5844:	e02f      	b.n	d58a6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d5846:	7aa3      	ldrb	r3, [r4, #10]
   d5848:	2b02      	cmp	r3, #2
   d584a:	bf0c      	ite	eq
   d584c:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d5850:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d5852:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d5854:	462a      	mov	r2, r5
   d5856:	2129      	movs	r1, #41	; 0x29
   d5858:	4620      	mov	r0, r4
   d585a:	f7ff ff7e 	bl	d575a <_ZN9SdSpiCard8cardAcmdEhm>
   d585e:	4602      	mov	r2, r0
   d5860:	b148      	cbz	r0, d5876 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d5862:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d5866:	4639      	mov	r1, r7
   d5868:	4620      	mov	r0, r4
   d586a:	f7ff feb5 	bl	d55d8 <_ZN9SdSpiCard10isTimedOutEtt>
   d586e:	2800      	cmp	r0, #0
   d5870:	d0f0      	beq.n	d5854 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d5872:	2343      	movs	r3, #67	; 0x43
   d5874:	e017      	b.n	d58a6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d5876:	7aa3      	ldrb	r3, [r4, #10]
   d5878:	2b02      	cmp	r3, #2
   d587a:	d00e      	beq.n	d589a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d587c:	4620      	mov	r0, r4
   d587e:	f7ff fede 	bl	d563e <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d5882:	6863      	ldr	r3, [r4, #4]
   d5884:	68b0      	ldr	r0, [r6, #8]
   d5886:	7934      	ldrb	r4, [r6, #4]
   d5888:	7b31      	ldrb	r1, [r6, #12]
   d588a:	7b72      	ldrb	r2, [r6, #13]
   d588c:	745a      	strb	r2, [r3, #17]
   d588e:	60d8      	str	r0, [r3, #12]
   d5890:	721c      	strb	r4, [r3, #8]
   d5892:	7419      	strb	r1, [r3, #16]
  return true;
   d5894:	2001      	movs	r0, #1
   d5896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d589a:	213a      	movs	r1, #58	; 0x3a
   d589c:	4620      	mov	r0, r4
   d589e:	f7ff ff27 	bl	d56f0 <_ZN9SdSpiCard11cardCommandEhm>
   d58a2:	b138      	cbz	r0, d58b4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d58a4:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d58a6:	4620      	mov	r0, r4
   d58a8:	7023      	strb	r3, [r4, #0]
   d58aa:	f7ff fec8 	bl	d563e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d58ae:	2000      	movs	r0, #0
}
   d58b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d58b4:	6860      	ldr	r0, [r4, #4]
   d58b6:	f000 f94e 	bl	d5b56 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d58ba:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d58be:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d58c0:	bf04      	itt	eq
   d58c2:	2303      	moveq	r3, #3
   d58c4:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d58c6:	6860      	ldr	r0, [r4, #4]
   d58c8:	f000 f945 	bl	d5b56 <_ZN14SdSpiAltDriver7receiveEv>
   d58cc:	6860      	ldr	r0, [r4, #4]
   d58ce:	f000 f942 	bl	d5b56 <_ZN14SdSpiAltDriver7receiveEv>
   d58d2:	6860      	ldr	r0, [r4, #4]
   d58d4:	f000 f93f 	bl	d5b56 <_ZN14SdSpiAltDriver7receiveEv>
   d58d8:	e7d0      	b.n	d587c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d58da:	bf00      	nop
   d58dc:	0003d090 	.word	0x0003d090

000d58e0 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d58e0:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d58e2:	7a83      	ldrb	r3, [r0, #10]
   d58e4:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d58e6:	bf18      	it	ne
   d58e8:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d58ea:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d58ec:	460a      	mov	r2, r1
   d58ee:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d58f0:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d58f2:	f7ff fefd 	bl	d56f0 <_ZN9SdSpiCard11cardCommandEhm>
   d58f6:	b110      	cbz	r0, d58fe <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d58f8:	2330      	movs	r3, #48	; 0x30
   d58fa:	7023      	strb	r3, [r4, #0]
   d58fc:	e00b      	b.n	d5916 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d58fe:	4629      	mov	r1, r5
   d5900:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5904:	4620      	mov	r0, r4
   d5906:	f7ff fead 	bl	d5664 <_ZN9SdSpiCard8readDataEPhj>
   d590a:	4605      	mov	r5, r0
   d590c:	b118      	cbz	r0, d5916 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d590e:	4620      	mov	r0, r4
   d5910:	f7ff fe95 	bl	d563e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5914:	e003      	b.n	d591e <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d5916:	4620      	mov	r0, r4
   d5918:	f7ff fe91 	bl	d563e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d591c:	2500      	movs	r5, #0
}
   d591e:	4628      	mov	r0, r5
   d5920:	bd38      	pop	{r3, r4, r5, pc}

000d5922 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5922:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d5924:	7a83      	ldrb	r3, [r0, #10]
   d5926:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5928:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d592a:	bf18      	it	ne
   d592c:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d592e:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5930:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d5932:	f7ff fedd 	bl	d56f0 <_ZN9SdSpiCard11cardCommandEhm>
   d5936:	b130      	cbz	r0, d5946 <_ZN9SdSpiCard9readStartEm+0x24>
   d5938:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d593a:	4620      	mov	r0, r4
   d593c:	7023      	strb	r3, [r4, #0]
   d593e:	f7ff fe7e 	bl	d563e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5942:	2000      	movs	r0, #0
   d5944:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d5946:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5948:	bd10      	pop	{r4, pc}

000d594a <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d594a:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d594c:	2200      	movs	r2, #0
   d594e:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d5950:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d5952:	f7ff fecd 	bl	d56f0 <_ZN9SdSpiCard11cardCommandEhm>
   d5956:	b130      	cbz	r0, d5966 <_ZN9SdSpiCard8readStopEv+0x1c>
   d5958:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d595a:	4620      	mov	r0, r4
   d595c:	7023      	strb	r3, [r4, #0]
   d595e:	f7ff fe6e 	bl	d563e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5962:	2000      	movs	r0, #0
   d5964:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d5966:	4620      	mov	r0, r4
   d5968:	f7ff fe69 	bl	d563e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d596c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d596e:	bd10      	pop	{r4, pc}

000d5970 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d5970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5972:	4605      	mov	r5, r0
   d5974:	4616      	mov	r6, r2
   d5976:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d5978:	f7ff ffd3 	bl	d5922 <_ZN9SdSpiCard9readStartEm>
   d597c:	b198      	cbz	r0, d59a6 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d597e:	2400      	movs	r4, #0
   d5980:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d5982:	429f      	cmp	r7, r3
   d5984:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d5988:	d908      	bls.n	d599c <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d598a:	f44f 7200 	mov.w	r2, #512	; 0x200
   d598e:	4628      	mov	r0, r5
   d5990:	f7ff fe68 	bl	d5664 <_ZN9SdSpiCard8readDataEPhj>
   d5994:	3401      	adds	r4, #1
   d5996:	2800      	cmp	r0, #0
   d5998:	d1f2      	bne.n	d5980 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d599a:	e004      	b.n	d59a6 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d599c:	4628      	mov	r0, r5
}
   d599e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d59a2:	f7ff bfd2 	b.w	d594a <_ZN9SdSpiCard8readStopEv>
}
   d59a6:	2000      	movs	r0, #0
   d59a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d59aa <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d59aa:	b538      	push	{r3, r4, r5, lr}
   d59ac:	4604      	mov	r4, r0
   d59ae:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d59b0:	6840      	ldr	r0, [r0, #4]
   d59b2:	f000 f8eb 	bl	d5b8c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d59b6:	f44f 7200 	mov.w	r2, #512	; 0x200
   d59ba:	4629      	mov	r1, r5
   d59bc:	6860      	ldr	r0, [r4, #4]
   d59be:	f000 f8e9 	bl	d5b94 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d59c2:	21ff      	movs	r1, #255	; 0xff
   d59c4:	6860      	ldr	r0, [r4, #4]
   d59c6:	f000 f8e1 	bl	d5b8c <_ZN14SdSpiAltDriver4sendEh>
   d59ca:	21ff      	movs	r1, #255	; 0xff
   d59cc:	6860      	ldr	r0, [r4, #4]
   d59ce:	f000 f8dd 	bl	d5b8c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d59d2:	6860      	ldr	r0, [r4, #4]
   d59d4:	f000 f8bf 	bl	d5b56 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d59d8:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d59da:	f000 001f 	and.w	r0, r0, #31
   d59de:	2805      	cmp	r0, #5
   d59e0:	d006      	beq.n	d59f0 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d59e2:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d59e4:	4620      	mov	r0, r4
   d59e6:	7023      	strb	r3, [r4, #0]
   d59e8:	f7ff fe29 	bl	d563e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d59ec:	2000      	movs	r0, #0
   d59ee:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d59f0:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d59f2:	bd38      	pop	{r3, r4, r5, pc}

000d59f4 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d59f4:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d59f6:	7a83      	ldrb	r3, [r0, #10]
   d59f8:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d59fa:	bf18      	it	ne
   d59fc:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d59fe:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d5a00:	460a      	mov	r2, r1
   d5a02:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d5a04:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d5a06:	f7ff fe73 	bl	d56f0 <_ZN9SdSpiCard11cardCommandEhm>
   d5a0a:	4606      	mov	r6, r0
   d5a0c:	b108      	cbz	r0, d5a12 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d5a0e:	2332      	movs	r3, #50	; 0x32
   d5a10:	e01d      	b.n	d5a4e <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d5a12:	462a      	mov	r2, r5
   d5a14:	21fe      	movs	r1, #254	; 0xfe
   d5a16:	4620      	mov	r0, r4
   d5a18:	f7ff ffc7 	bl	d59aa <_ZN9SdSpiCard9writeDataEhPKh>
   d5a1c:	b1c0      	cbz	r0, d5a50 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5a1e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d5a22:	4620      	mov	r0, r4
   d5a24:	f7ff fe4f 	bl	d56c6 <_ZN9SdSpiCard11waitNotBusyEt>
   d5a28:	4605      	mov	r5, r0
   d5a2a:	b908      	cbnz	r0, d5a30 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d5a2c:	235a      	movs	r3, #90	; 0x5a
   d5a2e:	e00e      	b.n	d5a4e <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d5a30:	4632      	mov	r2, r6
   d5a32:	210d      	movs	r1, #13
   d5a34:	4620      	mov	r0, r4
   d5a36:	f7ff fe5b 	bl	d56f0 <_ZN9SdSpiCard11cardCommandEhm>
   d5a3a:	b938      	cbnz	r0, d5a4c <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5a3c:	6860      	ldr	r0, [r4, #4]
   d5a3e:	f000 f88a 	bl	d5b56 <_ZN14SdSpiAltDriver7receiveEv>
   d5a42:	b918      	cbnz	r0, d5a4c <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d5a44:	4620      	mov	r0, r4
   d5a46:	f7ff fdfa 	bl	d563e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d5a4a:	e005      	b.n	d5a58 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5a4c:	2329      	movs	r3, #41	; 0x29
   d5a4e:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d5a50:	4620      	mov	r0, r4
   d5a52:	f7ff fdf4 	bl	d563e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5a56:	2500      	movs	r5, #0
}
   d5a58:	4628      	mov	r0, r5
   d5a5a:	bd70      	pop	{r4, r5, r6, pc}

000d5a5c <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d5a5c:	b538      	push	{r3, r4, r5, lr}
   d5a5e:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5a60:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d5a64:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5a66:	f7ff fe2e 	bl	d56c6 <_ZN9SdSpiCard11waitNotBusyEt>
   d5a6a:	b910      	cbnz	r0, d5a72 <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d5a6c:	235b      	movs	r3, #91	; 0x5b
   d5a6e:	7023      	strb	r3, [r4, #0]
   d5a70:	e005      	b.n	d5a7e <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d5a72:	462a      	mov	r2, r5
   d5a74:	21fc      	movs	r1, #252	; 0xfc
   d5a76:	4620      	mov	r0, r4
   d5a78:	f7ff ff97 	bl	d59aa <_ZN9SdSpiCard9writeDataEhPKh>
   d5a7c:	b918      	cbnz	r0, d5a86 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5a7e:	4620      	mov	r0, r4
   d5a80:	f7ff fddd 	bl	d563e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5a84:	2000      	movs	r0, #0
}
   d5a86:	bd38      	pop	{r3, r4, r5, pc}

000d5a88 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5a88:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d5a8a:	7a83      	ldrb	r3, [r0, #10]
   d5a8c:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5a8e:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d5a90:	bf18      	it	ne
   d5a92:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d5a94:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5a96:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d5a98:	f7ff fe2a 	bl	d56f0 <_ZN9SdSpiCard11cardCommandEhm>
   d5a9c:	b130      	cbz	r0, d5aac <_ZN9SdSpiCard10writeStartEm+0x24>
   d5a9e:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5aa0:	4620      	mov	r0, r4
   d5aa2:	7023      	strb	r3, [r4, #0]
   d5aa4:	f7ff fdcb 	bl	d563e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5aa8:	2000      	movs	r0, #0
   d5aaa:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d5aac:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5aae:	bd10      	pop	{r4, pc}

000d5ab0 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d5ab0:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5ab2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d5ab6:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5ab8:	f7ff fe05 	bl	d56c6 <_ZN9SdSpiCard11waitNotBusyEt>
   d5abc:	4605      	mov	r5, r0
   d5abe:	b120      	cbz	r0, d5aca <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5ac0:	21fd      	movs	r1, #253	; 0xfd
   d5ac2:	6860      	ldr	r0, [r4, #4]
   d5ac4:	f000 f862 	bl	d5b8c <_ZN14SdSpiAltDriver4sendEh>
   d5ac8:	e001      	b.n	d5ace <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5aca:	2356      	movs	r3, #86	; 0x56
   d5acc:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d5ace:	4620      	mov	r0, r4
   d5ad0:	f7ff fdb5 	bl	d563e <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d5ad4:	4628      	mov	r0, r5
   d5ad6:	bd38      	pop	{r3, r4, r5, pc}

000d5ad8 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d5ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5ada:	4605      	mov	r5, r0
   d5adc:	4616      	mov	r6, r2
   d5ade:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d5ae0:	f7ff ffd2 	bl	d5a88 <_ZN9SdSpiCard10writeStartEm>
   d5ae4:	b170      	cbz	r0, d5b04 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d5ae6:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5ae8:	42bc      	cmp	r4, r7
   d5aea:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d5aee:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5af0:	d004      	beq.n	d5afc <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d5af2:	f7ff ffb3 	bl	d5a5c <_ZN9SdSpiCard9writeDataEPKh>
   d5af6:	b128      	cbz	r0, d5b04 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d5af8:	3401      	adds	r4, #1
   d5afa:	e7f5      	b.n	d5ae8 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d5afc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d5b00:	f7ff bfd6 	b.w	d5ab0 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d5b04:	4628      	mov	r0, r5
   d5b06:	f7ff fd9a 	bl	d563e <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d5b0a:	2000      	movs	r0, #0
   d5b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5b0e <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d5b0e:	f000 b8b3 	b.w	d5c78 <HAL_Pin_Map>

000d5b12 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d5b12:	f000 b8b1 	b.w	d5c78 <HAL_Pin_Map>

000d5b16 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d5b16:	f000 b8af 	b.w	d5c78 <HAL_Pin_Map>
	...

000d5b1c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d5b1c:	4b01      	ldr	r3, [pc, #4]	; (d5b24 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d5b1e:	2201      	movs	r2, #1
   d5b20:	701a      	strb	r2, [r3, #0]
   d5b22:	4770      	bx	lr
   d5b24:	2003e47c 	.word	0x2003e47c

000d5b28 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d5b28:	1d01      	adds	r1, r0, #4
   d5b2a:	6800      	ldr	r0, [r0, #0]
   d5b2c:	f000 be14 	b.w	d6758 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d5b30 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d5b30:	b510      	push	{r4, lr}
   d5b32:	4604      	mov	r4, r0
  m_csPin = csPin;
   d5b34:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d5b36:	6800      	ldr	r0, [r0, #0]
   d5b38:	f000 fdf0 	bl	d671c <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d5b3c:	7d20      	ldrb	r0, [r4, #20]
   d5b3e:	2101      	movs	r1, #1
   d5b40:	f001 f834 	bl	d6bac <pinMode>
  digitalWrite(m_csPin, HIGH);
   d5b44:	7d20      	ldrb	r0, [r4, #20]
   d5b46:	2101      	movs	r1, #1
}
   d5b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d5b4c:	f001 b83f 	b.w	d6bce <digitalWrite>

000d5b50 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d5b50:	6800      	ldr	r0, [r0, #0]
   d5b52:	f000 bde8 	b.w	d6726 <_ZN8SPIClass14endTransactionEv>

000d5b56 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d5b56:	21ff      	movs	r1, #255	; 0xff
   d5b58:	6800      	ldr	r0, [r0, #0]
   d5b5a:	f000 be6d 	b.w	d6838 <_ZN8SPIClass8transferEh>
	...

000d5b60 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d5b60:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5b62:	4b08      	ldr	r3, [pc, #32]	; (d5b84 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d5b64:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5b66:	2500      	movs	r5, #0
   d5b68:	4c07      	ldr	r4, [pc, #28]	; (d5b88 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5b6a:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5b6c:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5b6e:	4613      	mov	r3, r2
   d5b70:	460a      	mov	r2, r1
   d5b72:	4629      	mov	r1, r5
   d5b74:	f000 fe66 	bl	d6844 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d5b78:	7823      	ldrb	r3, [r4, #0]
   d5b7a:	2b00      	cmp	r3, #0
   d5b7c:	d0fc      	beq.n	d5b78 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d5b7e:	2000      	movs	r0, #0
   d5b80:	b003      	add	sp, #12
   d5b82:	bd30      	pop	{r4, r5, pc}
   d5b84:	000d5b1d 	.word	0x000d5b1d
   d5b88:	2003e47c 	.word	0x2003e47c

000d5b8c <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d5b8c:	6800      	ldr	r0, [r0, #0]
   d5b8e:	f000 be53 	b.w	d6838 <_ZN8SPIClass8transferEh>
	...

000d5b94 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d5b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5b96:	4b07      	ldr	r3, [pc, #28]	; (d5bb4 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d5b98:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5b9a:	2500      	movs	r5, #0
   d5b9c:	4c06      	ldr	r4, [pc, #24]	; (d5bb8 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5b9e:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5ba0:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5ba2:	4613      	mov	r3, r2
   d5ba4:	462a      	mov	r2, r5
   d5ba6:	f000 fe4d 	bl	d6844 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d5baa:	7823      	ldrb	r3, [r4, #0]
   d5bac:	2b00      	cmp	r3, #0
   d5bae:	d0fc      	beq.n	d5baa <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d5bb0:	b003      	add	sp, #12
   d5bb2:	bd30      	pop	{r4, r5, pc}
   d5bb4:	000d5b1d 	.word	0x000d5b1d
   d5bb8:	2003e47c 	.word	0x2003e47c

000d5bbc <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d5bbc:	f000 b85c 	b.w	d5c78 <HAL_Pin_Map>

000d5bc0 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d5bc0:	f000 b85a 	b.w	d5c78 <HAL_Pin_Map>

000d5bc4 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d5bc4:	f000 b858 	b.w	d5c78 <HAL_Pin_Map>

000d5bc8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5bc8:	b508      	push	{r3, lr}
   d5bca:	4b02      	ldr	r3, [pc, #8]	; (d5bd4 <os_thread_is_current+0xc>)
   d5bcc:	681b      	ldr	r3, [r3, #0]
   d5bce:	689b      	ldr	r3, [r3, #8]
   d5bd0:	9301      	str	r3, [sp, #4]
   d5bd2:	bd08      	pop	{r3, pc}
   d5bd4:	00030248 	.word	0x00030248

000d5bd8 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d5bd8:	b508      	push	{r3, lr}
   d5bda:	4b02      	ldr	r3, [pc, #8]	; (d5be4 <os_thread_yield+0xc>)
   d5bdc:	681b      	ldr	r3, [r3, #0]
   d5bde:	68db      	ldr	r3, [r3, #12]
   d5be0:	9301      	str	r3, [sp, #4]
   d5be2:	bd08      	pop	{r3, pc}
   d5be4:	00030248 	.word	0x00030248

000d5be8 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5be8:	b508      	push	{r3, lr}
   d5bea:	4b02      	ldr	r3, [pc, #8]	; (d5bf4 <os_thread_join+0xc>)
   d5bec:	681b      	ldr	r3, [r3, #0]
   d5bee:	691b      	ldr	r3, [r3, #16]
   d5bf0:	9301      	str	r3, [sp, #4]
   d5bf2:	bd08      	pop	{r3, pc}
   d5bf4:	00030248 	.word	0x00030248

000d5bf8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5bf8:	b508      	push	{r3, lr}
   d5bfa:	4b02      	ldr	r3, [pc, #8]	; (d5c04 <os_thread_cleanup+0xc>)
   d5bfc:	681b      	ldr	r3, [r3, #0]
   d5bfe:	695b      	ldr	r3, [r3, #20]
   d5c00:	9301      	str	r3, [sp, #4]
   d5c02:	bd08      	pop	{r3, pc}
   d5c04:	00030248 	.word	0x00030248

000d5c08 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5c08:	b508      	push	{r3, lr}
   d5c0a:	4b02      	ldr	r3, [pc, #8]	; (d5c14 <os_mutex_create+0xc>)
   d5c0c:	681b      	ldr	r3, [r3, #0]
   d5c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5c10:	9301      	str	r3, [sp, #4]
   d5c12:	bd08      	pop	{r3, pc}
   d5c14:	00030248 	.word	0x00030248

000d5c18 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d5c18:	b508      	push	{r3, lr}
   d5c1a:	4b02      	ldr	r3, [pc, #8]	; (d5c24 <os_mutex_lock+0xc>)
   d5c1c:	681b      	ldr	r3, [r3, #0]
   d5c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5c20:	9301      	str	r3, [sp, #4]
   d5c22:	bd08      	pop	{r3, pc}
   d5c24:	00030248 	.word	0x00030248

000d5c28 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d5c28:	b508      	push	{r3, lr}
   d5c2a:	4b02      	ldr	r3, [pc, #8]	; (d5c34 <os_mutex_unlock+0xc>)
   d5c2c:	681b      	ldr	r3, [r3, #0]
   d5c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5c30:	9301      	str	r3, [sp, #4]
   d5c32:	bd08      	pop	{r3, pc}
   d5c34:	00030248 	.word	0x00030248

000d5c38 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5c38:	b508      	push	{r3, lr}
   d5c3a:	4b02      	ldr	r3, [pc, #8]	; (d5c44 <os_mutex_recursive_create+0xc>)
   d5c3c:	681b      	ldr	r3, [r3, #0]
   d5c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5c40:	9301      	str	r3, [sp, #4]
   d5c42:	bd08      	pop	{r3, pc}
   d5c44:	00030248 	.word	0x00030248

000d5c48 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5c48:	b508      	push	{r3, lr}
   d5c4a:	4b02      	ldr	r3, [pc, #8]	; (d5c54 <HAL_RNG_GetRandomNumber+0xc>)
   d5c4c:	681b      	ldr	r3, [r3, #0]
   d5c4e:	685b      	ldr	r3, [r3, #4]
   d5c50:	9301      	str	r3, [sp, #4]
   d5c52:	bd08      	pop	{r3, pc}
   d5c54:	00030218 	.word	0x00030218

000d5c58 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d5c58:	b508      	push	{r3, lr}
   d5c5a:	4b02      	ldr	r3, [pc, #8]	; (d5c64 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d5c5c:	681b      	ldr	r3, [r3, #0]
   d5c5e:	691b      	ldr	r3, [r3, #16]
   d5c60:	9301      	str	r3, [sp, #4]
   d5c62:	bd08      	pop	{r3, pc}
   d5c64:	00030218 	.word	0x00030218

000d5c68 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5c68:	b508      	push	{r3, lr}
   d5c6a:	4b02      	ldr	r3, [pc, #8]	; (d5c74 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5c6c:	681b      	ldr	r3, [r3, #0]
   d5c6e:	695b      	ldr	r3, [r3, #20]
   d5c70:	9301      	str	r3, [sp, #4]
   d5c72:	bd08      	pop	{r3, pc}
   d5c74:	00030218 	.word	0x00030218

000d5c78 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d5c78:	b508      	push	{r3, lr}
   d5c7a:	4b02      	ldr	r3, [pc, #8]	; (d5c84 <HAL_Pin_Map+0xc>)
   d5c7c:	681b      	ldr	r3, [r3, #0]
   d5c7e:	681b      	ldr	r3, [r3, #0]
   d5c80:	9301      	str	r3, [sp, #4]
   d5c82:	bd08      	pop	{r3, pc}
   d5c84:	0003022c 	.word	0x0003022c

000d5c88 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5c88:	b508      	push	{r3, lr}
   d5c8a:	4b02      	ldr	r3, [pc, #8]	; (d5c94 <HAL_Validate_Pin_Function+0xc>)
   d5c8c:	681b      	ldr	r3, [r3, #0]
   d5c8e:	685b      	ldr	r3, [r3, #4]
   d5c90:	9301      	str	r3, [sp, #4]
   d5c92:	bd08      	pop	{r3, pc}
   d5c94:	0003022c 	.word	0x0003022c

000d5c98 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5c98:	b508      	push	{r3, lr}
   d5c9a:	4b02      	ldr	r3, [pc, #8]	; (d5ca4 <HAL_Pin_Mode+0xc>)
   d5c9c:	681b      	ldr	r3, [r3, #0]
   d5c9e:	689b      	ldr	r3, [r3, #8]
   d5ca0:	9301      	str	r3, [sp, #4]
   d5ca2:	bd08      	pop	{r3, pc}
   d5ca4:	0003022c 	.word	0x0003022c

000d5ca8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5ca8:	b508      	push	{r3, lr}
   d5caa:	4b02      	ldr	r3, [pc, #8]	; (d5cb4 <HAL_Get_Pin_Mode+0xc>)
   d5cac:	681b      	ldr	r3, [r3, #0]
   d5cae:	68db      	ldr	r3, [r3, #12]
   d5cb0:	9301      	str	r3, [sp, #4]
   d5cb2:	bd08      	pop	{r3, pc}
   d5cb4:	0003022c 	.word	0x0003022c

000d5cb8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5cb8:	b508      	push	{r3, lr}
   d5cba:	4b02      	ldr	r3, [pc, #8]	; (d5cc4 <HAL_GPIO_Write+0xc>)
   d5cbc:	681b      	ldr	r3, [r3, #0]
   d5cbe:	691b      	ldr	r3, [r3, #16]
   d5cc0:	9301      	str	r3, [sp, #4]
   d5cc2:	bd08      	pop	{r3, pc}
   d5cc4:	0003022c 	.word	0x0003022c

000d5cc8 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5cc8:	b508      	push	{r3, lr}
   d5cca:	4b02      	ldr	r3, [pc, #8]	; (d5cd4 <HAL_ADC_Read+0xc>)
   d5ccc:	681b      	ldr	r3, [r3, #0]
   d5cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5cd0:	9301      	str	r3, [sp, #4]
   d5cd2:	bd08      	pop	{r3, pc}
   d5cd4:	0003022c 	.word	0x0003022c

000d5cd8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5cd8:	b508      	push	{r3, lr}
   d5cda:	4b02      	ldr	r3, [pc, #8]	; (d5ce4 <HAL_I2C_Write_Data+0xc>)
   d5cdc:	681b      	ldr	r3, [r3, #0]
   d5cde:	6a1b      	ldr	r3, [r3, #32]
   d5ce0:	9301      	str	r3, [sp, #4]
   d5ce2:	bd08      	pop	{r3, pc}
   d5ce4:	00030228 	.word	0x00030228

000d5ce8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5ce8:	b508      	push	{r3, lr}
   d5cea:	4b02      	ldr	r3, [pc, #8]	; (d5cf4 <HAL_I2C_Available_Data+0xc>)
   d5cec:	681b      	ldr	r3, [r3, #0]
   d5cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5cf0:	9301      	str	r3, [sp, #4]
   d5cf2:	bd08      	pop	{r3, pc}
   d5cf4:	00030228 	.word	0x00030228

000d5cf8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5cf8:	b508      	push	{r3, lr}
   d5cfa:	4b02      	ldr	r3, [pc, #8]	; (d5d04 <HAL_I2C_Read_Data+0xc>)
   d5cfc:	681b      	ldr	r3, [r3, #0]
   d5cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5d00:	9301      	str	r3, [sp, #4]
   d5d02:	bd08      	pop	{r3, pc}
   d5d04:	00030228 	.word	0x00030228

000d5d08 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5d08:	b508      	push	{r3, lr}
   d5d0a:	4b02      	ldr	r3, [pc, #8]	; (d5d14 <HAL_I2C_Peek_Data+0xc>)
   d5d0c:	681b      	ldr	r3, [r3, #0]
   d5d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5d10:	9301      	str	r3, [sp, #4]
   d5d12:	bd08      	pop	{r3, pc}
   d5d14:	00030228 	.word	0x00030228

000d5d18 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5d18:	b508      	push	{r3, lr}
   d5d1a:	4b02      	ldr	r3, [pc, #8]	; (d5d24 <HAL_I2C_Flush_Data+0xc>)
   d5d1c:	681b      	ldr	r3, [r3, #0]
   d5d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5d20:	9301      	str	r3, [sp, #4]
   d5d22:	bd08      	pop	{r3, pc}
   d5d24:	00030228 	.word	0x00030228

000d5d28 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5d28:	b508      	push	{r3, lr}
   d5d2a:	4b02      	ldr	r3, [pc, #8]	; (d5d34 <HAL_I2C_Is_Enabled+0xc>)
   d5d2c:	681b      	ldr	r3, [r3, #0]
   d5d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5d30:	9301      	str	r3, [sp, #4]
   d5d32:	bd08      	pop	{r3, pc}
   d5d34:	00030228 	.word	0x00030228

000d5d38 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d5d38:	b508      	push	{r3, lr}
   d5d3a:	4b02      	ldr	r3, [pc, #8]	; (d5d44 <HAL_I2C_Init+0xc>)
   d5d3c:	681b      	ldr	r3, [r3, #0]
   d5d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5d40:	9301      	str	r3, [sp, #4]
   d5d42:	bd08      	pop	{r3, pc}
   d5d44:	00030228 	.word	0x00030228

000d5d48 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5d48:	b508      	push	{r3, lr}
   d5d4a:	4b02      	ldr	r3, [pc, #8]	; (d5d54 <inet_inet_ntop+0xc>)
   d5d4c:	681b      	ldr	r3, [r3, #0]
   d5d4e:	695b      	ldr	r3, [r3, #20]
   d5d50:	9301      	str	r3, [sp, #4]
   d5d52:	bd08      	pop	{r3, pc}
   d5d54:	00030264 	.word	0x00030264

000d5d58 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5d58:	b508      	push	{r3, lr}
   d5d5a:	4b02      	ldr	r3, [pc, #8]	; (d5d64 <netdb_freeaddrinfo+0xc>)
   d5d5c:	681b      	ldr	r3, [r3, #0]
   d5d5e:	689b      	ldr	r3, [r3, #8]
   d5d60:	9301      	str	r3, [sp, #4]
   d5d62:	bd08      	pop	{r3, pc}
   d5d64:	00030268 	.word	0x00030268

000d5d68 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5d68:	b508      	push	{r3, lr}
   d5d6a:	4b02      	ldr	r3, [pc, #8]	; (d5d74 <netdb_getaddrinfo+0xc>)
   d5d6c:	681b      	ldr	r3, [r3, #0]
   d5d6e:	68db      	ldr	r3, [r3, #12]
   d5d70:	9301      	str	r3, [sp, #4]
   d5d72:	bd08      	pop	{r3, pc}
   d5d74:	00030268 	.word	0x00030268

000d5d78 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5d78:	b508      	push	{r3, lr}
   d5d7a:	4b02      	ldr	r3, [pc, #8]	; (d5d84 <HAL_SPI_Begin+0xc>)
   d5d7c:	681b      	ldr	r3, [r3, #0]
   d5d7e:	681b      	ldr	r3, [r3, #0]
   d5d80:	9301      	str	r3, [sp, #4]
   d5d82:	bd08      	pop	{r3, pc}
   d5d84:	00030230 	.word	0x00030230

000d5d88 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5d88:	b508      	push	{r3, lr}
   d5d8a:	4b02      	ldr	r3, [pc, #8]	; (d5d94 <HAL_SPI_Send_Receive_Data+0xc>)
   d5d8c:	681b      	ldr	r3, [r3, #0]
   d5d8e:	695b      	ldr	r3, [r3, #20]
   d5d90:	9301      	str	r3, [sp, #4]
   d5d92:	bd08      	pop	{r3, pc}
   d5d94:	00030230 	.word	0x00030230

000d5d98 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5d98:	b508      	push	{r3, lr}
   d5d9a:	4b02      	ldr	r3, [pc, #8]	; (d5da4 <HAL_SPI_Init+0xc>)
   d5d9c:	681b      	ldr	r3, [r3, #0]
   d5d9e:	69db      	ldr	r3, [r3, #28]
   d5da0:	9301      	str	r3, [sp, #4]
   d5da2:	bd08      	pop	{r3, pc}
   d5da4:	00030230 	.word	0x00030230

000d5da8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5da8:	b508      	push	{r3, lr}
   d5daa:	4b02      	ldr	r3, [pc, #8]	; (d5db4 <HAL_SPI_Is_Enabled+0xc>)
   d5dac:	681b      	ldr	r3, [r3, #0]
   d5dae:	6a1b      	ldr	r3, [r3, #32]
   d5db0:	9301      	str	r3, [sp, #4]
   d5db2:	bd08      	pop	{r3, pc}
   d5db4:	00030230 	.word	0x00030230

000d5db8 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5db8:	b508      	push	{r3, lr}
   d5dba:	4b02      	ldr	r3, [pc, #8]	; (d5dc4 <HAL_SPI_Info+0xc>)
   d5dbc:	681b      	ldr	r3, [r3, #0]
   d5dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5dc0:	9301      	str	r3, [sp, #4]
   d5dc2:	bd08      	pop	{r3, pc}
   d5dc4:	00030230 	.word	0x00030230

000d5dc8 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d5dc8:	b508      	push	{r3, lr}
   d5dca:	4b02      	ldr	r3, [pc, #8]	; (d5dd4 <HAL_SPI_DMA_Transfer+0xc>)
   d5dcc:	681b      	ldr	r3, [r3, #0]
   d5dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5dd0:	9301      	str	r3, [sp, #4]
   d5dd2:	bd08      	pop	{r3, pc}
   d5dd4:	00030230 	.word	0x00030230

000d5dd8 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d5dd8:	b508      	push	{r3, lr}
   d5dda:	4b02      	ldr	r3, [pc, #8]	; (d5de4 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d5ddc:	681b      	ldr	r3, [r3, #0]
   d5dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5de0:	9301      	str	r3, [sp, #4]
   d5de2:	bd08      	pop	{r3, pc}
   d5de4:	00030230 	.word	0x00030230

000d5de8 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5de8:	b508      	push	{r3, lr}
   d5dea:	4b02      	ldr	r3, [pc, #8]	; (d5df4 <HAL_SPI_Set_Settings+0xc>)
   d5dec:	681b      	ldr	r3, [r3, #0]
   d5dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5df0:	9301      	str	r3, [sp, #4]
   d5df2:	bd08      	pop	{r3, pc}
   d5df4:	00030230 	.word	0x00030230

000d5df8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5df8:	b508      	push	{r3, lr}
   d5dfa:	4b02      	ldr	r3, [pc, #8]	; (d5e04 <HAL_USART_Init+0xc>)
   d5dfc:	681b      	ldr	r3, [r3, #0]
   d5dfe:	681b      	ldr	r3, [r3, #0]
   d5e00:	9301      	str	r3, [sp, #4]
   d5e02:	bd08      	pop	{r3, pc}
   d5e04:	0003023c 	.word	0x0003023c

000d5e08 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5e08:	b508      	push	{r3, lr}
   d5e0a:	4b02      	ldr	r3, [pc, #8]	; (d5e14 <HAL_USART_Write_Data+0xc>)
   d5e0c:	681b      	ldr	r3, [r3, #0]
   d5e0e:	68db      	ldr	r3, [r3, #12]
   d5e10:	9301      	str	r3, [sp, #4]
   d5e12:	bd08      	pop	{r3, pc}
   d5e14:	0003023c 	.word	0x0003023c

000d5e18 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5e18:	b508      	push	{r3, lr}
   d5e1a:	4b02      	ldr	r3, [pc, #8]	; (d5e24 <HAL_USART_Available_Data+0xc>)
   d5e1c:	681b      	ldr	r3, [r3, #0]
   d5e1e:	691b      	ldr	r3, [r3, #16]
   d5e20:	9301      	str	r3, [sp, #4]
   d5e22:	bd08      	pop	{r3, pc}
   d5e24:	0003023c 	.word	0x0003023c

000d5e28 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5e28:	b508      	push	{r3, lr}
   d5e2a:	4b02      	ldr	r3, [pc, #8]	; (d5e34 <HAL_USART_Read_Data+0xc>)
   d5e2c:	681b      	ldr	r3, [r3, #0]
   d5e2e:	695b      	ldr	r3, [r3, #20]
   d5e30:	9301      	str	r3, [sp, #4]
   d5e32:	bd08      	pop	{r3, pc}
   d5e34:	0003023c 	.word	0x0003023c

000d5e38 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5e38:	b508      	push	{r3, lr}
   d5e3a:	4b02      	ldr	r3, [pc, #8]	; (d5e44 <HAL_USART_Peek_Data+0xc>)
   d5e3c:	681b      	ldr	r3, [r3, #0]
   d5e3e:	699b      	ldr	r3, [r3, #24]
   d5e40:	9301      	str	r3, [sp, #4]
   d5e42:	bd08      	pop	{r3, pc}
   d5e44:	0003023c 	.word	0x0003023c

000d5e48 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5e48:	b508      	push	{r3, lr}
   d5e4a:	4b02      	ldr	r3, [pc, #8]	; (d5e54 <HAL_USART_Flush_Data+0xc>)
   d5e4c:	681b      	ldr	r3, [r3, #0]
   d5e4e:	69db      	ldr	r3, [r3, #28]
   d5e50:	9301      	str	r3, [sp, #4]
   d5e52:	bd08      	pop	{r3, pc}
   d5e54:	0003023c 	.word	0x0003023c

000d5e58 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5e58:	b508      	push	{r3, lr}
   d5e5a:	4b02      	ldr	r3, [pc, #8]	; (d5e64 <HAL_USART_Is_Enabled+0xc>)
   d5e5c:	681b      	ldr	r3, [r3, #0]
   d5e5e:	6a1b      	ldr	r3, [r3, #32]
   d5e60:	9301      	str	r3, [sp, #4]
   d5e62:	bd08      	pop	{r3, pc}
   d5e64:	0003023c 	.word	0x0003023c

000d5e68 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5e68:	b508      	push	{r3, lr}
   d5e6a:	4b02      	ldr	r3, [pc, #8]	; (d5e74 <HAL_USART_Available_Data_For_Write+0xc>)
   d5e6c:	681b      	ldr	r3, [r3, #0]
   d5e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5e70:	9301      	str	r3, [sp, #4]
   d5e72:	bd08      	pop	{r3, pc}
   d5e74:	0003023c 	.word	0x0003023c

000d5e78 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5e78:	b508      	push	{r3, lr}
   d5e7a:	4b02      	ldr	r3, [pc, #8]	; (d5e84 <HAL_USB_USART_Init+0xc>)
   d5e7c:	681b      	ldr	r3, [r3, #0]
   d5e7e:	681b      	ldr	r3, [r3, #0]
   d5e80:	9301      	str	r3, [sp, #4]
   d5e82:	bd08      	pop	{r3, pc}
   d5e84:	0003024c 	.word	0x0003024c

000d5e88 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5e88:	b508      	push	{r3, lr}
   d5e8a:	4b02      	ldr	r3, [pc, #8]	; (d5e94 <HAL_USB_USART_Begin+0xc>)
   d5e8c:	681b      	ldr	r3, [r3, #0]
   d5e8e:	685b      	ldr	r3, [r3, #4]
   d5e90:	9301      	str	r3, [sp, #4]
   d5e92:	bd08      	pop	{r3, pc}
   d5e94:	0003024c 	.word	0x0003024c

000d5e98 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5e98:	b508      	push	{r3, lr}
   d5e9a:	4b02      	ldr	r3, [pc, #8]	; (d5ea4 <HAL_USB_USART_Available_Data+0xc>)
   d5e9c:	681b      	ldr	r3, [r3, #0]
   d5e9e:	691b      	ldr	r3, [r3, #16]
   d5ea0:	9301      	str	r3, [sp, #4]
   d5ea2:	bd08      	pop	{r3, pc}
   d5ea4:	0003024c 	.word	0x0003024c

000d5ea8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5ea8:	b508      	push	{r3, lr}
   d5eaa:	4b02      	ldr	r3, [pc, #8]	; (d5eb4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5eac:	681b      	ldr	r3, [r3, #0]
   d5eae:	695b      	ldr	r3, [r3, #20]
   d5eb0:	9301      	str	r3, [sp, #4]
   d5eb2:	bd08      	pop	{r3, pc}
   d5eb4:	0003024c 	.word	0x0003024c

000d5eb8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5eb8:	b508      	push	{r3, lr}
   d5eba:	4b02      	ldr	r3, [pc, #8]	; (d5ec4 <HAL_USB_USART_Receive_Data+0xc>)
   d5ebc:	681b      	ldr	r3, [r3, #0]
   d5ebe:	699b      	ldr	r3, [r3, #24]
   d5ec0:	9301      	str	r3, [sp, #4]
   d5ec2:	bd08      	pop	{r3, pc}
   d5ec4:	0003024c 	.word	0x0003024c

000d5ec8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5ec8:	b508      	push	{r3, lr}
   d5eca:	4b02      	ldr	r3, [pc, #8]	; (d5ed4 <HAL_USB_USART_Send_Data+0xc>)
   d5ecc:	681b      	ldr	r3, [r3, #0]
   d5ece:	69db      	ldr	r3, [r3, #28]
   d5ed0:	9301      	str	r3, [sp, #4]
   d5ed2:	bd08      	pop	{r3, pc}
   d5ed4:	0003024c 	.word	0x0003024c

000d5ed8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5ed8:	b508      	push	{r3, lr}
   d5eda:	4b02      	ldr	r3, [pc, #8]	; (d5ee4 <HAL_USB_USART_Flush_Data+0xc>)
   d5edc:	681b      	ldr	r3, [r3, #0]
   d5ede:	6a1b      	ldr	r3, [r3, #32]
   d5ee0:	9301      	str	r3, [sp, #4]
   d5ee2:	bd08      	pop	{r3, pc}
   d5ee4:	0003024c 	.word	0x0003024c

000d5ee8 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d5ee8:	b508      	push	{r3, lr}
   d5eea:	4b02      	ldr	r3, [pc, #8]	; (d5ef4 <HAL_USB_USART_Is_Enabled+0xc>)
   d5eec:	681b      	ldr	r3, [r3, #0]
   d5eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5ef0:	9301      	str	r3, [sp, #4]
   d5ef2:	bd08      	pop	{r3, pc}
   d5ef4:	0003024c 	.word	0x0003024c

000d5ef8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5ef8:	b508      	push	{r3, lr}
   d5efa:	4b02      	ldr	r3, [pc, #8]	; (d5f04 <set_system_mode+0xc>)
   d5efc:	681b      	ldr	r3, [r3, #0]
   d5efe:	685b      	ldr	r3, [r3, #4]
   d5f00:	9301      	str	r3, [sp, #4]
   d5f02:	bd08      	pop	{r3, pc}
   d5f04:	00030220 	.word	0x00030220

000d5f08 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5f08:	b508      	push	{r3, lr}
   d5f0a:	4b02      	ldr	r3, [pc, #8]	; (d5f14 <system_delay_ms+0xc>)
   d5f0c:	681b      	ldr	r3, [r3, #0]
   d5f0e:	695b      	ldr	r3, [r3, #20]
   d5f10:	9301      	str	r3, [sp, #4]
   d5f12:	bd08      	pop	{r3, pc}
   d5f14:	00030220 	.word	0x00030220

000d5f18 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5f18:	b508      	push	{r3, lr}
   d5f1a:	4b03      	ldr	r3, [pc, #12]	; (d5f28 <system_ctrl_set_app_request_handler+0x10>)
   d5f1c:	681b      	ldr	r3, [r3, #0]
   d5f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5f22:	9301      	str	r3, [sp, #4]
   d5f24:	bd08      	pop	{r3, pc}
   d5f26:	0000      	.short	0x0000
   d5f28:	00030220 	.word	0x00030220

000d5f2c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5f2c:	b508      	push	{r3, lr}
   d5f2e:	4b03      	ldr	r3, [pc, #12]	; (d5f3c <system_ctrl_set_result+0x10>)
   d5f30:	681b      	ldr	r3, [r3, #0]
   d5f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5f36:	9301      	str	r3, [sp, #4]
   d5f38:	bd08      	pop	{r3, pc}
   d5f3a:	0000      	.short	0x0000
   d5f3c:	00030220 	.word	0x00030220

000d5f40 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5f40:	b508      	push	{r3, lr}
   d5f42:	4b02      	ldr	r3, [pc, #8]	; (d5f4c <spark_process+0xc>)
   d5f44:	681b      	ldr	r3, [r3, #0]
   d5f46:	689b      	ldr	r3, [r3, #8]
   d5f48:	9301      	str	r3, [sp, #4]
   d5f4a:	bd08      	pop	{r3, pc}
   d5f4c:	00030244 	.word	0x00030244

000d5f50 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5f50:	b508      	push	{r3, lr}
   d5f52:	4b02      	ldr	r3, [pc, #8]	; (d5f5c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5f54:	681b      	ldr	r3, [r3, #0]
   d5f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5f58:	9301      	str	r3, [sp, #4]
   d5f5a:	bd08      	pop	{r3, pc}
   d5f5c:	00030244 	.word	0x00030244

000d5f60 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5f60:	b508      	push	{r3, lr}
   d5f62:	4b02      	ldr	r3, [pc, #8]	; (d5f6c <network_connect+0xc>)
   d5f64:	681b      	ldr	r3, [r3, #0]
   d5f66:	685b      	ldr	r3, [r3, #4]
   d5f68:	9301      	str	r3, [sp, #4]
   d5f6a:	bd08      	pop	{r3, pc}
   d5f6c:	00030240 	.word	0x00030240

000d5f70 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5f70:	b508      	push	{r3, lr}
   d5f72:	4b02      	ldr	r3, [pc, #8]	; (d5f7c <network_connecting+0xc>)
   d5f74:	681b      	ldr	r3, [r3, #0]
   d5f76:	689b      	ldr	r3, [r3, #8]
   d5f78:	9301      	str	r3, [sp, #4]
   d5f7a:	bd08      	pop	{r3, pc}
   d5f7c:	00030240 	.word	0x00030240

000d5f80 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5f80:	b508      	push	{r3, lr}
   d5f82:	4b02      	ldr	r3, [pc, #8]	; (d5f8c <network_disconnect+0xc>)
   d5f84:	681b      	ldr	r3, [r3, #0]
   d5f86:	68db      	ldr	r3, [r3, #12]
   d5f88:	9301      	str	r3, [sp, #4]
   d5f8a:	bd08      	pop	{r3, pc}
   d5f8c:	00030240 	.word	0x00030240

000d5f90 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5f90:	b508      	push	{r3, lr}
   d5f92:	4b02      	ldr	r3, [pc, #8]	; (d5f9c <network_ready+0xc>)
   d5f94:	681b      	ldr	r3, [r3, #0]
   d5f96:	691b      	ldr	r3, [r3, #16]
   d5f98:	9301      	str	r3, [sp, #4]
   d5f9a:	bd08      	pop	{r3, pc}
   d5f9c:	00030240 	.word	0x00030240

000d5fa0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5fa0:	b508      	push	{r3, lr}
   d5fa2:	4b02      	ldr	r3, [pc, #8]	; (d5fac <network_on+0xc>)
   d5fa4:	681b      	ldr	r3, [r3, #0]
   d5fa6:	695b      	ldr	r3, [r3, #20]
   d5fa8:	9301      	str	r3, [sp, #4]
   d5faa:	bd08      	pop	{r3, pc}
   d5fac:	00030240 	.word	0x00030240

000d5fb0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5fb0:	b508      	push	{r3, lr}
   d5fb2:	4b02      	ldr	r3, [pc, #8]	; (d5fbc <network_off+0xc>)
   d5fb4:	681b      	ldr	r3, [r3, #0]
   d5fb6:	699b      	ldr	r3, [r3, #24]
   d5fb8:	9301      	str	r3, [sp, #4]
   d5fba:	bd08      	pop	{r3, pc}
   d5fbc:	00030240 	.word	0x00030240

000d5fc0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5fc0:	b508      	push	{r3, lr}
   d5fc2:	4b02      	ldr	r3, [pc, #8]	; (d5fcc <network_listen+0xc>)
   d5fc4:	681b      	ldr	r3, [r3, #0]
   d5fc6:	69db      	ldr	r3, [r3, #28]
   d5fc8:	9301      	str	r3, [sp, #4]
   d5fca:	bd08      	pop	{r3, pc}
   d5fcc:	00030240 	.word	0x00030240

000d5fd0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5fd0:	b508      	push	{r3, lr}
   d5fd2:	4b02      	ldr	r3, [pc, #8]	; (d5fdc <network_listening+0xc>)
   d5fd4:	681b      	ldr	r3, [r3, #0]
   d5fd6:	6a1b      	ldr	r3, [r3, #32]
   d5fd8:	9301      	str	r3, [sp, #4]
   d5fda:	bd08      	pop	{r3, pc}
   d5fdc:	00030240 	.word	0x00030240

000d5fe0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5fe0:	b508      	push	{r3, lr}
   d5fe2:	4b02      	ldr	r3, [pc, #8]	; (d5fec <network_set_listen_timeout+0xc>)
   d5fe4:	681b      	ldr	r3, [r3, #0]
   d5fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5fe8:	9301      	str	r3, [sp, #4]
   d5fea:	bd08      	pop	{r3, pc}
   d5fec:	00030240 	.word	0x00030240

000d5ff0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5ff0:	b508      	push	{r3, lr}
   d5ff2:	4b02      	ldr	r3, [pc, #8]	; (d5ffc <network_get_listen_timeout+0xc>)
   d5ff4:	681b      	ldr	r3, [r3, #0]
   d5ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5ff8:	9301      	str	r3, [sp, #4]
   d5ffa:	bd08      	pop	{r3, pc}
   d5ffc:	00030240 	.word	0x00030240

000d6000 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6000:	b508      	push	{r3, lr}
   d6002:	4b02      	ldr	r3, [pc, #8]	; (d600c <malloc+0xc>)
   d6004:	681b      	ldr	r3, [r3, #0]
   d6006:	681b      	ldr	r3, [r3, #0]
   d6008:	9301      	str	r3, [sp, #4]
   d600a:	bd08      	pop	{r3, pc}
   d600c:	0003021c 	.word	0x0003021c

000d6010 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6010:	b508      	push	{r3, lr}
   d6012:	4b02      	ldr	r3, [pc, #8]	; (d601c <free+0xc>)
   d6014:	681b      	ldr	r3, [r3, #0]
   d6016:	685b      	ldr	r3, [r3, #4]
   d6018:	9301      	str	r3, [sp, #4]
   d601a:	bd08      	pop	{r3, pc}
   d601c:	0003021c 	.word	0x0003021c

000d6020 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6020:	b508      	push	{r3, lr}
   d6022:	4b02      	ldr	r3, [pc, #8]	; (d602c <vsnprintf+0xc>)
   d6024:	681b      	ldr	r3, [r3, #0]
   d6026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6028:	9301      	str	r3, [sp, #4]
   d602a:	bd08      	pop	{r3, pc}
   d602c:	0003021c 	.word	0x0003021c

000d6030 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6030:	2100      	movs	r1, #0
   d6032:	f7ff bf69 	b.w	d5f08 <system_delay_ms>

000d6036 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d6036:	2200      	movs	r2, #0
   d6038:	4611      	mov	r1, r2
   d603a:	6840      	ldr	r0, [r0, #4]
   d603c:	f7ff bfa8 	b.w	d5f90 <network_ready>

000d6040 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6040:	2200      	movs	r2, #0
   d6042:	4611      	mov	r1, r2
   d6044:	6840      	ldr	r0, [r0, #4]
   d6046:	f7ff bfc3 	b.w	d5fd0 <network_listening>

000d604a <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d604a:	2200      	movs	r2, #0
   d604c:	4611      	mov	r1, r2
   d604e:	6840      	ldr	r0, [r0, #4]
   d6050:	f7ff bfce 	b.w	d5ff0 <network_get_listen_timeout>

000d6054 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6054:	2200      	movs	r2, #0
   d6056:	6840      	ldr	r0, [r0, #4]
   d6058:	f7ff bfc2 	b.w	d5fe0 <network_set_listen_timeout>

000d605c <_ZN5spark13CellularClass6listenEb>:
    void clearCredentials() {
        cellular_credentials_clear(nullptr);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d605c:	2200      	movs	r2, #0
   d605e:	f081 0101 	eor.w	r1, r1, #1
   d6062:	6840      	ldr	r0, [r0, #4]
   d6064:	f7ff bfac 	b.w	d5fc0 <network_listen>

000d6068 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d6068:	2300      	movs	r3, #0
   d606a:	461a      	mov	r2, r3
   d606c:	4619      	mov	r1, r3
   d606e:	6840      	ldr	r0, [r0, #4]
   d6070:	f7ff bf9e 	b.w	d5fb0 <network_off>

000d6074 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d6074:	2300      	movs	r3, #0
   d6076:	461a      	mov	r2, r3
   d6078:	4619      	mov	r1, r3
   d607a:	6840      	ldr	r0, [r0, #4]
   d607c:	f7ff bf90 	b.w	d5fa0 <network_on>

000d6080 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6080:	2200      	movs	r2, #0
   d6082:	4611      	mov	r1, r2
   d6084:	6840      	ldr	r0, [r0, #4]
   d6086:	f7ff bf73 	b.w	d5f70 <network_connecting>

000d608a <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d608a:	2200      	movs	r2, #0
   d608c:	2102      	movs	r1, #2
   d608e:	6840      	ldr	r0, [r0, #4]
   d6090:	f7ff bf76 	b.w	d5f80 <network_disconnect>

000d6094 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6094:	2300      	movs	r3, #0
   d6096:	461a      	mov	r2, r3
   d6098:	6840      	ldr	r0, [r0, #4]
   d609a:	f7ff bf61 	b.w	d5f60 <network_connect>
	...

000d60a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d60a0:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d60a2:	4d0c      	ldr	r5, [pc, #48]	; (d60d4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
   d60a4:	2428      	movs	r4, #40	; 0x28
   d60a6:	4622      	mov	r2, r4
   d60a8:	2100      	movs	r1, #0
   d60aa:	4628      	mov	r0, r5
   d60ac:	f000 ff78 	bl	d6fa0 <memset>
        cid = -1;
   d60b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d60b4:	606b      	str	r3, [r5, #4]
        size = sizeof(*this);
   d60b6:	802c      	strh	r4, [r5, #0]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d60b8:	4d07      	ldr	r5, [pc, #28]	; (d60d8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
   d60ba:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d60bc:	4628      	mov	r0, r5
   d60be:	606b      	str	r3, [r5, #4]
   d60c0:	4b06      	ldr	r3, [pc, #24]	; (d60dc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
   d60c2:	f840 3b08 	str.w	r3, [r0], #8
    char iccid[21];
    char imei[16];

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
   d60c6:	4622      	mov	r2, r4
   d60c8:	2100      	movs	r1, #0
   d60ca:	f000 ff69 	bl	d6fa0 <memset>
        size = sizeof(*this);
   d60ce:	812c      	strh	r4, [r5, #8]
   d60d0:	bd38      	pop	{r3, r4, r5, pc}
   d60d2:	bf00      	nop
   d60d4:	2003e4b0 	.word	0x2003e4b0
   d60d8:	2003e480 	.word	0x2003e480
   d60dc:	000d71f4 	.word	0x000d71f4

000d60e0 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d60e0:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d60e2:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d60e4:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d60e6:	b113      	cbz	r3, d60ee <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d60e8:	2203      	movs	r2, #3
   d60ea:	4601      	mov	r1, r0
   d60ec:	4798      	blx	r3
    }
   d60ee:	4620      	mov	r0, r4
   d60f0:	bd10      	pop	{r4, pc}

000d60f2 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d60f2:	2200      	movs	r2, #0
   d60f4:	4611      	mov	r1, r2
   d60f6:	6840      	ldr	r0, [r0, #4]
   d60f8:	f7ff bf6a 	b.w	d5fd0 <network_listening>

000d60fc <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d60fc:	2200      	movs	r2, #0
   d60fe:	4611      	mov	r1, r2
   d6100:	6840      	ldr	r0, [r0, #4]
   d6102:	f7ff bf75 	b.w	d5ff0 <network_get_listen_timeout>

000d6106 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6106:	2200      	movs	r2, #0
   d6108:	6840      	ldr	r0, [r0, #4]
   d610a:	f7ff bf69 	b.w	d5fe0 <network_set_listen_timeout>

000d610e <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d610e:	2200      	movs	r2, #0
   d6110:	f081 0101 	eor.w	r1, r1, #1
   d6114:	6840      	ldr	r0, [r0, #4]
   d6116:	f7ff bf53 	b.w	d5fc0 <network_listen>

000d611a <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d611a:	2300      	movs	r3, #0
   d611c:	461a      	mov	r2, r3
   d611e:	4619      	mov	r1, r3
   d6120:	6840      	ldr	r0, [r0, #4]
   d6122:	f7ff bf45 	b.w	d5fb0 <network_off>

000d6126 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6126:	2300      	movs	r3, #0
   d6128:	461a      	mov	r2, r3
   d612a:	4619      	mov	r1, r3
   d612c:	6840      	ldr	r0, [r0, #4]
   d612e:	f7ff bf37 	b.w	d5fa0 <network_on>

000d6132 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6132:	2200      	movs	r2, #0
   d6134:	4611      	mov	r1, r2
   d6136:	6840      	ldr	r0, [r0, #4]
   d6138:	f7ff bf2a 	b.w	d5f90 <network_ready>

000d613c <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d613c:	2200      	movs	r2, #0
   d613e:	4611      	mov	r1, r2
   d6140:	6840      	ldr	r0, [r0, #4]
   d6142:	f7ff bf15 	b.w	d5f70 <network_connecting>

000d6146 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6146:	2200      	movs	r2, #0
   d6148:	2102      	movs	r1, #2
   d614a:	6840      	ldr	r0, [r0, #4]
   d614c:	f7ff bf18 	b.w	d5f80 <network_disconnect>

000d6150 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6150:	2300      	movs	r3, #0
   d6152:	461a      	mov	r2, r3
   d6154:	6840      	ldr	r0, [r0, #4]
   d6156:	f7ff bf03 	b.w	d5f60 <network_connect>
	...

000d615c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d615c:	4b02      	ldr	r3, [pc, #8]	; (d6168 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d615e:	2203      	movs	r2, #3
   d6160:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6162:	4a02      	ldr	r2, [pc, #8]	; (d616c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6164:	601a      	str	r2, [r3, #0]
   d6166:	4770      	bx	lr
   d6168:	2003e4d8 	.word	0x2003e4d8
   d616c:	000d7228 	.word	0x000d7228

000d6170 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d6170:	4770      	bx	lr

000d6172 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6174:	4606      	mov	r6, r0
   d6176:	4615      	mov	r5, r2
   d6178:	460c      	mov	r4, r1
   d617a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d617c:	42bc      	cmp	r4, r7
   d617e:	d006      	beq.n	d618e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6180:	6833      	ldr	r3, [r6, #0]
   d6182:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6186:	689b      	ldr	r3, [r3, #8]
   d6188:	4630      	mov	r0, r6
   d618a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d618c:	e7f6      	b.n	d617c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d618e:	4628      	mov	r0, r5
   d6190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6192 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6192:	2200      	movs	r2, #0
   d6194:	7c00      	ldrb	r0, [r0, #16]
   d6196:	f7ff bd9f 	b.w	d5cd8 <HAL_I2C_Write_Data>

000d619a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d619a:	2100      	movs	r1, #0
   d619c:	7c00      	ldrb	r0, [r0, #16]
   d619e:	f7ff bda3 	b.w	d5ce8 <HAL_I2C_Available_Data>

000d61a2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d61a2:	2100      	movs	r1, #0
   d61a4:	7c00      	ldrb	r0, [r0, #16]
   d61a6:	f7ff bda7 	b.w	d5cf8 <HAL_I2C_Read_Data>

000d61aa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d61aa:	2100      	movs	r1, #0
   d61ac:	7c00      	ldrb	r0, [r0, #16]
   d61ae:	f7ff bdab 	b.w	d5d08 <HAL_I2C_Peek_Data>

000d61b2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d61b2:	2100      	movs	r1, #0
   d61b4:	7c00      	ldrb	r0, [r0, #16]
   d61b6:	f7ff bdaf 	b.w	d5d18 <HAL_I2C_Flush_Data>

000d61ba <_ZN7TwoWireD0Ev>:
   d61ba:	b510      	push	{r4, lr}
   d61bc:	4604      	mov	r4, r0
   d61be:	f7fd ff6c 	bl	d409a <_ZdlPv>
   d61c2:	4620      	mov	r0, r4
   d61c4:	bd10      	pop	{r4, pc}
	...

000d61c8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d61c8:	b510      	push	{r4, lr}
   d61ca:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d61cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d61d0:	4608      	mov	r0, r1
   d61d2:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d61d4:	2100      	movs	r1, #0
   d61d6:	4b04      	ldr	r3, [pc, #16]	; (d61e8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d61d8:	7420      	strb	r0, [r4, #16]
   d61da:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d61dc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d61de:	f7ff fdab 	bl	d5d38 <HAL_I2C_Init>

}
   d61e2:	4620      	mov	r0, r4
   d61e4:	bd10      	pop	{r4, pc}
   d61e6:	bf00      	nop
   d61e8:	000d725c 	.word	0x000d725c

000d61ec <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d61ec:	2100      	movs	r1, #0
   d61ee:	7c00      	ldrb	r0, [r0, #16]
   d61f0:	f7ff bd9a 	b.w	d5d28 <HAL_I2C_Is_Enabled>

000d61f4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d61f4:	4770      	bx	lr

000d61f6 <_ZN9IPAddressD0Ev>:
   d61f6:	b510      	push	{r4, lr}
   d61f8:	4604      	mov	r4, r0
   d61fa:	f7fd ff4e 	bl	d409a <_ZdlPv>
   d61fe:	4620      	mov	r0, r4
   d6200:	bd10      	pop	{r4, pc}

000d6202 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6202:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d6204:	7d03      	ldrb	r3, [r0, #20]
   d6206:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6208:	b08d      	sub	sp, #52	; 0x34
   d620a:	460e      	mov	r6, r1
   d620c:	f100 0704 	add.w	r7, r0, #4
   d6210:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d6214:	d002      	beq.n	d621c <_ZNK9IPAddress7printToER5Print+0x1a>
   d6216:	f100 0508 	add.w	r5, r0, #8
   d621a:	e018      	b.n	d624e <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d621c:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d621e:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6220:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6224:	232f      	movs	r3, #47	; 0x2f
   d6226:	462a      	mov	r2, r5
   d6228:	200a      	movs	r0, #10
   d622a:	f7ff fd8d 	bl	d5d48 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d622e:	4628      	mov	r0, r5
   d6230:	f000 fee6 	bl	d7000 <strlen>
   d6234:	6833      	ldr	r3, [r6, #0]
   d6236:	4602      	mov	r2, r0
   d6238:	68db      	ldr	r3, [r3, #12]
   d623a:	4629      	mov	r1, r5
   d623c:	4630      	mov	r0, r6
   d623e:	4798      	blx	r3
   d6240:	e00f      	b.n	d6262 <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6242:	b124      	cbz	r4, d624e <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6244:	212e      	movs	r1, #46	; 0x2e
   d6246:	4630      	mov	r0, r6
   d6248:	f000 f982 	bl	d6550 <_ZN5Print5printEc>
   d624c:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d624e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6252:	220a      	movs	r2, #10
   d6254:	4630      	mov	r0, r6
   d6256:	f000 f9c7 	bl	d65e8 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d625a:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d625c:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d625e:	d1f0      	bne.n	d6242 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6260:	4620      	mov	r0, r4
    }
    return n;
}
   d6262:	b00d      	add	sp, #52	; 0x34
   d6264:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6268 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d6268:	b510      	push	{r4, lr}
   d626a:	4b05      	ldr	r3, [pc, #20]	; (d6280 <_ZN9IPAddressC1Ev+0x18>)
   d626c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d626e:	2211      	movs	r2, #17
   d6270:	f840 3b04 	str.w	r3, [r0], #4
   d6274:	2100      	movs	r1, #0
   d6276:	f000 fe93 	bl	d6fa0 <memset>
{
    clear();
}
   d627a:	4620      	mov	r0, r4
   d627c:	bd10      	pop	{r4, pc}
   d627e:	bf00      	nop
   d6280:	000d7284 	.word	0x000d7284

000d6284 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6284:	4603      	mov	r3, r0
   d6286:	4a07      	ldr	r2, [pc, #28]	; (d62a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6288:	b510      	push	{r4, lr}
   d628a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d628e:	f101 0210 	add.w	r2, r1, #16
   d6292:	f851 4b04 	ldr.w	r4, [r1], #4
   d6296:	f843 4b04 	str.w	r4, [r3], #4
   d629a:	4291      	cmp	r1, r2
   d629c:	d1f9      	bne.n	d6292 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d629e:	780a      	ldrb	r2, [r1, #0]
   d62a0:	701a      	strb	r2, [r3, #0]
}
   d62a2:	bd10      	pop	{r4, pc}
   d62a4:	000d7284 	.word	0x000d7284

000d62a8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d62a8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d62aa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d62ae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d62b2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d62b6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d62ba:	2304      	movs	r3, #4
   d62bc:	6041      	str	r1, [r0, #4]
   d62be:	7503      	strb	r3, [r0, #20]
   d62c0:	bd10      	pop	{r4, pc}

000d62c2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d62c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d62c4:	780d      	ldrb	r5, [r1, #0]
   d62c6:	788b      	ldrb	r3, [r1, #2]
   d62c8:	784a      	ldrb	r2, [r1, #1]
   d62ca:	78c9      	ldrb	r1, [r1, #3]
   d62cc:	9100      	str	r1, [sp, #0]
   d62ce:	4629      	mov	r1, r5
   d62d0:	f7ff ffea 	bl	d62a8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d62d4:	b003      	add	sp, #12
   d62d6:	bd30      	pop	{r4, r5, pc}

000d62d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d62d8:	4b01      	ldr	r3, [pc, #4]	; (d62e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d62da:	4a02      	ldr	r2, [pc, #8]	; (d62e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d62dc:	601a      	str	r2, [r3, #0]
   d62de:	4770      	bx	lr
   d62e0:	2003e4e0 	.word	0x2003e4e0
   d62e4:	000d7348 	.word	0x000d7348

000d62e8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d62e8:	2200      	movs	r2, #0
   d62ea:	4611      	mov	r1, r2
   d62ec:	6840      	ldr	r0, [r0, #4]
   d62ee:	f7ff be6f 	b.w	d5fd0 <network_listening>

000d62f2 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d62f2:	2200      	movs	r2, #0
   d62f4:	4611      	mov	r1, r2
   d62f6:	6840      	ldr	r0, [r0, #4]
   d62f8:	f7ff be7a 	b.w	d5ff0 <network_get_listen_timeout>

000d62fc <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d62fc:	2200      	movs	r2, #0
   d62fe:	6840      	ldr	r0, [r0, #4]
   d6300:	f7ff be6e 	b.w	d5fe0 <network_set_listen_timeout>

000d6304 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6304:	2200      	movs	r2, #0
   d6306:	f081 0101 	eor.w	r1, r1, #1
   d630a:	6840      	ldr	r0, [r0, #4]
   d630c:	f7ff be58 	b.w	d5fc0 <network_listen>

000d6310 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6310:	2300      	movs	r3, #0
   d6312:	461a      	mov	r2, r3
   d6314:	4619      	mov	r1, r3
   d6316:	6840      	ldr	r0, [r0, #4]
   d6318:	f7ff be4a 	b.w	d5fb0 <network_off>

000d631c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d631c:	2300      	movs	r3, #0
   d631e:	461a      	mov	r2, r3
   d6320:	4619      	mov	r1, r3
   d6322:	6840      	ldr	r0, [r0, #4]
   d6324:	f7ff be3c 	b.w	d5fa0 <network_on>

000d6328 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6328:	2200      	movs	r2, #0
   d632a:	4611      	mov	r1, r2
   d632c:	6840      	ldr	r0, [r0, #4]
   d632e:	f7ff be2f 	b.w	d5f90 <network_ready>

000d6332 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6332:	2200      	movs	r2, #0
   d6334:	4611      	mov	r1, r2
   d6336:	6840      	ldr	r0, [r0, #4]
   d6338:	f7ff be1a 	b.w	d5f70 <network_connecting>

000d633c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d633c:	2200      	movs	r2, #0
   d633e:	2102      	movs	r1, #2
   d6340:	6840      	ldr	r0, [r0, #4]
   d6342:	f7ff be1d 	b.w	d5f80 <network_disconnect>

000d6346 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6346:	2300      	movs	r3, #0
   d6348:	461a      	mov	r2, r3
   d634a:	6840      	ldr	r0, [r0, #4]
   d634c:	f7ff be08 	b.w	d5f60 <network_connect>

000d6350 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6350:	b110      	cbz	r0, d6358 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d6352:	6803      	ldr	r3, [r0, #0]
   d6354:	685b      	ldr	r3, [r3, #4]
   d6356:	4718      	bx	r3
   d6358:	4770      	bx	lr

000d635a <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d635a:	b538      	push	{r3, r4, r5, lr}
   d635c:	4604      	mov	r4, r0
   d635e:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d6360:	b1d0      	cbz	r0, d6398 <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d6362:	f7ff fc31 	bl	d5bc8 <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d6366:	b9b8      	cbnz	r0, d6398 <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d6368:	7c23      	ldrb	r3, [r4, #16]
   d636a:	b91b      	cbnz	r3, d6374 <_ZN6Thread7disposeEv+0x1a>
   d636c:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d636e:	b108      	cbz	r0, d6374 <_ZN6Thread7disposeEv+0x1a>
   d6370:	f7ff fc3a 	bl	d5be8 <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d6374:	6865      	ldr	r5, [r4, #4]
   d6376:	b155      	cbz	r5, d638e <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6378:	68ab      	ldr	r3, [r5, #8]
   d637a:	b11b      	cbz	r3, d6384 <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d637c:	2203      	movs	r2, #3
   d637e:	4629      	mov	r1, r5
   d6380:	4628      	mov	r0, r5
   d6382:	4798      	blx	r3
            delete wrapper;
   d6384:	4628      	mov	r0, r5
   d6386:	f7fd fe88 	bl	d409a <_ZdlPv>
            wrapper = NULL;
   d638a:	2300      	movs	r3, #0
   d638c:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d638e:	6820      	ldr	r0, [r4, #0]
   d6390:	f7ff fc32 	bl	d5bf8 <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d6394:	2300      	movs	r3, #0
   d6396:	6023      	str	r3, [r4, #0]
   d6398:	bd38      	pop	{r3, r4, r5, pc}
	...

000d639c <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d639c:	b538      	push	{r3, r4, r5, lr}
   d639e:	4b0b      	ldr	r3, [pc, #44]	; (d63cc <_ZN5spark9MeshClassD1Ev+0x30>)
   d63a0:	6003      	str	r3, [r0, #0]
   d63a2:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d63a4:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d63a8:	b108      	cbz	r0, d63ae <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d63aa:	f7fd fe78 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d63ae:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d63b2:	b12d      	cbz	r5, d63c0 <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d63b4:	4628      	mov	r0, r5
   d63b6:	f7ff ffd0 	bl	d635a <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d63ba:	4628      	mov	r0, r5
   d63bc:	f7fd fe6d 	bl	d409a <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d63c0:	68a0      	ldr	r0, [r4, #8]
   d63c2:	b108      	cbz	r0, d63c8 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d63c4:	f7ff ffc4 	bl	d6350 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d63c8:	4620      	mov	r0, r4
   d63ca:	bd38      	pop	{r3, r4, r5, pc}
   d63cc:	000d7374 	.word	0x000d7374

000d63d0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d63d0:	b538      	push	{r3, r4, r5, lr}
   d63d2:	4c0d      	ldr	r4, [pc, #52]	; (d6408 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d63d4:	4b0d      	ldr	r3, [pc, #52]	; (d640c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d63d6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d63d8:	2500      	movs	r5, #0
   d63da:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d63dc:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d63e0:	6063      	str	r3, [r4, #4]
   d63e2:	60a5      	str	r5, [r4, #8]
   d63e4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d63e8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d63ec:	f7ff fc24 	bl	d5c38 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d63f0:	4b07      	ldr	r3, [pc, #28]	; (d6410 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d63f2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d63f6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d63f8:	4620      	mov	r0, r4
   d63fa:	4a06      	ldr	r2, [pc, #24]	; (d6414 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d63fc:	4906      	ldr	r1, [pc, #24]	; (d6418 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d63fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6402:	f000 bc57 	b.w	d6cb4 <__aeabi_atexit>
   d6406:	bf00      	nop
   d6408:	2003e4e4 	.word	0x2003e4e4
   d640c:	000d73a8 	.word	0x000d73a8
   d6410:	000d7374 	.word	0x000d7374
   d6414:	2003dfb0 	.word	0x2003dfb0
   d6418:	000d639d 	.word	0x000d639d

000d641c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d641c:	2300      	movs	r3, #0
   d641e:	461a      	mov	r2, r3
   d6420:	6840      	ldr	r0, [r0, #4]
   d6422:	f7ff bd9d 	b.w	d5f60 <network_connect>

000d6426 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6426:	2200      	movs	r2, #0
   d6428:	2102      	movs	r1, #2
   d642a:	6840      	ldr	r0, [r0, #4]
   d642c:	f7ff bda8 	b.w	d5f80 <network_disconnect>

000d6430 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6430:	2200      	movs	r2, #0
   d6432:	4611      	mov	r1, r2
   d6434:	6840      	ldr	r0, [r0, #4]
   d6436:	f7ff bd9b 	b.w	d5f70 <network_connecting>

000d643a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d643a:	2200      	movs	r2, #0
   d643c:	4611      	mov	r1, r2
   d643e:	6840      	ldr	r0, [r0, #4]
   d6440:	f7ff bda6 	b.w	d5f90 <network_ready>

000d6444 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6444:	2300      	movs	r3, #0
   d6446:	461a      	mov	r2, r3
   d6448:	4619      	mov	r1, r3
   d644a:	6840      	ldr	r0, [r0, #4]
   d644c:	f7ff bda8 	b.w	d5fa0 <network_on>

000d6450 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6450:	2300      	movs	r3, #0
   d6452:	461a      	mov	r2, r3
   d6454:	4619      	mov	r1, r3
   d6456:	6840      	ldr	r0, [r0, #4]
   d6458:	f7ff bdaa 	b.w	d5fb0 <network_off>

000d645c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d645c:	2200      	movs	r2, #0
   d645e:	f081 0101 	eor.w	r1, r1, #1
   d6462:	6840      	ldr	r0, [r0, #4]
   d6464:	f7ff bdac 	b.w	d5fc0 <network_listen>

000d6468 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6468:	2200      	movs	r2, #0
   d646a:	6840      	ldr	r0, [r0, #4]
   d646c:	f7ff bdb8 	b.w	d5fe0 <network_set_listen_timeout>

000d6470 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6470:	2200      	movs	r2, #0
   d6472:	4611      	mov	r1, r2
   d6474:	6840      	ldr	r0, [r0, #4]
   d6476:	f7ff bdbb 	b.w	d5ff0 <network_get_listen_timeout>

000d647a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d647a:	2200      	movs	r2, #0
   d647c:	4611      	mov	r1, r2
   d647e:	6840      	ldr	r0, [r0, #4]
   d6480:	f7ff bda6 	b.w	d5fd0 <network_listening>

000d6484 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6484:	b570      	push	{r4, r5, r6, lr}
   d6486:	b08c      	sub	sp, #48	; 0x30
   d6488:	4614      	mov	r4, r2
   d648a:	4606      	mov	r6, r0
    IPAddress addr;
   d648c:	f7ff feec 	bl	d6268 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6490:	ab0c      	add	r3, sp, #48	; 0x30
   d6492:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d6494:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6496:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d649a:	4620      	mov	r0, r4
   d649c:	f7ff fc64 	bl	d5d68 <netdb_getaddrinfo>
    if (!r && ai) {
   d64a0:	4601      	mov	r1, r0
   d64a2:	bb58      	cbnz	r0, d64fc <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d64a4:	9b00      	ldr	r3, [sp, #0]
   d64a6:	b34b      	cbz	r3, d64fc <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d64a8:	685a      	ldr	r2, [r3, #4]
   d64aa:	2a02      	cmp	r2, #2
   d64ac:	d00e      	beq.n	d64cc <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d64ae:	2a0a      	cmp	r2, #10
   d64b0:	d124      	bne.n	d64fc <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d64b2:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d64b4:	2211      	movs	r2, #17
   d64b6:	a801      	add	r0, sp, #4
   d64b8:	f000 fd72 	bl	d6fa0 <memset>
                a.v = 6;
   d64bc:	2306      	movs	r3, #6
   d64be:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d64c2:	ad01      	add	r5, sp, #4
   d64c4:	f104 0308 	add.w	r3, r4, #8
   d64c8:	3418      	adds	r4, #24
   d64ca:	e005      	b.n	d64d8 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d64cc:	6959      	ldr	r1, [r3, #20]
   d64ce:	4630      	mov	r0, r6
   d64d0:	3104      	adds	r1, #4
   d64d2:	f7ff fef6 	bl	d62c2 <_ZN9IPAddressaSEPKh>
                break;
   d64d6:	e011      	b.n	d64fc <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d64d8:	6818      	ldr	r0, [r3, #0]
   d64da:	6859      	ldr	r1, [r3, #4]
   d64dc:	462a      	mov	r2, r5
   d64de:	c203      	stmia	r2!, {r0, r1}
   d64e0:	3308      	adds	r3, #8
   d64e2:	42a3      	cmp	r3, r4
   d64e4:	4615      	mov	r5, r2
   d64e6:	d1f7      	bne.n	d64d8 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d64e8:	a901      	add	r1, sp, #4
   d64ea:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d64ec:	ad07      	add	r5, sp, #28
   d64ee:	f7ff fec9 	bl	d6284 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d64f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d64f4:	1d34      	adds	r4, r6, #4
   d64f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d64f8:	682b      	ldr	r3, [r5, #0]
   d64fa:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d64fc:	9800      	ldr	r0, [sp, #0]
   d64fe:	f7ff fc2b 	bl	d5d58 <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6502:	4630      	mov	r0, r6
   d6504:	b00c      	add	sp, #48	; 0x30
   d6506:	bd70      	pop	{r4, r5, r6, pc}

000d6508 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6508:	4b02      	ldr	r3, [pc, #8]	; (d6514 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d650a:	4a03      	ldr	r2, [pc, #12]	; (d6518 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d650c:	601a      	str	r2, [r3, #0]
   d650e:	2200      	movs	r2, #0
   d6510:	605a      	str	r2, [r3, #4]
   d6512:	4770      	bx	lr
   d6514:	2003e6b4 	.word	0x2003e6b4
   d6518:	000d73a8 	.word	0x000d73a8

000d651c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d651c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d651e:	4606      	mov	r6, r0
   d6520:	460d      	mov	r5, r1
   d6522:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6524:	2400      	movs	r4, #0
  while (size--) {
   d6526:	42bd      	cmp	r5, r7
   d6528:	d00c      	beq.n	d6544 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d652a:	6833      	ldr	r3, [r6, #0]
   d652c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6530:	689b      	ldr	r3, [r3, #8]
   d6532:	4630      	mov	r0, r6
   d6534:	4798      	blx	r3
     if (chunk>=0)
   d6536:	2800      	cmp	r0, #0
   d6538:	db01      	blt.n	d653e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d653a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d653c:	e7f3      	b.n	d6526 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d653e:	2c00      	cmp	r4, #0
   d6540:	bf08      	it	eq
   d6542:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6544:	4620      	mov	r0, r4
   d6546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6548 <_ZN5Print5printEPKc>:
   d6548:	b508      	push	{r3, lr}
   d654a:	f7fe fe97 	bl	d527c <_ZN5Print5writeEPKc>
   d654e:	bd08      	pop	{r3, pc}

000d6550 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6550:	6803      	ldr	r3, [r0, #0]
   d6552:	689b      	ldr	r3, [r3, #8]
   d6554:	4718      	bx	r3

000d6556 <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d6556:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6558:	f7fe fe90 	bl	d527c <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
   d655c:	bd08      	pop	{r3, pc}

000d655e <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d655e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6560:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6562:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6564:	f7ff fff4 	bl	d6550 <_ZN5Print5printEc>
  n += print('\n');
   d6568:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d656a:	4604      	mov	r4, r0
  n += print('\n');
   d656c:	4628      	mov	r0, r5
   d656e:	f7ff ffef 	bl	d6550 <_ZN5Print5printEc>
  return n;
}
   d6572:	4420      	add	r0, r4
   d6574:	bd38      	pop	{r3, r4, r5, pc}

000d6576 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6576:	b538      	push	{r3, r4, r5, lr}
   d6578:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d657a:	f7fe fe7f 	bl	d527c <_ZN5Print5writeEPKc>
   d657e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6580:	4628      	mov	r0, r5
   d6582:	f7ff ffec 	bl	d655e <_ZN5Print7printlnEv>
  return n;
}
   d6586:	4420      	add	r0, r4
   d6588:	bd38      	pop	{r3, r4, r5, pc}

000d658a <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d658a:	f7ff bff4 	b.w	d6576 <_ZN5Print7printlnEPKc>

000d658e <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d658e:	b530      	push	{r4, r5, lr}
   d6590:	b08b      	sub	sp, #44	; 0x2c
   d6592:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6594:	2100      	movs	r1, #0
   d6596:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d659a:	2a01      	cmp	r2, #1
   d659c:	bf98      	it	ls
   d659e:	220a      	movls	r2, #10
   d65a0:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d65a4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d65a8:	fb05 3312 	mls	r3, r5, r2, r3
   d65ac:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d65b0:	2b09      	cmp	r3, #9
   d65b2:	bf94      	ite	ls
   d65b4:	3330      	addls	r3, #48	; 0x30
   d65b6:	3337      	addhi	r3, #55	; 0x37
   d65b8:	b2db      	uxtb	r3, r3
   d65ba:	4621      	mov	r1, r4
   d65bc:	f804 3901 	strb.w	r3, [r4], #-1
   d65c0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d65c2:	2d00      	cmp	r5, #0
   d65c4:	d1ee      	bne.n	d65a4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d65c6:	f7fe fe59 	bl	d527c <_ZN5Print5writeEPKc>
}
   d65ca:	b00b      	add	sp, #44	; 0x2c
   d65cc:	bd30      	pop	{r4, r5, pc}

000d65ce <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d65ce:	b410      	push	{r4}
  if (base == 0) return write(n);
   d65d0:	b92a      	cbnz	r2, d65de <_ZN5Print5printEmi+0x10>
   d65d2:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d65d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d65d8:	689b      	ldr	r3, [r3, #8]
   d65da:	b2c9      	uxtb	r1, r1
   d65dc:	4718      	bx	r3
  else return printNumber(n, base);
   d65de:	b2d2      	uxtb	r2, r2
}
   d65e0:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d65e4:	f7ff bfd3 	b.w	d658e <_ZN5Print11printNumberEmh>

000d65e8 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d65e8:	f7ff bff1 	b.w	d65ce <_ZN5Print5printEmi>

000d65ec <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
   d65ec:	b538      	push	{r3, r4, r5, lr}
   d65ee:	4605      	mov	r5, r0
  size_t n = print(num, base);
   d65f0:	f7ff ffed 	bl	d65ce <_ZN5Print5printEmi>
   d65f4:	4604      	mov	r4, r0
  n += println();
   d65f6:	4628      	mov	r0, r5
   d65f8:	f7ff ffb1 	bl	d655e <_ZN5Print7printlnEv>
  return n;
}
   d65fc:	4420      	add	r0, r4
   d65fe:	bd38      	pop	{r3, r4, r5, pc}

000d6600 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d6600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6604:	4607      	mov	r7, r0
   d6606:	460e      	mov	r6, r1
  if (base == 0) {
   d6608:	4615      	mov	r5, r2
   d660a:	b92a      	cbnz	r2, d6618 <_ZN5Print5printEli+0x18>
    return write(n);
   d660c:	6803      	ldr	r3, [r0, #0]
   d660e:	b2c9      	uxtb	r1, r1
   d6610:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d6616:	4718      	bx	r3
  } else if (base == 10) {
   d6618:	2a0a      	cmp	r2, #10
   d661a:	d102      	bne.n	d6622 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d661c:	2900      	cmp	r1, #0
   d661e:	da01      	bge.n	d6624 <_ZN5Print5printEli+0x24>
   d6620:	e004      	b.n	d662c <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6622:	b2d2      	uxtb	r2, r2
  }
}
   d6624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d6628:	f7ff bfb1 	b.w	d658e <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d662c:	212d      	movs	r1, #45	; 0x2d
   d662e:	f7ff ff8f 	bl	d6550 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d6632:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d6634:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d6636:	4271      	negs	r1, r6
   d6638:	4638      	mov	r0, r7
   d663a:	f7ff ffa8 	bl	d658e <_ZN5Print11printNumberEmh>
   d663e:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d6640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6644 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d6644:	f7ff bfdc 	b.w	d6600 <_ZN5Print5printEli>

000d6648 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6648:	b40c      	push	{r2, r3}
   d664a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d664e:	b087      	sub	sp, #28
   d6650:	af00      	add	r7, sp, #0
   d6652:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6656:	4605      	mov	r5, r0
   d6658:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d665c:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d665e:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6660:	4623      	mov	r3, r4
   d6662:	464a      	mov	r2, r9
   d6664:	2114      	movs	r1, #20
   d6666:	1d38      	adds	r0, r7, #4
   d6668:	f7ff fcda 	bl	d6020 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d666c:	2813      	cmp	r0, #19
   d666e:	d805      	bhi.n	d667c <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6670:	1d39      	adds	r1, r7, #4
   d6672:	4628      	mov	r0, r5
   d6674:	f7fe fe02 	bl	d527c <_ZN5Print5writeEPKc>
   d6678:	4604      	mov	r4, r0
   d667a:	e013      	b.n	d66a4 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d667c:	f100 0308 	add.w	r3, r0, #8
   d6680:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6684:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6686:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d668a:	1c41      	adds	r1, r0, #1
   d668c:	4623      	mov	r3, r4
   d668e:	464a      	mov	r2, r9
   d6690:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6692:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6694:	f7ff fcc4 	bl	d6020 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6698:	4669      	mov	r1, sp
   d669a:	4628      	mov	r0, r5
   d669c:	f7fe fdee 	bl	d527c <_ZN5Print5writeEPKc>
   d66a0:	4604      	mov	r4, r0
   d66a2:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d66a4:	b11e      	cbz	r6, d66ae <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d66a6:	4628      	mov	r0, r5
   d66a8:	f7ff ff59 	bl	d655e <_ZN5Print7printlnEv>
   d66ac:	4404      	add	r4, r0
    return n;
}
   d66ae:	4620      	mov	r0, r4
   d66b0:	371c      	adds	r7, #28
   d66b2:	46bd      	mov	sp, r7
   d66b4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d66b8:	b002      	add	sp, #8
   d66ba:	4770      	bx	lr

000d66bc <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d66bc:	b510      	push	{r4, lr}
   d66be:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d66c0:	f7ff fd0e 	bl	d60e0 <_ZNSt14_Function_baseD1Ev>
   d66c4:	4620      	mov	r0, r4
   d66c6:	bd10      	pop	{r4, pc}

000d66c8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d66c8:	4803      	ldr	r0, [pc, #12]	; (d66d8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d66ca:	4a04      	ldr	r2, [pc, #16]	; (d66dc <_GLOBAL__sub_I_RGB+0x14>)
   d66cc:	4904      	ldr	r1, [pc, #16]	; (d66e0 <_GLOBAL__sub_I_RGB+0x18>)
   d66ce:	2300      	movs	r3, #0
   d66d0:	6083      	str	r3, [r0, #8]
   d66d2:	f000 baef 	b.w	d6cb4 <__aeabi_atexit>
   d66d6:	bf00      	nop
   d66d8:	2003e6bc 	.word	0x2003e6bc
   d66dc:	2003dfb0 	.word	0x2003dfb0
   d66e0:	000d66bd 	.word	0x000d66bd

000d66e4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d66e4:	4770      	bx	lr

000d66e6 <_ZN8SPIClassD0Ev>:
   d66e6:	b510      	push	{r4, lr}
   d66e8:	4604      	mov	r4, r0
   d66ea:	f7fd fcd6 	bl	d409a <_ZdlPv>
   d66ee:	4620      	mov	r0, r4
   d66f0:	bd10      	pop	{r4, pc}
	...

000d66f4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d66f4:	b570      	push	{r4, r5, r6, lr}
   d66f6:	4b08      	ldr	r3, [pc, #32]	; (d6718 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d66f8:	6003      	str	r3, [r0, #0]
   d66fa:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d66fc:	2500      	movs	r5, #0
   d66fe:	460e      	mov	r6, r1
   d6700:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d6704:	f7ff fa80 	bl	d5c08 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d6708:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d670a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d670c:	f7ff fb44 	bl	d5d98 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d6710:	60a5      	str	r5, [r4, #8]
}
   d6712:	4620      	mov	r0, r4
   d6714:	bd70      	pop	{r4, r5, r6, pc}
   d6716:	bf00      	nop
   d6718:	000d73dc 	.word	0x000d73dc

000d671c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d671c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6720:	7900      	ldrb	r0, [r0, #4]
   d6722:	f7ff bb29 	b.w	d5d78 <HAL_SPI_Begin>

000d6726 <_ZN8SPIClass14endTransactionEv>:
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
    void unlock() { os_mutex_unlock(handle_); }
   d6726:	68c0      	ldr	r0, [r0, #12]
   d6728:	f7ff ba7e 	b.w	d5c28 <os_mutex_unlock>

000d672c <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d672c:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
   d672e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d6730:	6018      	str	r0, [r3, #0]
   d6732:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
   d6734:	6818      	ldr	r0, [r3, #0]
   d6736:	4288      	cmp	r0, r1
   d6738:	b2e5      	uxtb	r5, r4
   d673a:	d906      	bls.n	d674a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d673c:	3401      	adds	r4, #1
   d673e:	2c08      	cmp	r4, #8
   d6740:	d002      	beq.n	d6748 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
   d6742:	0840      	lsrs	r0, r0, #1
   d6744:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
   d6746:	e7f5      	b.n	d6734 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6748:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d674a:	4b02      	ldr	r3, [pc, #8]	; (d6754 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d674c:	5d5b      	ldrb	r3, [r3, r5]
   d674e:	7013      	strb	r3, [r2, #0]
   d6750:	bd30      	pop	{r4, r5, pc}
   d6752:	bf00      	nop
   d6754:	000d73e4 	.word	0x000d73e4

000d6758 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
  lock();
  return 0;
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d6758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d675c:	4680      	mov	r8, r0
   d675e:	b08f      	sub	sp, #60	; 0x3c
            os_mutex_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
   d6760:	68c0      	ldr	r0, [r0, #12]
   d6762:	460f      	mov	r7, r1
   d6764:	f7ff fa58 	bl	d5c18 <os_mutex_lock>
  lock();
  // Get Current SPISettings
  hal_spi_info_t info;
  querySpiInfo(_spi, &info);
   d6768:	f898 4004 	ldrb.w	r4, [r8, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   d676c:	2214      	movs	r2, #20
   d676e:	2100      	movs	r1, #0
   d6770:	a809      	add	r0, sp, #36	; 0x24
   d6772:	f000 fc15 	bl	d6fa0 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   d6776:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   d6778:	4620      	mov	r0, r4
   d677a:	2200      	movs	r2, #0
   d677c:	a909      	add	r1, sp, #36	; 0x24
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   d677e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  HAL_SPI_Info(spi, info, nullptr);
   d6782:	f7ff fb19 	bl	d5db8 <HAL_SPI_Info>
}

static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
  if (!info->enabled || info->default_settings)
   d6786:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d678a:	b14c      	cbz	r4, d67a0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
   d678c:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d6790:	b92d      	cbnz	r5, d679e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d6792:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   d6794:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d6798:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d679c:	e003      	b.n	d67a6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d679e:	2400      	movs	r4, #0
   d67a0:	46a1      	mov	r9, r4
   d67a2:	4626      	mov	r6, r4
   d67a4:	2501      	movs	r5, #1
   d67a6:	793b      	ldrb	r3, [r7, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d67a8:	b10d      	cbz	r5, d67ae <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
   d67aa:	2b00      	cmp	r3, #0
   d67ac:	d140      	bne.n	d6830 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
      return true;

    if (default_ == other.default_ &&
   d67ae:	429d      	cmp	r5, r3
   d67b0:	d10b      	bne.n	d67ca <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
   d67b2:	68ba      	ldr	r2, [r7, #8]
   d67b4:	42b2      	cmp	r2, r6
   d67b6:	d108      	bne.n	d67ca <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d67b8:	f88d 9020 	strb.w	r9, [sp, #32]
   d67bc:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d67c0:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d67c4:	89ba      	ldrh	r2, [r7, #12]
   d67c6:	4291      	cmp	r1, r2
   d67c8:	d032      	beq.n	d6830 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
  querySpiInfo(_spi, &info);
  particle::__SPISettings current = spiSettingsFromSpiInfo(&info);
  // If they differ, reconfigure SPI peripheral
  if (settings != current)
  {
    if (!settings.default_) {
   d67ca:	bb23      	cbnz	r3, d6816 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xbe>
      uint8_t divisor = 0;
   d67cc:	f88d 300f 	strb.w	r3, [sp, #15]
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);
   d67d0:	f10d 020f 	add.w	r2, sp, #15
   d67d4:	ab04      	add	r3, sp, #16
   d67d6:	68b9      	ldr	r1, [r7, #8]
   d67d8:	980a      	ldr	r0, [sp, #40]	; 0x28
   d67da:	f7ff ffa7 	bl	d672c <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d67de:	793b      	ldrb	r3, [r7, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d67e0:	b105      	cbz	r5, d67e4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
   d67e2:	bb13      	cbnz	r3, d682a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d67e4:	42ab      	cmp	r3, r5
   d67e6:	d009      	beq.n	d67fc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>

      if (!(current <= settings && clock == current.clock_)) {
        HAL_SPI_Set_Settings(_spi, 0, divisor, settings.bitOrder_, settings.dataMode_, nullptr);
   d67e8:	2100      	movs	r1, #0
   d67ea:	7b3b      	ldrb	r3, [r7, #12]
   d67ec:	9101      	str	r1, [sp, #4]
   d67ee:	7b7c      	ldrb	r4, [r7, #13]
   d67f0:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d67f4:	f898 0004 	ldrb.w	r0, [r8, #4]
   d67f8:	9400      	str	r4, [sp, #0]
   d67fa:	e013      	b.n	d6824 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xcc>
   d67fc:	68bb      	ldr	r3, [r7, #8]
   d67fe:	42b3      	cmp	r3, r6
   d6800:	d3f2      	bcc.n	d67e8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6802:	f88d 9020 	strb.w	r9, [sp, #32]
   d6806:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d680a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d680e:	89bb      	ldrh	r3, [r7, #12]
   d6810:	429a      	cmp	r2, r3
   d6812:	d1e9      	bne.n	d67e8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
   d6814:	e009      	b.n	d682a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      }
    } else {
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
   d6816:	2300      	movs	r3, #0
   d6818:	f898 0004 	ldrb.w	r0, [r8, #4]
   d681c:	9301      	str	r3, [sp, #4]
   d681e:	9300      	str	r3, [sp, #0]
   d6820:	461a      	mov	r2, r3
   d6822:	2101      	movs	r1, #1
   d6824:	f7ff fae0 	bl	d5de8 <HAL_SPI_Set_Settings>
   d6828:	e002      	b.n	d6830 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
    if (!settings.default_) {
      uint8_t divisor = 0;
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);

      if (!(current <= settings && clock == current.clock_)) {
   d682a:	9b04      	ldr	r3, [sp, #16]
   d682c:	42b3      	cmp	r3, r6
   d682e:	d1db      	bne.n	d67e8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
    }
  }

  return 0;
}
   d6830:	2000      	movs	r0, #0
   d6832:	b00f      	add	sp, #60	; 0x3c
   d6834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6838 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6838:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   d683a:	7900      	ldrb	r0, [r0, #4]
   d683c:	f7ff faa4 	bl	d5d88 <HAL_SPI_Send_Receive_Data>
}
   d6840:	b2c0      	uxtb	r0, r0
   d6842:	bd08      	pop	{r3, pc}

000d6844 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d6844:	b530      	push	{r4, r5, lr}
   d6846:	b087      	sub	sp, #28
   d6848:	4604      	mov	r4, r0
   d684a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d684c:	7900      	ldrb	r0, [r0, #4]
   d684e:	9500      	str	r5, [sp, #0]
   d6850:	f7ff faba 	bl	d5dc8 <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
   d6854:	b93d      	cbnz	r5, d6866 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d6856:	a902      	add	r1, sp, #8
   d6858:	7920      	ldrb	r0, [r4, #4]
   d685a:	f7ff fabd 	bl	d5dd8 <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
   d685e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d6862:	07db      	lsls	r3, r3, #31
   d6864:	d4f7      	bmi.n	d6856 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
   d6866:	b007      	add	sp, #28
   d6868:	bd30      	pop	{r4, r5, pc}

000d686a <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d686a:	7900      	ldrb	r0, [r0, #4]
   d686c:	f7ff ba9c 	b.w	d5da8 <HAL_SPI_Is_Enabled>

000d6870 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d6870:	4b04      	ldr	r3, [pc, #16]	; (d6884 <_GLOBAL__sub_I_System+0x14>)
   d6872:	2000      	movs	r0, #0
   d6874:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6878:	7018      	strb	r0, [r3, #0]
   d687a:	8058      	strh	r0, [r3, #2]
   d687c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d687e:	f7ff bb3b 	b.w	d5ef8 <set_system_mode>
   d6882:	bf00      	nop
   d6884:	2003e6cc 	.word	0x2003e6cc

000d6888 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6888:	4b02      	ldr	r3, [pc, #8]	; (d6894 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d688a:	681a      	ldr	r2, [r3, #0]
   d688c:	4b02      	ldr	r3, [pc, #8]	; (d6898 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d688e:	601a      	str	r2, [r3, #0]
   d6890:	4770      	bx	lr
   d6892:	bf00      	nop
   d6894:	2003df48 	.word	0x2003df48
   d6898:	2003e6d4 	.word	0x2003e6d4

000d689c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d689c:	4770      	bx	lr

000d689e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d689e:	7441      	strb	r1, [r0, #17]
   d68a0:	4770      	bx	lr

000d68a2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d68a2:	7c00      	ldrb	r0, [r0, #16]
   d68a4:	f7ff bae0 	b.w	d5e68 <HAL_USART_Available_Data_For_Write>

000d68a8 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d68a8:	7c00      	ldrb	r0, [r0, #16]
   d68aa:	f7ff bab5 	b.w	d5e18 <HAL_USART_Available_Data>

000d68ae <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d68ae:	7c00      	ldrb	r0, [r0, #16]
   d68b0:	f7ff bac2 	b.w	d5e38 <HAL_USART_Peek_Data>

000d68b4 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d68b4:	7c00      	ldrb	r0, [r0, #16]
   d68b6:	f7ff bab7 	b.w	d5e28 <HAL_USART_Read_Data>

000d68ba <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d68ba:	7c00      	ldrb	r0, [r0, #16]
   d68bc:	f7ff bac4 	b.w	d5e48 <HAL_USART_Flush_Data>

000d68c0 <_ZN11USARTSerialD0Ev>:
   d68c0:	b510      	push	{r4, lr}
   d68c2:	4604      	mov	r4, r0
   d68c4:	f7fd fbe9 	bl	d409a <_ZdlPv>
   d68c8:	4620      	mov	r0, r4
   d68ca:	bd10      	pop	{r4, pc}

000d68cc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d68cc:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d68ce:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d68d0:	4604      	mov	r4, r0
   d68d2:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d68d4:	b925      	cbnz	r5, d68e0 <_ZN11USARTSerial5writeEh+0x14>
   d68d6:	7c00      	ldrb	r0, [r0, #16]
   d68d8:	f7ff fac6 	bl	d5e68 <HAL_USART_Available_Data_For_Write>
   d68dc:	2800      	cmp	r0, #0
   d68de:	dd05      	ble.n	d68ec <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d68e0:	4631      	mov	r1, r6
   d68e2:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d68e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d68e8:	f7ff ba8e 	b.w	d5e08 <HAL_USART_Write_Data>
  }
  return 0;
}
   d68ec:	4628      	mov	r0, r5
   d68ee:	bd70      	pop	{r4, r5, r6, pc}

000d68f0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d68f0:	b510      	push	{r4, lr}
   d68f2:	4604      	mov	r4, r0
   d68f4:	4608      	mov	r0, r1
   d68f6:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d68f8:	2200      	movs	r2, #0
   d68fa:	6062      	str	r2, [r4, #4]
   d68fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6900:	60a2      	str	r2, [r4, #8]
   d6902:	4a05      	ldr	r2, [pc, #20]	; (d6918 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6904:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6906:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6908:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d690a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d690c:	461a      	mov	r2, r3
   d690e:	f7ff fa73 	bl	d5df8 <HAL_USART_Init>
}
   d6912:	4620      	mov	r0, r4
   d6914:	bd10      	pop	{r4, pc}
   d6916:	bf00      	nop
   d6918:	000d7420 	.word	0x000d7420

000d691c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d691c:	7c00      	ldrb	r0, [r0, #16]
   d691e:	f7ff ba9b 	b.w	d5e58 <HAL_USART_Is_Enabled>
	...

000d6924 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d6926:	4c19      	ldr	r4, [pc, #100]	; (d698c <_Z22__fetch_global_Serial1v+0x68>)
   d6928:	6825      	ldr	r5, [r4, #0]
   d692a:	b94d      	cbnz	r5, d6940 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d692c:	2084      	movs	r0, #132	; 0x84
   d692e:	f7fd fbb2 	bl	d4096 <_Znwj>
   d6932:	4606      	mov	r6, r0
   d6934:	b118      	cbz	r0, d693e <_Z22__fetch_global_Serial1v+0x1a>
   d6936:	2284      	movs	r2, #132	; 0x84
   d6938:	4629      	mov	r1, r5
   d693a:	f000 fb31 	bl	d6fa0 <memset>
   d693e:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d6940:	4d13      	ldr	r5, [pc, #76]	; (d6990 <_Z22__fetch_global_Serial1v+0x6c>)
   d6942:	682e      	ldr	r6, [r5, #0]
   d6944:	b94e      	cbnz	r6, d695a <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d6946:	2084      	movs	r0, #132	; 0x84
   d6948:	f7fd fba5 	bl	d4096 <_Znwj>
   d694c:	4607      	mov	r7, r0
   d694e:	b118      	cbz	r0, d6958 <_Z22__fetch_global_Serial1v+0x34>
   d6950:	2284      	movs	r2, #132	; 0x84
   d6952:	4631      	mov	r1, r6
   d6954:	f000 fb24 	bl	d6fa0 <memset>
   d6958:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d695a:	4f0e      	ldr	r7, [pc, #56]	; (d6994 <_Z22__fetch_global_Serial1v+0x70>)
   d695c:	6839      	ldr	r1, [r7, #0]
   d695e:	f011 0601 	ands.w	r6, r1, #1
   d6962:	d111      	bne.n	d6988 <_Z22__fetch_global_Serial1v+0x64>
   d6964:	4638      	mov	r0, r7
   d6966:	f7fd fb9c 	bl	d40a2 <__cxa_guard_acquire>
   d696a:	b168      	cbz	r0, d6988 <_Z22__fetch_global_Serial1v+0x64>
   d696c:	6822      	ldr	r2, [r4, #0]
   d696e:	682b      	ldr	r3, [r5, #0]
   d6970:	4809      	ldr	r0, [pc, #36]	; (d6998 <_Z22__fetch_global_Serial1v+0x74>)
   d6972:	4631      	mov	r1, r6
   d6974:	f7ff ffbc 	bl	d68f0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6978:	4638      	mov	r0, r7
   d697a:	f7fd fb97 	bl	d40ac <__cxa_guard_release>
   d697e:	4a07      	ldr	r2, [pc, #28]	; (d699c <_Z22__fetch_global_Serial1v+0x78>)
   d6980:	4907      	ldr	r1, [pc, #28]	; (d69a0 <_Z22__fetch_global_Serial1v+0x7c>)
   d6982:	4805      	ldr	r0, [pc, #20]	; (d6998 <_Z22__fetch_global_Serial1v+0x74>)
   d6984:	f000 f996 	bl	d6cb4 <__aeabi_atexit>
#endif
	return serial1;
}
   d6988:	4803      	ldr	r0, [pc, #12]	; (d6998 <_Z22__fetch_global_Serial1v+0x74>)
   d698a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d698c:	2003e6f4 	.word	0x2003e6f4
   d6990:	2003e6ec 	.word	0x2003e6ec
   d6994:	2003e6f0 	.word	0x2003e6f0
   d6998:	2003e6d8 	.word	0x2003e6d8
   d699c:	2003dfb0 	.word	0x2003dfb0
   d69a0:	000d689d 	.word	0x000d689d

000d69a4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d69a4:	7441      	strb	r1, [r0, #17]
   d69a6:	4770      	bx	lr

000d69a8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d69a8:	4770      	bx	lr

000d69aa <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d69aa:	2100      	movs	r1, #0
   d69ac:	7c00      	ldrb	r0, [r0, #16]
   d69ae:	f7ff ba83 	b.w	d5eb8 <HAL_USB_USART_Receive_Data>

000d69b2 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d69b2:	2101      	movs	r1, #1
   d69b4:	7c00      	ldrb	r0, [r0, #16]
   d69b6:	f7ff ba7f 	b.w	d5eb8 <HAL_USB_USART_Receive_Data>

000d69ba <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d69ba:	7c00      	ldrb	r0, [r0, #16]
   d69bc:	f7ff ba74 	b.w	d5ea8 <HAL_USB_USART_Available_Data_For_Write>

000d69c0 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d69c0:	7c00      	ldrb	r0, [r0, #16]
   d69c2:	f7ff ba69 	b.w	d5e98 <HAL_USB_USART_Available_Data>

000d69c6 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d69c6:	b538      	push	{r3, r4, r5, lr}
   d69c8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d69ca:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d69cc:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d69ce:	f7ff fa6b 	bl	d5ea8 <HAL_USB_USART_Available_Data_For_Write>
   d69d2:	2800      	cmp	r0, #0
   d69d4:	dc01      	bgt.n	d69da <_ZN9USBSerial5writeEh+0x14>
   d69d6:	7c60      	ldrb	r0, [r4, #17]
   d69d8:	b120      	cbz	r0, d69e4 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d69da:	4629      	mov	r1, r5
   d69dc:	7c20      	ldrb	r0, [r4, #16]
   d69de:	f7ff fa73 	bl	d5ec8 <HAL_USB_USART_Send_Data>
    return 1;
   d69e2:	2001      	movs	r0, #1
  }
  return 0;
}
   d69e4:	bd38      	pop	{r3, r4, r5, pc}

000d69e6 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d69e6:	7c00      	ldrb	r0, [r0, #16]
   d69e8:	f7ff ba76 	b.w	d5ed8 <HAL_USB_USART_Flush_Data>

000d69ec <_ZN9USBSerialD0Ev>:
   d69ec:	b510      	push	{r4, lr}
   d69ee:	4604      	mov	r4, r0
   d69f0:	f7fd fb53 	bl	d409a <_ZdlPv>
   d69f4:	4620      	mov	r0, r4
   d69f6:	bd10      	pop	{r4, pc}

000d69f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d69f8:	b510      	push	{r4, lr}
   d69fa:	4604      	mov	r4, r0
   d69fc:	2300      	movs	r3, #0
   d69fe:	6063      	str	r3, [r4, #4]
   d6a00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6a04:	60a3      	str	r3, [r4, #8]
   d6a06:	4b05      	ldr	r3, [pc, #20]	; (d6a1c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6a08:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d6a0a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6a0c:	4608      	mov	r0, r1
{
  _serial = serial;
   d6a0e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6a10:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6a12:	4611      	mov	r1, r2
   d6a14:	f7ff fa30 	bl	d5e78 <HAL_USB_USART_Init>
}
   d6a18:	4620      	mov	r0, r4
   d6a1a:	bd10      	pop	{r4, pc}
   d6a1c:	000d7450 	.word	0x000d7450

000d6a20 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6a20:	2200      	movs	r2, #0
   d6a22:	7c00      	ldrb	r0, [r0, #16]
   d6a24:	f7ff ba30 	b.w	d5e88 <HAL_USB_USART_Begin>

000d6a28 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
   d6a28:	7c00      	ldrb	r0, [r0, #16]
   d6a2a:	f7ff ba5d 	b.w	d5ee8 <HAL_USB_USART_Is_Enabled>

000d6a2e <_ZN9USBSerialcvbEv>:
{
	return HAL_USB_USART_Receive_Data(_serial, true);
}

USBSerial::operator bool() {
  return isEnabled();
   d6a2e:	f7ff bffb 	b.w	d6a28 <_ZN9USBSerial9isEnabledEv>

000d6a32 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6a32:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6a34:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6a36:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6a38:	2100      	movs	r1, #0
   d6a3a:	f000 fab1 	bl	d6fa0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6a3e:	4620      	mov	r0, r4
   d6a40:	bd10      	pop	{r4, pc}
	...

000d6a44 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6a44:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6a46:	4d0e      	ldr	r5, [pc, #56]	; (d6a80 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6a48:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6a4a:	a801      	add	r0, sp, #4
   d6a4c:	f7ff fff1 	bl	d6a32 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6a50:	6829      	ldr	r1, [r5, #0]
   d6a52:	f011 0401 	ands.w	r4, r1, #1
   d6a56:	d110      	bne.n	d6a7a <_Z16_fetch_usbserialv+0x36>
   d6a58:	4628      	mov	r0, r5
   d6a5a:	f7fd fb22 	bl	d40a2 <__cxa_guard_acquire>
   d6a5e:	b160      	cbz	r0, d6a7a <_Z16_fetch_usbserialv+0x36>
   d6a60:	aa01      	add	r2, sp, #4
   d6a62:	4621      	mov	r1, r4
   d6a64:	4807      	ldr	r0, [pc, #28]	; (d6a84 <_Z16_fetch_usbserialv+0x40>)
   d6a66:	f7ff ffc7 	bl	d69f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6a6a:	4628      	mov	r0, r5
   d6a6c:	f7fd fb1e 	bl	d40ac <__cxa_guard_release>
   d6a70:	4a05      	ldr	r2, [pc, #20]	; (d6a88 <_Z16_fetch_usbserialv+0x44>)
   d6a72:	4906      	ldr	r1, [pc, #24]	; (d6a8c <_Z16_fetch_usbserialv+0x48>)
   d6a74:	4803      	ldr	r0, [pc, #12]	; (d6a84 <_Z16_fetch_usbserialv+0x40>)
   d6a76:	f000 f91d 	bl	d6cb4 <__aeabi_atexit>
	return _usbserial;
}
   d6a7a:	4802      	ldr	r0, [pc, #8]	; (d6a84 <_Z16_fetch_usbserialv+0x40>)
   d6a7c:	b007      	add	sp, #28
   d6a7e:	bd30      	pop	{r4, r5, pc}
   d6a80:	2003e6f8 	.word	0x2003e6f8
   d6a84:	2003e6fc 	.word	0x2003e6fc
   d6a88:	2003dfb0 	.word	0x2003dfb0
   d6a8c:	000d69a9 	.word	0x000d69a9

000d6a90 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6a90:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6a92:	4b0c      	ldr	r3, [pc, #48]	; (d6ac4 <serialEventRun+0x34>)
   d6a94:	b133      	cbz	r3, d6aa4 <serialEventRun+0x14>
   d6a96:	f7ff ffd5 	bl	d6a44 <_Z16_fetch_usbserialv>
   d6a9a:	6803      	ldr	r3, [r0, #0]
   d6a9c:	691b      	ldr	r3, [r3, #16]
   d6a9e:	4798      	blx	r3
   d6aa0:	2800      	cmp	r0, #0
   d6aa2:	dc09      	bgt.n	d6ab8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6aa4:	4b08      	ldr	r3, [pc, #32]	; (d6ac8 <serialEventRun+0x38>)
   d6aa6:	b163      	cbz	r3, d6ac2 <serialEventRun+0x32>
   d6aa8:	f7ff ff3c 	bl	d6924 <_Z22__fetch_global_Serial1v>
   d6aac:	6803      	ldr	r3, [r0, #0]
   d6aae:	691b      	ldr	r3, [r3, #16]
   d6ab0:	4798      	blx	r3
   d6ab2:	2800      	cmp	r0, #0
   d6ab4:	dc03      	bgt.n	d6abe <serialEventRun+0x2e>
   d6ab6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6ab8:	f3af 8000 	nop.w
   d6abc:	e7f2      	b.n	d6aa4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6abe:	f3af 8000 	nop.w
   d6ac2:	bd08      	pop	{r3, pc}
	...

000d6acc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6acc:	b508      	push	{r3, lr}
	serialEventRun();
   d6ace:	f7ff ffdf 	bl	d6a90 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6ad2:	f7ff f8c9 	bl	d5c68 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6ad6:	4b01      	ldr	r3, [pc, #4]	; (d6adc <_post_loop+0x10>)
   d6ad8:	6018      	str	r0, [r3, #0]
   d6ada:	bd08      	pop	{r3, pc}
   d6adc:	2003e714 	.word	0x2003e714

000d6ae0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6ae0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6ae2:	2300      	movs	r3, #0
   d6ae4:	9300      	str	r3, [sp, #0]
   d6ae6:	461a      	mov	r2, r3
   d6ae8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6aec:	f7ff fa1e 	bl	d5f2c <system_ctrl_set_result>
}
   d6af0:	b003      	add	sp, #12
   d6af2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6af8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6af8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6afa:	8843      	ldrh	r3, [r0, #2]
   d6afc:	2b0a      	cmp	r3, #10
   d6afe:	d008      	beq.n	d6b12 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6b00:	2b50      	cmp	r3, #80	; 0x50
   d6b02:	d109      	bne.n	d6b18 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6b04:	4b09      	ldr	r3, [pc, #36]	; (d6b2c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6b06:	681b      	ldr	r3, [r3, #0]
   d6b08:	b13b      	cbz	r3, d6b1a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6b0a:	b003      	add	sp, #12
   d6b0c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6b10:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6b12:	f7ff ffe5 	bl	d6ae0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6b16:	e006      	b.n	d6b26 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6b18:	2300      	movs	r3, #0
   d6b1a:	9300      	str	r3, [sp, #0]
   d6b1c:	461a      	mov	r2, r3
   d6b1e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6b22:	f7ff fa03 	bl	d5f2c <system_ctrl_set_result>
        break;
    }
}
   d6b26:	b003      	add	sp, #12
   d6b28:	f85d fb04 	ldr.w	pc, [sp], #4
   d6b2c:	2003e710 	.word	0x2003e710

000d6b30 <module_user_init_hook>:

void module_user_init_hook()
{
   d6b30:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6b32:	f7ff f889 	bl	d5c48 <HAL_RNG_GetRandomNumber>
   d6b36:	4604      	mov	r4, r0
    srand(seed);
   d6b38:	f000 fa3a 	bl	d6fb0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6b3c:	4b07      	ldr	r3, [pc, #28]	; (d6b5c <module_user_init_hook+0x2c>)
   d6b3e:	b113      	cbz	r3, d6b46 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6b40:	4620      	mov	r0, r4
   d6b42:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6b46:	2100      	movs	r1, #0
   d6b48:	4804      	ldr	r0, [pc, #16]	; (d6b5c <module_user_init_hook+0x2c>)
   d6b4a:	f7ff fa01 	bl	d5f50 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6b4e:	2100      	movs	r1, #0
   d6b50:	4803      	ldr	r0, [pc, #12]	; (d6b60 <module_user_init_hook+0x30>)
}
   d6b52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6b56:	f7ff b9df 	b.w	d5f18 <system_ctrl_set_app_request_handler>
   d6b5a:	bf00      	nop
   d6b5c:	00000000 	.word	0x00000000
   d6b60:	000d6af9 	.word	0x000d6af9

000d6b64 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6b64:	b510      	push	{r4, lr}
   d6b66:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6b68:	480f      	ldr	r0, [pc, #60]	; (d6ba8 <pinAvailable+0x44>)
   d6b6a:	f7ff fe7e 	bl	d686a <_ZN8SPIClass9isEnabledEv>
   d6b6e:	b128      	cbz	r0, d6b7c <pinAvailable+0x18>
   d6b70:	f1a4 030b 	sub.w	r3, r4, #11
   d6b74:	2b02      	cmp	r3, #2
   d6b76:	d801      	bhi.n	d6b7c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6b78:	2000      	movs	r0, #0
   d6b7a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6b7c:	f000 f858 	bl	d6c30 <_Z19__fetch_global_Wirev>
   d6b80:	f7ff fb34 	bl	d61ec <_ZN7TwoWire9isEnabledEv>
   d6b84:	b108      	cbz	r0, d6b8a <pinAvailable+0x26>
   d6b86:	2c01      	cmp	r4, #1
   d6b88:	d9f6      	bls.n	d6b78 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6b8a:	f7ff fecb 	bl	d6924 <_Z22__fetch_global_Serial1v>
   d6b8e:	f7ff fec5 	bl	d691c <_ZN11USARTSerial9isEnabledEv>
   d6b92:	b118      	cbz	r0, d6b9c <pinAvailable+0x38>
   d6b94:	f1a4 0309 	sub.w	r3, r4, #9
   d6b98:	2b01      	cmp	r3, #1
   d6b9a:	d9ed      	bls.n	d6b78 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6b9c:	2c23      	cmp	r4, #35	; 0x23
   d6b9e:	bf8c      	ite	hi
   d6ba0:	2000      	movhi	r0, #0
   d6ba2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6ba4:	bd10      	pop	{r4, pc}
   d6ba6:	bf00      	nop
   d6ba8:	2003e730 	.word	0x2003e730

000d6bac <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6bac:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6bae:	b538      	push	{r3, r4, r5, lr}
   d6bb0:	4604      	mov	r4, r0
   d6bb2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6bb4:	d80a      	bhi.n	d6bcc <pinMode+0x20>
   d6bb6:	29ff      	cmp	r1, #255	; 0xff
   d6bb8:	d008      	beq.n	d6bcc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6bba:	f7ff ffd3 	bl	d6b64 <pinAvailable>
   d6bbe:	b128      	cbz	r0, d6bcc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6bc0:	4629      	mov	r1, r5
   d6bc2:	4620      	mov	r0, r4
}
   d6bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6bc8:	f7ff b866 	b.w	d5c98 <HAL_Pin_Mode>
   d6bcc:	bd38      	pop	{r3, r4, r5, pc}

000d6bce <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6bce:	b538      	push	{r3, r4, r5, lr}
   d6bd0:	4604      	mov	r4, r0
   d6bd2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6bd4:	f7ff f868 	bl	d5ca8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6bd8:	28ff      	cmp	r0, #255	; 0xff
   d6bda:	d010      	beq.n	d6bfe <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6bdc:	2806      	cmp	r0, #6
   d6bde:	d804      	bhi.n	d6bea <digitalWrite+0x1c>
   d6be0:	234d      	movs	r3, #77	; 0x4d
   d6be2:	fa23 f000 	lsr.w	r0, r3, r0
   d6be6:	07c3      	lsls	r3, r0, #31
   d6be8:	d409      	bmi.n	d6bfe <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6bea:	4620      	mov	r0, r4
   d6bec:	f7ff ffba 	bl	d6b64 <pinAvailable>
   d6bf0:	b128      	cbz	r0, d6bfe <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6bf2:	4629      	mov	r1, r5
   d6bf4:	4620      	mov	r0, r4
}
   d6bf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6bfa:	f7ff b85d 	b.w	d5cb8 <HAL_GPIO_Write>
   d6bfe:	bd38      	pop	{r3, r4, r5, pc}

000d6c00 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6c00:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d6c02:	b510      	push	{r4, lr}
   d6c04:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6c06:	bf9c      	itt	ls
   d6c08:	340e      	addls	r4, #14
   d6c0a:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6c0c:	4620      	mov	r0, r4
   d6c0e:	f7ff ffa9 	bl	d6b64 <pinAvailable>
   d6c12:	b150      	cbz	r0, d6c2a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6c14:	2103      	movs	r1, #3
   d6c16:	4620      	mov	r0, r4
   d6c18:	f7ff f836 	bl	d5c88 <HAL_Validate_Pin_Function>
   d6c1c:	2803      	cmp	r0, #3
   d6c1e:	d104      	bne.n	d6c2a <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6c20:	4620      	mov	r0, r4
}
   d6c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6c26:	f7ff b84f 	b.w	d5cc8 <HAL_ADC_Read>
}
   d6c2a:	2000      	movs	r0, #0
   d6c2c:	bd10      	pop	{r4, pc}
	...

000d6c30 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d6c30:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d6c32:	4d0b      	ldr	r5, [pc, #44]	; (d6c60 <_Z19__fetch_global_Wirev+0x30>)
   d6c34:	6829      	ldr	r1, [r5, #0]
   d6c36:	f011 0401 	ands.w	r4, r1, #1
   d6c3a:	d10f      	bne.n	d6c5c <_Z19__fetch_global_Wirev+0x2c>
   d6c3c:	4628      	mov	r0, r5
   d6c3e:	f7fd fa30 	bl	d40a2 <__cxa_guard_acquire>
   d6c42:	b158      	cbz	r0, d6c5c <_Z19__fetch_global_Wirev+0x2c>
   d6c44:	4621      	mov	r1, r4
   d6c46:	4807      	ldr	r0, [pc, #28]	; (d6c64 <_Z19__fetch_global_Wirev+0x34>)
   d6c48:	f7ff fabe 	bl	d61c8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6c4c:	4628      	mov	r0, r5
   d6c4e:	f7fd fa2d 	bl	d40ac <__cxa_guard_release>
   d6c52:	4a05      	ldr	r2, [pc, #20]	; (d6c68 <_Z19__fetch_global_Wirev+0x38>)
   d6c54:	4905      	ldr	r1, [pc, #20]	; (d6c6c <_Z19__fetch_global_Wirev+0x3c>)
   d6c56:	4803      	ldr	r0, [pc, #12]	; (d6c64 <_Z19__fetch_global_Wirev+0x34>)
   d6c58:	f000 f82c 	bl	d6cb4 <__aeabi_atexit>
	return wire;
}
   d6c5c:	4801      	ldr	r0, [pc, #4]	; (d6c64 <_Z19__fetch_global_Wirev+0x34>)
   d6c5e:	bd38      	pop	{r3, r4, r5, pc}
   d6c60:	2003e718 	.word	0x2003e718
   d6c64:	2003e71c 	.word	0x2003e71c
   d6c68:	2003dfb0 	.word	0x2003dfb0
   d6c6c:	000d6171 	.word	0x000d6171

000d6c70 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6c70:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6c72:	4c0c      	ldr	r4, [pc, #48]	; (d6ca4 <_GLOBAL__sub_I_SPI+0x34>)
   d6c74:	4e0c      	ldr	r6, [pc, #48]	; (d6ca8 <_GLOBAL__sub_I_SPI+0x38>)
   d6c76:	4d0d      	ldr	r5, [pc, #52]	; (d6cac <_GLOBAL__sub_I_SPI+0x3c>)
   d6c78:	2100      	movs	r1, #0
   d6c7a:	4620      	mov	r0, r4
   d6c7c:	f7ff fd3a 	bl	d66f4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6c80:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6c82:	4c0b      	ldr	r4, [pc, #44]	; (d6cb0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6c84:	4632      	mov	r2, r6
   d6c86:	4629      	mov	r1, r5
   d6c88:	f000 f814 	bl	d6cb4 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6c8c:	2101      	movs	r1, #1
   d6c8e:	4620      	mov	r0, r4
   d6c90:	f7ff fd30 	bl	d66f4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6c94:	4632      	mov	r2, r6
   d6c96:	4629      	mov	r1, r5
   d6c98:	4620      	mov	r0, r4
   d6c9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6c9e:	f000 b809 	b.w	d6cb4 <__aeabi_atexit>
   d6ca2:	bf00      	nop
   d6ca4:	2003e730 	.word	0x2003e730
   d6ca8:	2003dfb0 	.word	0x2003dfb0
   d6cac:	000d66e5 	.word	0x000d66e5
   d6cb0:	2003e740 	.word	0x2003e740

000d6cb4 <__aeabi_atexit>:
   d6cb4:	460b      	mov	r3, r1
   d6cb6:	4601      	mov	r1, r0
   d6cb8:	4618      	mov	r0, r3
   d6cba:	f000 b949 	b.w	d6f50 <__cxa_atexit>
	...

000d6cc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6cc0:	4b24      	ldr	r3, [pc, #144]	; (d6d54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6cc2:	681a      	ldr	r2, [r3, #0]
   d6cc4:	07d0      	lsls	r0, r2, #31
   d6cc6:	bf5c      	itt	pl
   d6cc8:	2201      	movpl	r2, #1
   d6cca:	601a      	strpl	r2, [r3, #0]
   d6ccc:	4b22      	ldr	r3, [pc, #136]	; (d6d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6cce:	681a      	ldr	r2, [r3, #0]
   d6cd0:	07d1      	lsls	r1, r2, #31
   d6cd2:	bf5c      	itt	pl
   d6cd4:	2201      	movpl	r2, #1
   d6cd6:	601a      	strpl	r2, [r3, #0]
   d6cd8:	4b20      	ldr	r3, [pc, #128]	; (d6d5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6cda:	681a      	ldr	r2, [r3, #0]
   d6cdc:	07d2      	lsls	r2, r2, #31
   d6cde:	bf5c      	itt	pl
   d6ce0:	2201      	movpl	r2, #1
   d6ce2:	601a      	strpl	r2, [r3, #0]
   d6ce4:	4b1e      	ldr	r3, [pc, #120]	; (d6d60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6ce6:	681a      	ldr	r2, [r3, #0]
   d6ce8:	07d0      	lsls	r0, r2, #31
   d6cea:	bf5c      	itt	pl
   d6cec:	2201      	movpl	r2, #1
   d6cee:	601a      	strpl	r2, [r3, #0]
   d6cf0:	4b1c      	ldr	r3, [pc, #112]	; (d6d64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6cf2:	681a      	ldr	r2, [r3, #0]
   d6cf4:	07d1      	lsls	r1, r2, #31
   d6cf6:	bf5c      	itt	pl
   d6cf8:	2201      	movpl	r2, #1
   d6cfa:	601a      	strpl	r2, [r3, #0]
   d6cfc:	4b1a      	ldr	r3, [pc, #104]	; (d6d68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6cfe:	681a      	ldr	r2, [r3, #0]
   d6d00:	07d2      	lsls	r2, r2, #31
   d6d02:	bf5c      	itt	pl
   d6d04:	2201      	movpl	r2, #1
   d6d06:	601a      	strpl	r2, [r3, #0]
   d6d08:	4b18      	ldr	r3, [pc, #96]	; (d6d6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6d0a:	681a      	ldr	r2, [r3, #0]
   d6d0c:	07d0      	lsls	r0, r2, #31
   d6d0e:	bf5c      	itt	pl
   d6d10:	2201      	movpl	r2, #1
   d6d12:	601a      	strpl	r2, [r3, #0]
   d6d14:	4b16      	ldr	r3, [pc, #88]	; (d6d70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6d16:	681a      	ldr	r2, [r3, #0]
   d6d18:	07d1      	lsls	r1, r2, #31
   d6d1a:	bf5c      	itt	pl
   d6d1c:	2201      	movpl	r2, #1
   d6d1e:	601a      	strpl	r2, [r3, #0]
   d6d20:	4b14      	ldr	r3, [pc, #80]	; (d6d74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6d22:	681a      	ldr	r2, [r3, #0]
   d6d24:	07d2      	lsls	r2, r2, #31
   d6d26:	bf5c      	itt	pl
   d6d28:	2201      	movpl	r2, #1
   d6d2a:	601a      	strpl	r2, [r3, #0]
   d6d2c:	4b12      	ldr	r3, [pc, #72]	; (d6d78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6d2e:	681a      	ldr	r2, [r3, #0]
   d6d30:	07d0      	lsls	r0, r2, #31
   d6d32:	bf5c      	itt	pl
   d6d34:	2201      	movpl	r2, #1
   d6d36:	601a      	strpl	r2, [r3, #0]
   d6d38:	4b10      	ldr	r3, [pc, #64]	; (d6d7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6d3a:	681a      	ldr	r2, [r3, #0]
   d6d3c:	07d1      	lsls	r1, r2, #31
   d6d3e:	bf5c      	itt	pl
   d6d40:	2201      	movpl	r2, #1
   d6d42:	601a      	strpl	r2, [r3, #0]
   d6d44:	4b0e      	ldr	r3, [pc, #56]	; (d6d80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6d46:	681a      	ldr	r2, [r3, #0]
   d6d48:	07d2      	lsls	r2, r2, #31
   d6d4a:	bf5c      	itt	pl
   d6d4c:	2201      	movpl	r2, #1
   d6d4e:	601a      	strpl	r2, [r3, #0]
   d6d50:	4770      	bx	lr
   d6d52:	bf00      	nop
   d6d54:	2003e77c 	.word	0x2003e77c
   d6d58:	2003e778 	.word	0x2003e778
   d6d5c:	2003e774 	.word	0x2003e774
   d6d60:	2003e770 	.word	0x2003e770
   d6d64:	2003e76c 	.word	0x2003e76c
   d6d68:	2003e768 	.word	0x2003e768
   d6d6c:	2003e764 	.word	0x2003e764
   d6d70:	2003e760 	.word	0x2003e760
   d6d74:	2003e75c 	.word	0x2003e75c
   d6d78:	2003e758 	.word	0x2003e758
   d6d7c:	2003e754 	.word	0x2003e754
   d6d80:	2003e750 	.word	0x2003e750

000d6d84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6d84:	4b18      	ldr	r3, [pc, #96]	; (d6de8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6d86:	681a      	ldr	r2, [r3, #0]
   d6d88:	07d1      	lsls	r1, r2, #31
   d6d8a:	bf5c      	itt	pl
   d6d8c:	2201      	movpl	r2, #1
   d6d8e:	601a      	strpl	r2, [r3, #0]
   d6d90:	4b16      	ldr	r3, [pc, #88]	; (d6dec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6d92:	681a      	ldr	r2, [r3, #0]
   d6d94:	07d2      	lsls	r2, r2, #31
   d6d96:	bf5c      	itt	pl
   d6d98:	2201      	movpl	r2, #1
   d6d9a:	601a      	strpl	r2, [r3, #0]
   d6d9c:	4b14      	ldr	r3, [pc, #80]	; (d6df0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6d9e:	681a      	ldr	r2, [r3, #0]
   d6da0:	07d0      	lsls	r0, r2, #31
   d6da2:	bf5c      	itt	pl
   d6da4:	2201      	movpl	r2, #1
   d6da6:	601a      	strpl	r2, [r3, #0]
   d6da8:	4b12      	ldr	r3, [pc, #72]	; (d6df4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6daa:	681a      	ldr	r2, [r3, #0]
   d6dac:	07d1      	lsls	r1, r2, #31
   d6dae:	bf5c      	itt	pl
   d6db0:	2201      	movpl	r2, #1
   d6db2:	601a      	strpl	r2, [r3, #0]
   d6db4:	4b10      	ldr	r3, [pc, #64]	; (d6df8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6db6:	681a      	ldr	r2, [r3, #0]
   d6db8:	07d2      	lsls	r2, r2, #31
   d6dba:	bf5c      	itt	pl
   d6dbc:	2201      	movpl	r2, #1
   d6dbe:	601a      	strpl	r2, [r3, #0]
   d6dc0:	4b0e      	ldr	r3, [pc, #56]	; (d6dfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6dc2:	681a      	ldr	r2, [r3, #0]
   d6dc4:	07d0      	lsls	r0, r2, #31
   d6dc6:	bf5c      	itt	pl
   d6dc8:	2201      	movpl	r2, #1
   d6dca:	601a      	strpl	r2, [r3, #0]
   d6dcc:	4b0c      	ldr	r3, [pc, #48]	; (d6e00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6dce:	681a      	ldr	r2, [r3, #0]
   d6dd0:	07d1      	lsls	r1, r2, #31
   d6dd2:	bf5c      	itt	pl
   d6dd4:	2201      	movpl	r2, #1
   d6dd6:	601a      	strpl	r2, [r3, #0]
   d6dd8:	4b0a      	ldr	r3, [pc, #40]	; (d6e04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6dda:	681a      	ldr	r2, [r3, #0]
   d6ddc:	07d2      	lsls	r2, r2, #31
   d6dde:	bf5c      	itt	pl
   d6de0:	2201      	movpl	r2, #1
   d6de2:	601a      	strpl	r2, [r3, #0]
   d6de4:	4770      	bx	lr
   d6de6:	bf00      	nop
   d6de8:	2003e79c 	.word	0x2003e79c
   d6dec:	2003e798 	.word	0x2003e798
   d6df0:	2003e794 	.word	0x2003e794
   d6df4:	2003e790 	.word	0x2003e790
   d6df8:	2003e78c 	.word	0x2003e78c
   d6dfc:	2003e788 	.word	0x2003e788
   d6e00:	2003e784 	.word	0x2003e784
   d6e04:	2003e780 	.word	0x2003e780

000d6e08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6e08:	4b18      	ldr	r3, [pc, #96]	; (d6e6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6e0a:	681a      	ldr	r2, [r3, #0]
   d6e0c:	07d1      	lsls	r1, r2, #31
   d6e0e:	bf5c      	itt	pl
   d6e10:	2201      	movpl	r2, #1
   d6e12:	601a      	strpl	r2, [r3, #0]
   d6e14:	4b16      	ldr	r3, [pc, #88]	; (d6e70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6e16:	681a      	ldr	r2, [r3, #0]
   d6e18:	07d2      	lsls	r2, r2, #31
   d6e1a:	bf5c      	itt	pl
   d6e1c:	2201      	movpl	r2, #1
   d6e1e:	601a      	strpl	r2, [r3, #0]
   d6e20:	4b14      	ldr	r3, [pc, #80]	; (d6e74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6e22:	681a      	ldr	r2, [r3, #0]
   d6e24:	07d0      	lsls	r0, r2, #31
   d6e26:	bf5c      	itt	pl
   d6e28:	2201      	movpl	r2, #1
   d6e2a:	601a      	strpl	r2, [r3, #0]
   d6e2c:	4b12      	ldr	r3, [pc, #72]	; (d6e78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6e2e:	681a      	ldr	r2, [r3, #0]
   d6e30:	07d1      	lsls	r1, r2, #31
   d6e32:	bf5c      	itt	pl
   d6e34:	2201      	movpl	r2, #1
   d6e36:	601a      	strpl	r2, [r3, #0]
   d6e38:	4b10      	ldr	r3, [pc, #64]	; (d6e7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6e3a:	681a      	ldr	r2, [r3, #0]
   d6e3c:	07d2      	lsls	r2, r2, #31
   d6e3e:	bf5c      	itt	pl
   d6e40:	2201      	movpl	r2, #1
   d6e42:	601a      	strpl	r2, [r3, #0]
   d6e44:	4b0e      	ldr	r3, [pc, #56]	; (d6e80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6e46:	681a      	ldr	r2, [r3, #0]
   d6e48:	07d0      	lsls	r0, r2, #31
   d6e4a:	bf5c      	itt	pl
   d6e4c:	2201      	movpl	r2, #1
   d6e4e:	601a      	strpl	r2, [r3, #0]
   d6e50:	4b0c      	ldr	r3, [pc, #48]	; (d6e84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6e52:	681a      	ldr	r2, [r3, #0]
   d6e54:	07d1      	lsls	r1, r2, #31
   d6e56:	bf5c      	itt	pl
   d6e58:	2201      	movpl	r2, #1
   d6e5a:	601a      	strpl	r2, [r3, #0]
   d6e5c:	4b0a      	ldr	r3, [pc, #40]	; (d6e88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6e5e:	681a      	ldr	r2, [r3, #0]
   d6e60:	07d2      	lsls	r2, r2, #31
   d6e62:	bf5c      	itt	pl
   d6e64:	2201      	movpl	r2, #1
   d6e66:	601a      	strpl	r2, [r3, #0]
   d6e68:	4770      	bx	lr
   d6e6a:	bf00      	nop
   d6e6c:	2003e7bc 	.word	0x2003e7bc
   d6e70:	2003e7b8 	.word	0x2003e7b8
   d6e74:	2003e7b4 	.word	0x2003e7b4
   d6e78:	2003e7b0 	.word	0x2003e7b0
   d6e7c:	2003e7ac 	.word	0x2003e7ac
   d6e80:	2003e7a8 	.word	0x2003e7a8
   d6e84:	2003e7a4 	.word	0x2003e7a4
   d6e88:	2003e7a0 	.word	0x2003e7a0

000d6e8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6e8c:	4b24      	ldr	r3, [pc, #144]	; (d6f20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6e8e:	681a      	ldr	r2, [r3, #0]
   d6e90:	07d0      	lsls	r0, r2, #31
   d6e92:	bf5c      	itt	pl
   d6e94:	2201      	movpl	r2, #1
   d6e96:	601a      	strpl	r2, [r3, #0]
   d6e98:	4b22      	ldr	r3, [pc, #136]	; (d6f24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6e9a:	681a      	ldr	r2, [r3, #0]
   d6e9c:	07d1      	lsls	r1, r2, #31
   d6e9e:	bf5c      	itt	pl
   d6ea0:	2201      	movpl	r2, #1
   d6ea2:	601a      	strpl	r2, [r3, #0]
   d6ea4:	4b20      	ldr	r3, [pc, #128]	; (d6f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6ea6:	681a      	ldr	r2, [r3, #0]
   d6ea8:	07d2      	lsls	r2, r2, #31
   d6eaa:	bf5c      	itt	pl
   d6eac:	2201      	movpl	r2, #1
   d6eae:	601a      	strpl	r2, [r3, #0]
   d6eb0:	4b1e      	ldr	r3, [pc, #120]	; (d6f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6eb2:	681a      	ldr	r2, [r3, #0]
   d6eb4:	07d0      	lsls	r0, r2, #31
   d6eb6:	bf5c      	itt	pl
   d6eb8:	2201      	movpl	r2, #1
   d6eba:	601a      	strpl	r2, [r3, #0]
   d6ebc:	4b1c      	ldr	r3, [pc, #112]	; (d6f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6ebe:	681a      	ldr	r2, [r3, #0]
   d6ec0:	07d1      	lsls	r1, r2, #31
   d6ec2:	bf5c      	itt	pl
   d6ec4:	2201      	movpl	r2, #1
   d6ec6:	601a      	strpl	r2, [r3, #0]
   d6ec8:	4b1a      	ldr	r3, [pc, #104]	; (d6f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6eca:	681a      	ldr	r2, [r3, #0]
   d6ecc:	07d2      	lsls	r2, r2, #31
   d6ece:	bf5c      	itt	pl
   d6ed0:	2201      	movpl	r2, #1
   d6ed2:	601a      	strpl	r2, [r3, #0]
   d6ed4:	4b18      	ldr	r3, [pc, #96]	; (d6f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6ed6:	681a      	ldr	r2, [r3, #0]
   d6ed8:	07d0      	lsls	r0, r2, #31
   d6eda:	bf5c      	itt	pl
   d6edc:	2201      	movpl	r2, #1
   d6ede:	601a      	strpl	r2, [r3, #0]
   d6ee0:	4b16      	ldr	r3, [pc, #88]	; (d6f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6ee2:	681a      	ldr	r2, [r3, #0]
   d6ee4:	07d1      	lsls	r1, r2, #31
   d6ee6:	bf5c      	itt	pl
   d6ee8:	2201      	movpl	r2, #1
   d6eea:	601a      	strpl	r2, [r3, #0]
   d6eec:	4b14      	ldr	r3, [pc, #80]	; (d6f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6eee:	681a      	ldr	r2, [r3, #0]
   d6ef0:	07d2      	lsls	r2, r2, #31
   d6ef2:	bf5c      	itt	pl
   d6ef4:	2201      	movpl	r2, #1
   d6ef6:	601a      	strpl	r2, [r3, #0]
   d6ef8:	4b12      	ldr	r3, [pc, #72]	; (d6f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6efa:	681a      	ldr	r2, [r3, #0]
   d6efc:	07d0      	lsls	r0, r2, #31
   d6efe:	bf5c      	itt	pl
   d6f00:	2201      	movpl	r2, #1
   d6f02:	601a      	strpl	r2, [r3, #0]
   d6f04:	4b10      	ldr	r3, [pc, #64]	; (d6f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6f06:	681a      	ldr	r2, [r3, #0]
   d6f08:	07d1      	lsls	r1, r2, #31
   d6f0a:	bf5c      	itt	pl
   d6f0c:	2201      	movpl	r2, #1
   d6f0e:	601a      	strpl	r2, [r3, #0]
   d6f10:	4b0e      	ldr	r3, [pc, #56]	; (d6f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6f12:	681a      	ldr	r2, [r3, #0]
   d6f14:	07d2      	lsls	r2, r2, #31
   d6f16:	bf5c      	itt	pl
   d6f18:	2201      	movpl	r2, #1
   d6f1a:	601a      	strpl	r2, [r3, #0]
   d6f1c:	4770      	bx	lr
   d6f1e:	bf00      	nop
   d6f20:	2003e7ec 	.word	0x2003e7ec
   d6f24:	2003e7e8 	.word	0x2003e7e8
   d6f28:	2003e7e4 	.word	0x2003e7e4
   d6f2c:	2003e7e0 	.word	0x2003e7e0
   d6f30:	2003e7dc 	.word	0x2003e7dc
   d6f34:	2003e7d8 	.word	0x2003e7d8
   d6f38:	2003e7d4 	.word	0x2003e7d4
   d6f3c:	2003e7d0 	.word	0x2003e7d0
   d6f40:	2003e7cc 	.word	0x2003e7cc
   d6f44:	2003e7c8 	.word	0x2003e7c8
   d6f48:	2003e7c4 	.word	0x2003e7c4
   d6f4c:	2003e7c0 	.word	0x2003e7c0

000d6f50 <__cxa_atexit>:
   d6f50:	b510      	push	{r4, lr}
   d6f52:	4c05      	ldr	r4, [pc, #20]	; (d6f68 <__cxa_atexit+0x18>)
   d6f54:	4613      	mov	r3, r2
   d6f56:	b12c      	cbz	r4, d6f64 <__cxa_atexit+0x14>
   d6f58:	460a      	mov	r2, r1
   d6f5a:	4601      	mov	r1, r0
   d6f5c:	2002      	movs	r0, #2
   d6f5e:	f3af 8000 	nop.w
   d6f62:	bd10      	pop	{r4, pc}
   d6f64:	4620      	mov	r0, r4
   d6f66:	bd10      	pop	{r4, pc}
   d6f68:	00000000 	.word	0x00000000

000d6f6c <memcmp>:
   d6f6c:	b510      	push	{r4, lr}
   d6f6e:	3901      	subs	r1, #1
   d6f70:	4402      	add	r2, r0
   d6f72:	4290      	cmp	r0, r2
   d6f74:	d007      	beq.n	d6f86 <memcmp+0x1a>
   d6f76:	f810 3b01 	ldrb.w	r3, [r0], #1
   d6f7a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6f7e:	42a3      	cmp	r3, r4
   d6f80:	d0f7      	beq.n	d6f72 <memcmp+0x6>
   d6f82:	1b18      	subs	r0, r3, r4
   d6f84:	bd10      	pop	{r4, pc}
   d6f86:	2000      	movs	r0, #0
   d6f88:	bd10      	pop	{r4, pc}

000d6f8a <memcpy>:
   d6f8a:	b510      	push	{r4, lr}
   d6f8c:	1e43      	subs	r3, r0, #1
   d6f8e:	440a      	add	r2, r1
   d6f90:	4291      	cmp	r1, r2
   d6f92:	d004      	beq.n	d6f9e <memcpy+0x14>
   d6f94:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6f98:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6f9c:	e7f8      	b.n	d6f90 <memcpy+0x6>
   d6f9e:	bd10      	pop	{r4, pc}

000d6fa0 <memset>:
   d6fa0:	4402      	add	r2, r0
   d6fa2:	4603      	mov	r3, r0
   d6fa4:	4293      	cmp	r3, r2
   d6fa6:	d002      	beq.n	d6fae <memset+0xe>
   d6fa8:	f803 1b01 	strb.w	r1, [r3], #1
   d6fac:	e7fa      	b.n	d6fa4 <memset+0x4>
   d6fae:	4770      	bx	lr

000d6fb0 <srand>:
   d6fb0:	b538      	push	{r3, r4, r5, lr}
   d6fb2:	4b12      	ldr	r3, [pc, #72]	; (d6ffc <srand+0x4c>)
   d6fb4:	681c      	ldr	r4, [r3, #0]
   d6fb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6fb8:	4605      	mov	r5, r0
   d6fba:	b9d3      	cbnz	r3, d6ff2 <srand+0x42>
   d6fbc:	2018      	movs	r0, #24
   d6fbe:	f7ff f81f 	bl	d6000 <malloc>
   d6fc2:	f243 330e 	movw	r3, #13070	; 0x330e
   d6fc6:	63a0      	str	r0, [r4, #56]	; 0x38
   d6fc8:	8003      	strh	r3, [r0, #0]
   d6fca:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6fce:	8043      	strh	r3, [r0, #2]
   d6fd0:	f241 2334 	movw	r3, #4660	; 0x1234
   d6fd4:	8083      	strh	r3, [r0, #4]
   d6fd6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6fda:	80c3      	strh	r3, [r0, #6]
   d6fdc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6fe0:	8103      	strh	r3, [r0, #8]
   d6fe2:	2305      	movs	r3, #5
   d6fe4:	8143      	strh	r3, [r0, #10]
   d6fe6:	230b      	movs	r3, #11
   d6fe8:	8183      	strh	r3, [r0, #12]
   d6fea:	2201      	movs	r2, #1
   d6fec:	2300      	movs	r3, #0
   d6fee:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6ff2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6ff4:	2200      	movs	r2, #0
   d6ff6:	611d      	str	r5, [r3, #16]
   d6ff8:	615a      	str	r2, [r3, #20]
   d6ffa:	bd38      	pop	{r3, r4, r5, pc}
   d6ffc:	2003dfac 	.word	0x2003dfac

000d7000 <strlen>:
   d7000:	4603      	mov	r3, r0
   d7002:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7006:	2a00      	cmp	r2, #0
   d7008:	d1fb      	bne.n	d7002 <strlen+0x2>
   d700a:	1a18      	subs	r0, r3, r0
   d700c:	3801      	subs	r0, #1
   d700e:	4770      	bx	lr

000d7010 <dynalib_user>:
   d7010:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7020:	0000 0000                                   ....

000d7024 <_ZTVN8particle13__SPISettingsE>:
	...
   d702c:	40d5 000d                                   .@..

000d7030 <_ZTV6SdFile>:
	...
   d7038:	40b3 000d 412d 000d 40bb 000d 40b5 000d     .@..-A...@...@..
   d7048:	6144 6174 3030 632e 7673 0000 6400 6665     Data00.csv...def
   d7058:	7561 746c 0020 534d 0042 534c 0042 533c     ault .MSB.LSB.<S
   d7068:	4950 6553 7474 6e69 7367 6420 6665 7561     PISettings defau
   d7078:	746c 003e 533c 4950 6553 7474 6e69 7367     lt>.<SPISettings
   d7088:	2520 2573 756c 2520 2073 4f4d 4544 6425      %s%lu %s MODE%d
   d7098:	003e 4453 6520 7272 726f 6f43 6564 203a     >.SD errorCode: 
   d70a8:	5830 2c00 5830 6d00 6369 6f72 0073 612c     0X.,0X.micros.,a
   d70b8:	6364 4300 6e61 7427 6120 6363 7365 2073     dc.Can't access 
   d70c8:	4453 6320 7261 2e64 4420 206f 6f6e 2074     SD card. Do not 
   d70d8:	6572 6f66 6d72 7461 002e 6f4e 6320 7261     reformat..No car
   d70e8:	2c64 7720 6f72 676e 6320 6968 2070 6573     d, wrong chip se
   d70f8:	656c 7463 7020 6e69 202c 726f 5320 4950     lect pin, or SPI
   d7108:	7020 6f72 6c62 6d65 003f 6e49 6176 696c      problem?.Invali
   d7118:	2064 6f66 6d72 7461 202c 6572 6f66 6d72     d format, reform
   d7128:	7461 5320 2e44 4300 6e61 7427 6f20 6570     at SD..Can't ope
   d7138:	206e 6f72 746f 6420 7269 6365 6f74 7972     n root directory
   d7148:	002e 6f4e 6520 7272 726f 6620 756f 646e     ..No error found
   d7158:	002e 7265 6f72 3a72 0020 7954 6570 6120     ..error: .Type a
   d7168:	796e 6320 6168 6172 7463 7265 7420 206f     ny character to 
   d7178:	7473 7261 0074 6143 276e 2074 7263 6165     start.Can't crea
   d7188:	6574 6620 6c69 2065 616e 656d 6600 6c69     te file name.fil
   d7198:	2e65 706f 6e65 4c00 676f 6967 676e 7420     e.open.Logging t
   d71a8:	3a6f 0020 7954 6570 6120 796e 6320 6168     o: .Type any cha
   d71b8:	6172 7463 7265 7420 206f 7473 706f 4d00     racter to stop.M
   d71c8:	7369 6573 2064 6164 6174 7220 6365 726f     issed data recor
   d71d8:	0064 6f44 656e 7700 6972 6574 6520 7272     d.Done.write err
   d71e8:	726f 0000                                   or..

000d71ec <_ZTVN5spark13CellularClassE>:
	...
   d71f4:	6095 000d 608b 000d 6081 000d 6037 000d     .`...`...`..7`..
   d7204:	6075 000d 6069 000d 605d 000d 6055 000d     u`..i`..]`..U`..
   d7214:	604b 000d 6041 000d 6485 000d               K`..A`...d..

000d7220 <_ZTVN5spark13EthernetClassE>:
	...
   d7228:	6151 000d 6147 000d 613d 000d 6133 000d     Qa..Ga..=a..3a..
   d7238:	6127 000d 611b 000d 610f 000d 6107 000d     'a...a...a...a..
   d7248:	60fd 000d 60f3 000d 6485 000d               .`...`...d..

000d7254 <_ZTV7TwoWire>:
	...
   d725c:	6171 000d 61bb 000d 6193 000d 6173 000d     qa...a...a..sa..
   d726c:	619b 000d 61a3 000d 61ab 000d 61b3 000d     .a...a...a...a..

000d727c <_ZTV9IPAddress>:
	...
   d7284:	6203 000d 61f5 000d 61f7 000d 0066 6e6c     .b...a...a..f.ln
   d7294:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d72a4:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
   d72b4:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
   d72c4:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
   d72d4:	6200 7561 0064 6553 6972 6c61 5300 7265     .baud.Serial.Ser
   d72e4:	6169 316c 7400 7079 0065 6170 6172 006d     ial1.type.param.
   d72f4:	6d63 0064 6469 6800 646e 7300 7274 006d     cmd.id.hnd.strm.
   d7304:	6966 746c 6c00 6c76 6100 6464 6148 646e     filt.lvl.addHand
   d7314:	656c 0072 6572 6f6d 6576 6148 646e 656c     ler.removeHandle
   d7324:	0072 6e65 6d75 6148 646e 656c 7372 4a00     r.enumHandlers.J
   d7334:	4f53 534e 7274 6165 4c6d 676f 6148 646e     SONStreamLogHand
   d7344:	656c 0072 7061 0070 6f6e 656e 7400 6172     ler.app.none.tra
   d7354:	6563 6900 666e 006f 6177 6e72 7000 6e61     ce.info.warn.pan
   d7364:	6369 6100 6c6c 0000                         ic.all..

000d736c <_ZTVN5spark9MeshClassE>:
	...
   d7374:	6347 000d 633d 000d 6333 000d 6329 000d     Gc..=c..3c..)c..
   d7384:	631d 000d 6311 000d 6305 000d 62fd 000d     .c...c...c...b..
   d7394:	62f3 000d 62e9 000d 6485 000d               .b...b...d..

000d73a0 <_ZTVN5spark12NetworkClassE>:
	...
   d73a8:	641d 000d 6427 000d 6431 000d 643b 000d     .d..'d..1d..;d..
   d73b8:	6445 000d 6451 000d 645d 000d 6469 000d     Ed..Qd..]d..id..
   d73c8:	6471 000d 647b 000d 6485 000d               qd..{d...d..

000d73d4 <_ZTV8SPIClass>:
	...
   d73dc:	66e5 000d 66e7 000d                         .f...f..

000d73e4 <_ZL14clock_divisors>:
   d73e4:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
   d73f4:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d7404:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d7414:	0000 0000                                   ....

000d7418 <_ZTV11USARTSerial>:
	...
   d7420:	689d 000d 68c1 000d 68cd 000d 651d 000d     .h...h...h...e..
   d7430:	68a9 000d 68b5 000d 68af 000d 68bb 000d     .h...h...h...h..
   d7440:	689f 000d 68a3 000d                         .h...h..

000d7448 <_ZTV9USBSerial>:
	...
   d7450:	69a9 000d 69ed 000d 69c7 000d 651d 000d     .i...i...i...e..
   d7460:	69c1 000d 69ab 000d 69b3 000d 69e7 000d     .i...i...i...i..
   d7470:	69bb 000d 69a5 000d                         .i...i..

000d7478 <__sf_fake_stdin>:
	...

000d7498 <__sf_fake_stdout>:
	...

000d74b8 <__sf_fake_stderr>:
	...
   d74d8:	0043                                        C.

000d74da <link_const_variable_data_end>:
	...

000d74dc <link_constructors_location>:
   d74dc:	000d4521 	.word	0x000d4521
   d74e0:	000d45a9 	.word	0x000d45a9
   d74e4:	000d4c69 	.word	0x000d4c69
   d74e8:	000d5279 	.word	0x000d5279
   d74ec:	000d529d 	.word	0x000d529d
   d74f0:	000d52a1 	.word	0x000d52a1
   d74f4:	000d55c5 	.word	0x000d55c5
   d74f8:	000d55c9 	.word	0x000d55c9
   d74fc:	000d55cd 	.word	0x000d55cd
   d7500:	000d55d1 	.word	0x000d55d1
   d7504:	000d55d5 	.word	0x000d55d5
   d7508:	000d5b0f 	.word	0x000d5b0f
   d750c:	000d5b13 	.word	0x000d5b13
   d7510:	000d5b17 	.word	0x000d5b17
   d7514:	000d5bbd 	.word	0x000d5bbd
   d7518:	000d5bc1 	.word	0x000d5bc1
   d751c:	000d5bc5 	.word	0x000d5bc5
   d7520:	000d60a1 	.word	0x000d60a1
   d7524:	000d615d 	.word	0x000d615d
   d7528:	000d62d9 	.word	0x000d62d9
   d752c:	000d63d1 	.word	0x000d63d1
   d7530:	000d6509 	.word	0x000d6509
   d7534:	000d66c9 	.word	0x000d66c9
   d7538:	000d6871 	.word	0x000d6871
   d753c:	000d6889 	.word	0x000d6889
   d7540:	000d6c71 	.word	0x000d6c71
   d7544:	000d6cc1 	.word	0x000d6cc1
   d7548:	000d6d85 	.word	0x000d6d85
   d754c:	000d6e09 	.word	0x000d6e09
   d7550:	000d6e8d 	.word	0x000d6e8d

000d7554 <link_constructors_end>:
	...
