
/Users/pjb/Dropbox/Makerspace/Classes/OpenCTD/OpenCTD_Particle_Boron/OpenCTD_complete_noCell/OpenCTD_complete_noCell/target/OpenCTD_complete_noCell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c18  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00018cc4  2**0
                  CONTENTS
  3 .data         00000068  2003ded0  000d8c30  0000ded0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000008b8  2003df38  2003df38  0001df38  2**3
                  ALLOC
  5 .module_info_suffix 00000028  000d8c98  000d8c98  00018c98  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d8cc0  000d8cc0  00018cc0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   0014dfe7  00000000  00000000  00018cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0001ea71  00000000  00000000  00166cab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001fb22  00000000  00000000  0018571c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002768  00000000  00000000  001a523e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00004308  00000000  00000000  001a79a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0004ca8f  00000000  00000000  001abcae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0005508a  00000000  00000000  001f873d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000df589  00000000  00000000  0024d7c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000cf8c  00000000  00000000  0032cd50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	38 87 0d 00                                         8...

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 fae2 	bl	d85f6 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 fae7 	bl	d860c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003ded0 	.word	0x2003ded0
   d4048:	000d8c30 	.word	0x000d8c30
   d404c:	2003df38 	.word	0x2003df38
   d4050:	2003df38 	.word	0x2003df38
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 fb7b 	bl	d7754 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d8c30 	.word	0x000d8c30
   d4080:	000d8ba8 	.word	0x000d8ba8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b994 	b.w	d43b0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f89b 	bl	d41c4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 bb2d 	b.w	d76f0 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f002 bc85 	b.w	d69a4 <malloc>

000d409a <_ZdlPv>:
   d409a:	f002 bc8b 	b.w	d69b4 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f002 bc89 	b.w	d69b4 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d40b2:	4770      	bx	lr

000d40b4 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d40b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40b6:	4602      	mov	r2, r0
   d40b8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d40ba:	7913      	ldrb	r3, [r2, #4]
   d40bc:	6895      	ldr	r5, [r2, #8]
   d40be:	b133      	cbz	r3, d40ce <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d40c0:	b93d      	cbnz	r5, d40d2 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d40c2:	490c      	ldr	r1, [pc, #48]	; (d40f4 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d40c4:	b004      	add	sp, #16
   d40c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d40ca:	f002 bf35 	b.w	d6f38 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d40ce:	4b0a      	ldr	r3, [pc, #40]	; (d40f8 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d40d0:	e000      	b.n	d40d4 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d40d2:	4b0a      	ldr	r3, [pc, #40]	; (d40fc <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d40d4:	7b16      	ldrb	r6, [r2, #12]
   d40d6:	4c0a      	ldr	r4, [pc, #40]	; (d4100 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d40d8:	490a      	ldr	r1, [pc, #40]	; (d4104 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d40da:	7b52      	ldrb	r2, [r2, #13]
   d40dc:	9202      	str	r2, [sp, #8]
   d40de:	2e01      	cmp	r6, #1
   d40e0:	bf08      	it	eq
   d40e2:	4621      	moveq	r1, r4
   d40e4:	9101      	str	r1, [sp, #4]
   d40e6:	9500      	str	r5, [sp, #0]
   d40e8:	4a07      	ldr	r2, [pc, #28]	; (d4108 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d40ea:	2100      	movs	r1, #0
   d40ec:	f003 f857 	bl	d719e <_ZN5Print11printf_implEbPKcz>
  }
   d40f0:	b004      	add	sp, #16
   d40f2:	bd70      	pop	{r4, r5, r6, pc}
   d40f4:	000d8781 	.word	0x000d8781
   d40f8:	000d8960 	.word	0x000d8960
   d40fc:	000d8770 	.word	0x000d8770
   d4100:	000d8779 	.word	0x000d8779
   d4104:	000d877d 	.word	0x000d877d
   d4108:	000d8797 	.word	0x000d8797

000d410c <_ZN6SdFileD0Ev>:
   d410c:	b510      	push	{r4, lr}
   d410e:	4604      	mov	r4, r0
   d4110:	f7ff ffc3 	bl	d409a <_ZdlPv>
   d4114:	4620      	mov	r0, r4
   d4116:	bd10      	pop	{r4, pc}

000d4118 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4118:	3008      	adds	r0, #8
   d411a:	f001 b94b 	b.w	d53b4 <_ZN7FatFile5writeEPKvj>

000d411e <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d411e:	b507      	push	{r0, r1, r2, lr}
   d4120:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d4122:	2201      	movs	r2, #1
   d4124:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4128:	3008      	adds	r0, #8
   d412a:	4619      	mov	r1, r3
   d412c:	f001 f942 	bl	d53b4 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d4130:	b003      	add	sp, #12
   d4132:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4138 <_Z10parse_datav>:
  delay(50);  // Wait 50 milliseconds.
}


// Parses data from the EC Circuit.
void parse_data() {
   d4138:	b508      	push	{r3, lr}

  EC = strtok(EC_data, ",");                  
   d413a:	4903      	ldr	r1, [pc, #12]	; (d4148 <_Z10parse_datav+0x10>)
   d413c:	4803      	ldr	r0, [pc, #12]	; (d414c <_Z10parse_datav+0x14>)
   d413e:	f004 fa9d 	bl	d867c <strtok>
   d4142:	4b03      	ldr	r3, [pc, #12]	; (d4150 <_Z10parse_datav+0x18>)
   d4144:	6018      	str	r0, [r3, #0]
   d4146:	bd08      	pop	{r3, pc}
   d4148:	000d87b5 	.word	0x000d87b5
   d414c:	2003dfb8 	.word	0x2003dfb8
   d4150:	2003dfb4 	.word	0x2003dfb4
   d4154:	00000000 	.word	0x00000000

000d4158 <_Z7getTempv>:

}

void getTemp(){
   d4158:	b513      	push	{r0, r1, r4, lr}
  float _temp;
  int   i = 0;
   d415a:	2400      	movs	r4, #0

  do {
    _temp = ds18b20.getTemperature();
   d415c:	2100      	movs	r1, #0
   d415e:	4816      	ldr	r0, [pc, #88]	; (d41b8 <_Z7getTempv+0x60>)
   d4160:	f000 fb06 	bl	d4770 <_ZN7DS18B2014getTemperatureEb>
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d4164:	4814      	ldr	r0, [pc, #80]	; (d41b8 <_Z7getTempv+0x60>)
void getTemp(){
  float _temp;
  int   i = 0;

  do {
    _temp = ds18b20.getTemperature();
   d4166:	ed8d 0a01 	vstr	s0, [sp, #4]
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
   d416a:	f000 fb1d 	bl	d47a8 <_ZN7DS18B208crcCheckEv>
   d416e:	ed9d 0a01 	vldr	s0, [sp, #4]
   d4172:	b980      	cbnz	r0, d4196 <_Z7getTempv+0x3e>
   d4174:	3401      	adds	r4, #1
   d4176:	2c05      	cmp	r4, #5
   d4178:	d1f0      	bne.n	d415c <_Z7getTempv+0x4>

  if (i < MAXRETRY) {
    celsius = _temp;
  }
  else {
    celsius = -999;
   d417a:	a10d      	add	r1, pc, #52	; (adr r1, d41b0 <_Z7getTempv+0x58>)
   d417c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d4180:	4b0e      	ldr	r3, [pc, #56]	; (d41bc <_Z7getTempv+0x64>)
   d4182:	e9c3 0100 	strd	r0, r1, [r3]
    Serial.println("Invalid reading");
   d4186:	f003 fa6f 	bl	d7668 <_Z16_fetch_usbserialv>
   d418a:	490d      	ldr	r1, [pc, #52]	; (d41c0 <_Z7getTempv+0x68>)
  }
   d418c:	b002      	add	sp, #8
   d418e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (i < MAXRETRY) {
    celsius = _temp;
  }
  else {
    celsius = -999;
    Serial.println("Invalid reading");
   d4192:	f002 bee8 	b.w	d6f66 <_ZN5Print7printlnEPKc>

  do {
    _temp = ds18b20.getTemperature();
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);

  if (i < MAXRETRY) {
   d4196:	2c04      	cmp	r4, #4
   d4198:	d0ef      	beq.n	d417a <_Z7getTempv+0x22>
    celsius = _temp;
   d419a:	ee10 0a10 	vmov	r0, s0
   d419e:	f003 fe35 	bl	d7e0c <__aeabi_f2d>
   d41a2:	4b06      	ldr	r3, [pc, #24]	; (d41bc <_Z7getTempv+0x64>)
   d41a4:	e9c3 0100 	strd	r0, r1, [r3]
  }
  else {
    celsius = -999;
    Serial.println("Invalid reading");
  }
   d41a8:	b002      	add	sp, #8
   d41aa:	bd10      	pop	{r4, pc}
   d41ac:	f3af 8000 	nop.w
   d41b0:	00000000 	.word	0x00000000
   d41b4:	c08f3800 	.word	0xc08f3800
   d41b8:	2003df64 	.word	0x2003df64
   d41bc:	2003df40 	.word	0x2003df40
   d41c0:	000d87b7 	.word	0x000d87b7

000d41c4 <loop>:
    Serial.println("SD Card Error!");
  }

}

void loop(void) {
   d41c4:	b570      	push	{r4, r5, r6, lr}

  // Read any pending data from the EC circuit.
  if (Serial1.available() > 0) {
   d41c6:	f003 f9c5 	bl	d7554 <_Z22__fetch_global_Serial1v>
   d41ca:	6803      	ldr	r3, [r0, #0]
   d41cc:	4c49      	ldr	r4, [pc, #292]	; (d42f4 <loop+0x130>)
   d41ce:	691b      	ldr	r3, [r3, #16]
   d41d0:	4798      	blx	r3
   d41d2:	2800      	cmp	r0, #0
   d41d4:	dd0b      	ble.n	d41ee <loop+0x2a>
    received_from_sensor = Serial1.readBytesUntil(13, EC_data, 48);
   d41d6:	f003 f9bd 	bl	d7554 <_Z22__fetch_global_Serial1v>
   d41da:	2330      	movs	r3, #48	; 0x30
   d41dc:	4622      	mov	r2, r4
   d41de:	210d      	movs	r1, #13
   d41e0:	f003 f907 	bl	d73f2 <_ZN6Stream14readBytesUntilEcPcj>
   d41e4:	4b44      	ldr	r3, [pc, #272]	; (d42f8 <loop+0x134>)
   d41e6:	7018      	strb	r0, [r3, #0]

    // Null terminate the data by setting the value after the final character to 0.
    EC_data[received_from_sensor] = 0;
   d41e8:	b2c0      	uxtb	r0, r0
   d41ea:	2300      	movs	r3, #0
   d41ec:	5423      	strb	r3, [r4, r0]
  }

  // Parse data, if EC_data begins with a digit, not a letter (testing ASCII values).
  if ((EC_data[0] >= 48) && (EC_data[0] <=57)) {
   d41ee:	7823      	ldrb	r3, [r4, #0]
   d41f0:	3b30      	subs	r3, #48	; 0x30
   d41f2:	2b09      	cmp	r3, #9
   d41f4:	d801      	bhi.n	d41fa <loop+0x36>
    parse_data();
   d41f6:	f7ff ff9f 	bl	d4138 <_Z10parse_datav>
  }

  delay(10);  // Wait 10 milliseconds.
   d41fa:	200a      	movs	r0, #10
   d41fc:	f002 fbea 	bl	d69d4 <delay>

  getTemp();
   d4200:	f7ff ffaa 	bl	d4158 <_Z7getTempv>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d4204:	493d      	ldr	r1, [pc, #244]	; (d42fc <loop+0x138>)
   d4206:	4a3e      	ldr	r2, [pc, #248]	; (d4300 <loop+0x13c>)
   d4208:	6809      	ldr	r1, [r1, #0]
   d420a:	483e      	ldr	r0, [pc, #248]	; (d4304 <loop+0x140>)
  file.open("datalog.csv", FILE_WRITE);
  file.print(Time.now());
  file.print(",");
  file.print(sensor.getPressure(ADC_4096));
  file.print(",");
  file.print(celsius);
   d420c:	4d3e      	ldr	r5, [pc, #248]	; (d4308 <loop+0x144>)
  file.print(",");
  // SdFile.print(tempB);
  // SdFile.print("  ");
  // SdFile.print(tempC);
  // SdFile.print("  ");
  file.println(EC);
   d420e:	4c3f      	ldr	r4, [pc, #252]	; (d430c <loop+0x148>)
   d4210:	f244 2302 	movw	r3, #16898	; 0x4202
   d4214:	f001 f87f 	bl	d5316 <_ZN7FatFile4openEPS_PKci>
  // tempB = sensors.getTempCByIndex(1);
  // tempC = sensors.getTempCByIndex(2);

  // Log to the SD card...
  file.open("datalog.csv", FILE_WRITE);
  file.print(Time.now());
   d4218:	f003 f940 	bl	d749c <_ZN9TimeClass3nowEv>
   d421c:	220a      	movs	r2, #10
   d421e:	4601      	mov	r1, r0
   d4220:	483b      	ldr	r0, [pc, #236]	; (d4310 <loop+0x14c>)
   d4222:	f002 fee5 	bl	d6ff0 <_ZN5Print5printEli>
  file.print(",");
   d4226:	493b      	ldr	r1, [pc, #236]	; (d4314 <loop+0x150>)
   d4228:	4839      	ldr	r0, [pc, #228]	; (d4310 <loop+0x14c>)
   d422a:	f002 fe85 	bl	d6f38 <_ZN5Print5printEPKc>
  file.print(sensor.getPressure(ADC_4096));
   d422e:	2108      	movs	r1, #8
   d4230:	4839      	ldr	r0, [pc, #228]	; (d4318 <loop+0x154>)
   d4232:	f000 fc1f 	bl	d4a74 <_ZN6MS580311getPressureE9precision>
   d4236:	ee10 0a10 	vmov	r0, s0
   d423a:	f003 fde7 	bl	d7e0c <__aeabi_f2d>
   d423e:	ec41 0b10 	vmov	d0, r0, r1
   d4242:	2102      	movs	r1, #2
   d4244:	4832      	ldr	r0, [pc, #200]	; (d4310 <loop+0x14c>)
   d4246:	f002 ffa7 	bl	d7198 <_ZN5Print5printEdi>
  file.print(",");
   d424a:	4932      	ldr	r1, [pc, #200]	; (d4314 <loop+0x150>)
   d424c:	4830      	ldr	r0, [pc, #192]	; (d4310 <loop+0x14c>)
   d424e:	f002 fe73 	bl	d6f38 <_ZN5Print5printEPKc>
  file.print(celsius);
   d4252:	ed95 0b00 	vldr	d0, [r5]
   d4256:	2102      	movs	r1, #2
   d4258:	482d      	ldr	r0, [pc, #180]	; (d4310 <loop+0x14c>)
   d425a:	f002 ff9d 	bl	d7198 <_ZN5Print5printEdi>
  file.print(",");
   d425e:	492d      	ldr	r1, [pc, #180]	; (d4314 <loop+0x150>)
   d4260:	482b      	ldr	r0, [pc, #172]	; (d4310 <loop+0x14c>)
   d4262:	f002 fe69 	bl	d6f38 <_ZN5Print5printEPKc>
  // SdFile.print(tempB);
  // SdFile.print("  ");
  // SdFile.print(tempC);
  // SdFile.print("  ");
  file.println(EC);
   d4266:	6821      	ldr	r1, [r4, #0]
   d4268:	4829      	ldr	r0, [pc, #164]	; (d4310 <loop+0x14c>)
   d426a:	f002 fe7c 	bl	d6f66 <_ZN5Print7printlnEPKc>
  file.close();
   d426e:	4825      	ldr	r0, [pc, #148]	; (d4304 <loop+0x140>)
   d4270:	f001 f84a 	bl	d5308 <_ZN7FatFile5closeEv>

  // Log to the serial monitor.
  Serial.print(Time.now());
   d4274:	f003 f9f8 	bl	d7668 <_Z16_fetch_usbserialv>
   d4278:	4606      	mov	r6, r0
   d427a:	f003 f90f 	bl	d749c <_ZN9TimeClass3nowEv>
   d427e:	220a      	movs	r2, #10
   d4280:	4601      	mov	r1, r0
   d4282:	4630      	mov	r0, r6
   d4284:	f002 feb4 	bl	d6ff0 <_ZN5Print5printEli>
  Serial.print(",");
   d4288:	f003 f9ee 	bl	d7668 <_Z16_fetch_usbserialv>
   d428c:	4921      	ldr	r1, [pc, #132]	; (d4314 <loop+0x150>)
   d428e:	f002 fe53 	bl	d6f38 <_ZN5Print5printEPKc>
  Serial.print(sensor.getPressure(ADC_4096));
   d4292:	f003 f9e9 	bl	d7668 <_Z16_fetch_usbserialv>
   d4296:	2108      	movs	r1, #8
   d4298:	4606      	mov	r6, r0
   d429a:	481f      	ldr	r0, [pc, #124]	; (d4318 <loop+0x154>)
   d429c:	f000 fbea 	bl	d4a74 <_ZN6MS580311getPressureE9precision>
   d42a0:	ee10 0a10 	vmov	r0, s0
   d42a4:	f003 fdb2 	bl	d7e0c <__aeabi_f2d>
   d42a8:	ec41 0b10 	vmov	d0, r0, r1
   d42ac:	2102      	movs	r1, #2
   d42ae:	4630      	mov	r0, r6
   d42b0:	f002 ff72 	bl	d7198 <_ZN5Print5printEdi>
  Serial.print(","); 
   d42b4:	f003 f9d8 	bl	d7668 <_Z16_fetch_usbserialv>
   d42b8:	4916      	ldr	r1, [pc, #88]	; (d4314 <loop+0x150>)
   d42ba:	f002 fe3d 	bl	d6f38 <_ZN5Print5printEPKc>
  Serial.print(celsius);
   d42be:	f003 f9d3 	bl	d7668 <_Z16_fetch_usbserialv>
   d42c2:	ed95 0b00 	vldr	d0, [r5]
   d42c6:	2102      	movs	r1, #2
   d42c8:	f002 ff66 	bl	d7198 <_ZN5Print5printEdi>
  Serial.print(",");
   d42cc:	f003 f9cc 	bl	d7668 <_Z16_fetch_usbserialv>
   d42d0:	4910      	ldr	r1, [pc, #64]	; (d4314 <loop+0x150>)
   d42d2:	f002 fe31 	bl	d6f38 <_ZN5Print5printEPKc>
  // Serial.print(tempB);
  // Serial.print("  ");
  // Serial.print(tempC);
  // Serial.print("  ");
  Serial.print(EC);
   d42d6:	f003 f9c7 	bl	d7668 <_Z16_fetch_usbserialv>
   d42da:	6821      	ldr	r1, [r4, #0]
   d42dc:	f002 fe2c 	bl	d6f38 <_ZN5Print5printEPKc>
  Serial.println("");
   d42e0:	f003 f9c2 	bl	d7668 <_Z16_fetch_usbserialv>
   d42e4:	490d      	ldr	r1, [pc, #52]	; (d431c <loop+0x158>)
   d42e6:	f002 fe3e 	bl	d6f66 <_ZN5Print7printlnEPKc>

  delay(50);  // Wait 50 milliseconds.
   d42ea:	2032      	movs	r0, #50	; 0x32
}
   d42ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  // Serial.print(tempC);
  // Serial.print("  ");
  Serial.print(EC);
  Serial.println("");

  delay(50);  // Wait 50 milliseconds.
   d42f0:	f002 bb70 	b.w	d69d4 <delay>
   d42f4:	2003dfb8 	.word	0x2003dfb8
   d42f8:	2003df86 	.word	0x2003df86
   d42fc:	2003e470 	.word	0x2003e470
   d4300:	000d87c7 	.word	0x000d87c7
   d4304:	2003df90 	.word	0x2003df90
   d4308:	2003df40 	.word	0x2003df40
   d430c:	2003dfb4 	.word	0x2003dfb4
   d4310:	2003df88 	.word	0x2003df88
   d4314:	000d87b5 	.word	0x000d87b5
   d4318:	2003df48 	.word	0x2003df48
   d431c:	000d8960 	.word	0x000d8960

000d4320 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv>:
    pr->print(F("error: "));
    pr->println(msg);
    errorPrint(pr);
  }
  /** %Print any SD error code and halt. */
  void initErrorHalt() {
   d4320:	b508      	push	{r3, lr}
   d4322:	4604      	mov	r4, r0
    initErrorHalt(&Serial);
   d4324:	f003 f9a0 	bl	d7668 <_Z16_fetch_usbserialv>
  /** Print error details after begin() fails.
   *
   * \param[in] pr Print destination.
   */
  void initErrorPrint(Print* pr) {
    if (cardErrorCode()) {
   d4328:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
    pr->println(msg);
    errorPrint(pr);
  }
  /** %Print any SD error code and halt. */
  void initErrorHalt() {
    initErrorHalt(&Serial);
   d432c:	4605      	mov	r5, r0
  /** Print error details after begin() fails.
   *
   * \param[in] pr Print destination.
   */
  void initErrorPrint(Print* pr) {
    if (cardErrorCode()) {
   d432e:	b313      	cbz	r3, d4376 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x56>
      pr->println(F("Can't access SD card. Do not reformat."));
   d4330:	4918      	ldr	r1, [pc, #96]	; (d4394 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x74>)
   d4332:	f002 fe22 	bl	d6f7a <_ZN5Print7printlnEPK19__FlashStringHelper>
      if (cardErrorCode() == SD_CARD_ERROR_CMD0) {
   d4336:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
   d433a:	2b20      	cmp	r3, #32
   d433c:	d103      	bne.n	d4346 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x26>
        pr->println(F("No card, wrong chip select pin, or SPI problem?"));
   d433e:	4916      	ldr	r1, [pc, #88]	; (d4398 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x78>)
   d4340:	4628      	mov	r0, r5
   d4342:	f002 fe1a 	bl	d6f7a <_ZN5Print7printlnEPK19__FlashStringHelper>
  }
  /** %Print any SD error code.
   * \param[in] pr Print device.
   */
  void errorPrint(Print* pr) {
    if (!cardErrorCode()) {
   d4346:	f894 3460 	ldrb.w	r3, [r4, #1120]	; 0x460
   d434a:	b303      	cbz	r3, d438e <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x6e>
      return;
    }
    pr->print(F("SD errorCode: 0X"));
   d434c:	4913      	ldr	r1, [pc, #76]	; (d439c <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x7c>)
   d434e:	4628      	mov	r0, r5
   d4350:	f002 fdf9 	bl	d6f46 <_ZN5Print5printEPK19__FlashStringHelper>
    pr->print(cardErrorCode(), HEX);
   d4354:	2210      	movs	r2, #16
   d4356:	f894 1460 	ldrb.w	r1, [r4, #1120]	; 0x460
   d435a:	4628      	mov	r0, r5
   d435c:	f002 fe3c 	bl	d6fd8 <_ZN5Print5printEhi>
    pr->print(F(",0X"));
   d4360:	490f      	ldr	r1, [pc, #60]	; (d43a0 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x80>)
   d4362:	4628      	mov	r0, r5
   d4364:	f002 fdef 	bl	d6f46 <_ZN5Print5printEPK19__FlashStringHelper>
    pr->println(cardErrorData(), HEX);
   d4368:	2210      	movs	r2, #16
   d436a:	f894 1469 	ldrb.w	r1, [r4, #1129]	; 0x469
   d436e:	4628      	mov	r0, r5
   d4370:	f002 fe34 	bl	d6fdc <_ZN5Print7printlnEmi>
   d4374:	e00b      	b.n	d438e <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x6e>
      pr->println(F("Can't access SD card. Do not reformat."));
      if (cardErrorCode() == SD_CARD_ERROR_CMD0) {
        pr->println(F("No card, wrong chip select pin, or SPI problem?"));
      }
      errorPrint(pr);
    } else if (vol()->fatType() == 0) {
   d4376:	79e3      	ldrb	r3, [r4, #7]
   d4378:	b90b      	cbnz	r3, d437e <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x5e>
      pr->println(F("Invalid format, reformat SD."));
   d437a:	490a      	ldr	r1, [pc, #40]	; (d43a4 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x84>)
   d437c:	e005      	b.n	d438a <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x6a>
    } else if (!vwd()->isOpen()) {
   d437e:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d4382:	b90b      	cbnz	r3, d4388 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x68>
      pr->println(F("Can't open root directory."));
   d4384:	4908      	ldr	r1, [pc, #32]	; (d43a8 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x88>)
   d4386:	e000      	b.n	d438a <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x6a>
    } else {
      pr->println(F("No error found."));
   d4388:	4908      	ldr	r1, [pc, #32]	; (d43ac <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x8c>)
   d438a:	f002 fdf6 	bl	d6f7a <_ZN5Print7printlnEPK19__FlashStringHelper>
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
   d438e:	f002 f895 	bl	d64bc <os_thread_yield>
   d4392:	e7fc      	b.n	d438e <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv+0x6e>
   d4394:	000d87d3 	.word	0x000d87d3
   d4398:	000d87fa 	.word	0x000d87fa
   d439c:	000d882a 	.word	0x000d882a
   d43a0:	000d883b 	.word	0x000d883b
   d43a4:	000d883f 	.word	0x000d883f
   d43a8:	000d885c 	.word	0x000d885c
   d43ac:	000d8877 	.word	0x000d8877

000d43b0 <setup>:

// Particle-specific: so that we can manually disable cellular capabilities (cellular.off() call below)
SYSTEM_MODE(MANUAL); 

// Start up system. 
void setup(void) {
   d43b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d43b2:	483b      	ldr	r0, [pc, #236]	; (d44a0 <setup+0xf0>)
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d43b4:	4c3b      	ldr	r4, [pc, #236]	; (d44a4 <setup+0xf4>)
   d43b6:	6840      	ldr	r0, [r0, #4]
   d43b8:	2300      	movs	r3, #0
   d43ba:	461a      	mov	r2, r3
   d43bc:	4619      	mov	r1, r3
   d43be:	f002 fac9 	bl	d6954 <network_off>
  // Keep things simple with cell off for now
  Cellular.off(); 

  Serial.begin(9600);   // Set baud rate.
   d43c2:	f003 f951 	bl	d7668 <_Z16_fetch_usbserialv>
   d43c6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d43ca:	f003 f941 	bl	d7650 <_ZN9USBSerial5beginEl>
  Serial1.begin(9600); // Set baud rate for conductivty circuit.
   d43ce:	f003 f8c1 	bl	d7554 <_Z22__fetch_global_Serial1v>
   d43d2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d43d6:	f003 f8b7 	bl	d7548 <_ZN11USARTSerial5beginEm>

  pinMode(10, OUTPUT);  // Set data output pin for the SD card reader.
   d43da:	2101      	movs	r1, #1
   d43dc:	200a      	movs	r0, #10
   d43de:	f003 f9f7 	bl	d77d0 <pinMode>
  
  sensor.reset(); //reset pressure sensor 
   d43e2:	4831      	ldr	r0, [pc, #196]	; (d44a8 <setup+0xf8>)
   d43e4:	f000 fa2b 	bl	d483e <_ZN6MS58035resetEv>
  sensor.begin(); //initialize pressure sensor
   d43e8:	482f      	ldr	r0, [pc, #188]	; (d44a8 <setup+0xf8>)
   d43ea:	f000 fa03 	bl	d47f4 <_ZN6MS58035beginEv>
  // sensors.begin();  // Intialize the temperature sensors. // PJB commented out as it doesn't appear to be initialized
  
  delay(250);       // Wait a quarter second to continue.
   d43ee:	20fa      	movs	r0, #250	; 0xfa
   d43f0:	f002 faf0 	bl	d69d4 <delay>
    SPI_CLK_CORE = 72*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d43f4:	4b2d      	ldr	r3, [pc, #180]	; (d44ac <setup+0xfc>)
   d43f6:	4a2e      	ldr	r2, [pc, #184]	; (d44b0 <setup+0x100>)
   d43f8:	9300      	str	r3, [sp, #0]
   d43fa:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   d43fe:	2300      	movs	r3, #0
   d4400:	f88d 3004 	strb.w	r3, [sp, #4]
   d4404:	9202      	str	r2, [sp, #8]
   d4406:	2501      	movs	r5, #1
   d4408:	f88d 300d 	strb.w	r3, [sp, #13]
   d440c:	220e      	movs	r2, #14
   d440e:	466b      	mov	r3, sp
   d4410:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   d4414:	4630      	mov	r0, r6
   d4416:	f88d 500c 	strb.w	r5, [sp, #12]
   d441a:	f001 fe1f 	bl	d605c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d441e:	2800      	cmp	r0, #0
   d4420:	d034      	beq.n	d448c <setup+0xdc>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d4422:	6026      	str	r6, [r4, #0]
    vwd()->close();
   d4424:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   d4428:	f000 ff6e 	bl	d5308 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d442c:	4629      	mov	r1, r5
   d442e:	4620      	mov	r0, r4
   d4430:	f001 fcb9 	bl	d5da6 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d4434:	4601      	mov	r1, r0
   d4436:	b140      	cbz	r0, d444a <setup+0x9a>
   d4438:	4d1a      	ldr	r5, [pc, #104]	; (d44a4 <setup+0xf4>)
   d443a:	f205 443c 	addw	r4, r5, #1084	; 0x43c
   d443e:	4629      	mov	r1, r5
   d4440:	4620      	mov	r0, r4
   d4442:	f000 fd8c 	bl	d4f5e <_ZN7FatFile8openRootEP9FatVolume>
   d4446:	b308      	cbz	r0, d448c <setup+0xdc>
   d4448:	e005      	b.n	d4456 <setup+0xa6>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d444a:	4620      	mov	r0, r4
   d444c:	f001 fcab 	bl	d5da6 <_ZN9FatVolume4initEh>
   d4450:	2800      	cmp	r0, #0
   d4452:	d1f1      	bne.n	d4438 <setup+0x88>
   d4454:	e01a      	b.n	d448c <setup+0xdc>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d4456:	f895 343c 	ldrb.w	r3, [r5, #1084]	; 0x43c
   d445a:	f013 0f70 	tst.w	r3, #112	; 0x70
   d445e:	d015      	beq.n	d448c <setup+0xdc>
      return false;
    }
    m_cwd = dir;
   d4460:	4b14      	ldr	r3, [pc, #80]	; (d44b4 <setup+0x104>)
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d4462:	4a15      	ldr	r2, [pc, #84]	; (d44b8 <setup+0x108>)
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
      return false;
    }
    m_cwd = dir;
   d4464:	601c      	str	r4, [r3, #0]
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d4466:	4621      	mov	r1, r4
   d4468:	f244 2302 	movw	r3, #16898	; 0x4202
   d446c:	4813      	ldr	r0, [pc, #76]	; (d44bc <setup+0x10c>)
   d446e:	f000 ff52 	bl	d5316 <_ZN7FatFile4openEPS_PKci>
  // not over 50 MHz. Try a lower speed if SPI errors occur.
  if (!sd.begin(chipSelect, SD_SCK_MHZ(50))) {
    sd.initErrorHalt();
  }

  if (file.open("datalog.csv", FILE_WRITE)) {
   d4472:	b170      	cbz	r0, d4492 <setup+0xe2>
    file.println("");
   d4474:	4912      	ldr	r1, [pc, #72]	; (d44c0 <setup+0x110>)
   d4476:	4813      	ldr	r0, [pc, #76]	; (d44c4 <setup+0x114>)
   d4478:	f002 fd75 	bl	d6f66 <_ZN5Print7printlnEPKc>
    file.println("=== New Cast ===");
   d447c:	4912      	ldr	r1, [pc, #72]	; (d44c8 <setup+0x118>)
   d447e:	4811      	ldr	r0, [pc, #68]	; (d44c4 <setup+0x114>)
   d4480:	f002 fd71 	bl	d6f66 <_ZN5Print7printlnEPKc>
    file.close();
   d4484:	480d      	ldr	r0, [pc, #52]	; (d44bc <setup+0x10c>)
   d4486:	f000 ff3f 	bl	d5308 <_ZN7FatFile5closeEv>
   d448a:	e007      	b.n	d449c <setup+0xec>
  delay(250);       // Wait a quarter second to continue.

  // Initialize SD card at the highest speed supported by the board that is
  // not over 50 MHz. Try a lower speed if SPI errors occur.
  if (!sd.begin(chipSelect, SD_SCK_MHZ(50))) {
    sd.initErrorHalt();
   d448c:	4805      	ldr	r0, [pc, #20]	; (d44a4 <setup+0xf4>)
   d448e:	f7ff ff47 	bl	d4320 <_ZN12SdFileSystemI9SdSpiCardE13initErrorHaltEv>
    file.println("");
    file.println("=== New Cast ===");
    file.close();
  }
  else {
    Serial.println("SD Card Error!");
   d4492:	f003 f8e9 	bl	d7668 <_Z16_fetch_usbserialv>
   d4496:	490d      	ldr	r1, [pc, #52]	; (d44cc <setup+0x11c>)
   d4498:	f002 fd65 	bl	d6f66 <_ZN5Print7printlnEPKc>
  }

}
   d449c:	b004      	add	sp, #16
   d449e:	bd70      	pop	{r4, r5, r6, pc}
   d44a0:	2003e480 	.word	0x2003e480
   d44a4:	2003dfe8 	.word	0x2003dfe8
   d44a8:	2003df48 	.word	0x2003df48
   d44ac:	000d8754 	.word	0x000d8754
   d44b0:	02faf080 	.word	0x02faf080
   d44b4:	2003e470 	.word	0x2003e470
   d44b8:	000d87c7 	.word	0x000d87c7
   d44bc:	2003df90 	.word	0x2003df90
   d44c0:	000d8960 	.word	0x000d8960
   d44c4:	2003df88 	.word	0x2003df88
   d44c8:	000d8887 	.word	0x000d8887
   d44cc:	000d8898 	.word	0x000d8898

000d44d0 <_GLOBAL__sub_I_EC_float>:
  }
  else {
    celsius = -999;
    Serial.println("Invalid reading");
  }
   d44d0:	b538      	push	{r3, r4, r5, lr}
char *EC;            // Character pointer for string parsing.
byte received_from_sensor = 0;  // How many characters have been received.
byte string_received = 0;       // Whether it received a string from the EC circuit.

// Temperature sensor
DS18B20  ds18b20(D2, true); //Sets Pin D2 for Water Temp Sensor and says this is the only sensor on bus. 
   d44d2:	4c21      	ldr	r4, [pc, #132]	; (d4558 <_GLOBAL__sub_I_EC_float+0x88>)
   d44d4:	4d21      	ldr	r5, [pc, #132]	; (d455c <_GLOBAL__sub_I_EC_float+0x8c>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d44d6:	f002 f859 	bl	d658c <HAL_Pin_Map>
   d44da:	2201      	movs	r2, #1
   d44dc:	2102      	movs	r1, #2
   d44de:	4620      	mov	r0, r4
   d44e0:	f000 f850 	bl	d4584 <_ZN7DS18B20C1Etb>
   d44e4:	462a      	mov	r2, r5
   d44e6:	491e      	ldr	r1, [pc, #120]	; (d4560 <_GLOBAL__sub_I_EC_float+0x90>)
   d44e8:	4620      	mov	r0, r4
   d44ea:	f003 f9dd 	bl	d78a8 <__aeabi_atexit>
* available addresses (selected by jumper on board)
* default is ADDRESS_HIGH
* ADDRESS_HIGH = 0x76
* ADDRESS_LOW  = 0x77
*/  
MS5803 sensor(ADDRESS_HIGH);
   d44ee:	2176      	movs	r1, #118	; 0x76
   d44f0:	481c      	ldr	r0, [pc, #112]	; (d4564 <_GLOBAL__sub_I_EC_float+0x94>)
   d44f2:	f000 f961 	bl	d47b8 <_ZN6MS5803C1E11ms5803_addr>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d44f6:	4b1c      	ldr	r3, [pc, #112]	; (d4568 <_GLOBAL__sub_I_EC_float+0x98>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d44f8:	481c      	ldr	r0, [pc, #112]	; (d456c <_GLOBAL__sub_I_EC_float+0x9c>)
double pressure_abs; //define absolute pressure variable

// SD Card
const uint8_t chipSelect = SS; // SD chip select pin.  Be sure to disable any other SPI devices such as Enet.
SdFat sd; // File system object.
SdFile file; // Log file.
   d44fa:	491d      	ldr	r1, [pc, #116]	; (d4570 <_GLOBAL__sub_I_EC_float+0xa0>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d44fc:	2264      	movs	r2, #100	; 0x64
   d44fe:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d4502:	4a1c      	ldr	r2, [pc, #112]	; (d4574 <_GLOBAL__sub_I_EC_float+0xa4>)
   d4504:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   d4508:	2201      	movs	r2, #1
   d450a:	2400      	movs	r4, #0
   d450c:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4510:	4a19      	ldr	r2, [pc, #100]	; (d4578 <_GLOBAL__sub_I_EC_float+0xa8>)
   d4512:	71dc      	strb	r4, [r3, #7]
   d4514:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
   d4518:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
   d451c:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
   d4520:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   d4524:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
   d4528:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
   d452c:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   d4530:	7204      	strb	r4, [r0, #8]
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
   d4532:	4b12      	ldr	r3, [pc, #72]	; (d457c <_GLOBAL__sub_I_EC_float+0xac>)
   d4534:	7244      	strb	r4, [r0, #9]
   d4536:	462a      	mov	r2, r5
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4538:	6044      	str	r4, [r0, #4]
   d453a:	6003      	str	r3, [r0, #0]
   d453c:	f003 f9b4 	bl	d78a8 <__aeabi_atexit>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d4540:	4b0f      	ldr	r3, [pc, #60]	; (d4580 <_GLOBAL__sub_I_EC_float+0xb0>)
   d4542:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d4546:	701c      	strb	r4, [r3, #0]
   d4548:	805c      	strh	r4, [r3, #2]
   d454a:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d454c:	2003      	movs	r0, #3
  }
  else {
    celsius = -999;
    Serial.println("Invalid reading");
  }
   d454e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4552:	f002 b98b 	b.w	d686c <set_system_mode>
   d4556:	bf00      	nop
   d4558:	2003df64 	.word	0x2003df64
   d455c:	2003df38 	.word	0x2003df38
   d4560:	000d45e1 	.word	0x000d45e1
   d4564:	2003df48 	.word	0x2003df48
   d4568:	2003dfe8 	.word	0x2003dfe8
   d456c:	2003df88 	.word	0x2003df88
   d4570:	000d40b3 	.word	0x000d40b3
   d4574:	000d8754 	.word	0x000d8754
   d4578:	2003e730 	.word	0x2003e730
   d457c:	000d8760 	.word	0x000d8760
   d4580:	2003df80 	.word	0x2003df80

000d4584 <_ZN7DS18B20C1Etb>:
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d4584:	b570      	push	{r4, r5, r6, lr}
   d4586:	4604      	mov	r4, r0
{
  memset(_data, 0, sizeof(_data));
   d4588:	2300      	movs	r3, #0
   d458a:	6063      	str	r3, [r4, #4]
   d458c:	60a3      	str	r3, [r4, #8]
   d458e:	60e3      	str	r3, [r4, #12]
  memset(_addr, 0, sizeof(_addr));
   d4590:	6123      	str	r3, [r4, #16]
   d4592:	6163      	str	r3, [r4, #20]
  _dataCRC    = 0; 
   d4594:	7623      	strb	r3, [r4, #24]
  _readCRC    = 0;
   d4596:	7663      	strb	r3, [r4, #25]
  _singleDrop = singleDrop;
   d4598:	76a2      	strb	r2, [r4, #26]
  ds          = new OneWire(pin);
   d459a:	200e      	movs	r0, #14
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
   d459c:	460e      	mov	r6, r1
  memset(_data, 0, sizeof(_data));
  memset(_addr, 0, sizeof(_addr));
  _dataCRC    = 0; 
  _readCRC    = 0;
  _singleDrop = singleDrop;
  ds          = new OneWire(pin);
   d459e:	f7ff fd7a 	bl	d4096 <_Znwj>
   d45a2:	4605      	mov	r5, r0
   d45a4:	b110      	cbz	r0, d45ac <_ZN7DS18B20C1Etb+0x28>
   d45a6:	4631      	mov	r1, r6
   d45a8:	f000 fae4 	bl	d4b74 <_ZN7OneWireC1Et>
   d45ac:	6025      	str	r5, [r4, #0]
}
   d45ae:	4620      	mov	r0, r4
   d45b0:	bd70      	pop	{r4, r5, r6, pc}

000d45b2 <_ZN7DS18B206searchEPh>:
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
   d45b2:	b538      	push	{r3, r4, r5, lr}
  boolean isSuccess = ds->search(_addr);
   d45b4:	f100 0510 	add.w	r5, r0, #16
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
   d45b8:	460c      	mov	r4, r1
  boolean isSuccess = ds->search(_addr);
   d45ba:	6800      	ldr	r0, [r0, #0]
   d45bc:	4629      	mov	r1, r5
   d45be:	f000 fbc5 	bl	d4d4c <_ZN7OneWire6searchEPh>
   d45c2:	1e03      	subs	r3, r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
   d45c4:	bf1d      	ittte	ne
   d45c6:	682b      	ldrne	r3, [r5, #0]
   d45c8:	6023      	strne	r3, [r4, #0]
   d45ca:	686b      	ldrne	r3, [r5, #4]
  else           memset(addr, 0, 8);
   d45cc:	6023      	streq	r3, [r4, #0]
   d45ce:	6063      	str	r3, [r4, #4]
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
   d45d0:	bf14      	ite	ne
   d45d2:	2001      	movne	r0, #1
   d45d4:	2000      	moveq	r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
  return isSuccess;
}
   d45d6:	bd38      	pop	{r3, r4, r5, pc}

000d45d8 <_ZN7DS18B206searchEv>:
  ds          = new OneWire(pin);
}

boolean DS18B20::search()
{
  return search(_addr);
   d45d8:	f100 0110 	add.w	r1, r0, #16
   d45dc:	f7ff bfe9 	b.w	d45b2 <_ZN7DS18B206searchEPh>

000d45e0 <_ZN7DS18B20D1Ev>:
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
  return isSuccess;
}

DS18B20::~DS18B20()
   d45e0:	b510      	push	{r4, lr}
   d45e2:	4604      	mov	r4, r0
{
  delete(ds);
   d45e4:	6800      	ldr	r0, [r0, #0]
   d45e6:	f7ff fd58 	bl	d409a <_ZdlPv>
}
   d45ea:	4620      	mov	r0, r4
   d45ec:	bd10      	pop	{r4, pc}

000d45ee <_ZN7DS18B2011resetsearchEv>:
  memcpy(_addr, addr, 8);
}

void DS18B20::resetsearch()
{
  ds->reset_search();
   d45ee:	6800      	ldr	r0, [r0, #0]
   d45f0:	f000 bba0 	b.w	d4d34 <_ZN7OneWire12reset_searchEv>

000d45f4 <_ZN7DS18B2014getTemperatureEPhb>:
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
   d45f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d45f6:	7e83      	ldrb	r3, [r0, #26]
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
   d45f8:	4604      	mov	r4, r0
   d45fa:	460d      	mov	r5, r1
   d45fc:	4616      	mov	r6, r2
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
   d45fe:	b91b      	cbnz	r3, d4608 <_ZN7DS18B2014getTemperatureEPhb+0x14>
   d4600:	780b      	ldrb	r3, [r1, #0]
   d4602:	2b00      	cmp	r3, #0
   d4604:	f000 80a6 	beq.w	d4754 <_ZN7DS18B2014getTemperatureEPhb+0x160>

  ds->reset();
   d4608:	6820      	ldr	r0, [r4, #0]
   d460a:	f000 fabd 	bl	d4b88 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d460e:	7ea3      	ldrb	r3, [r4, #26]
   d4610:	b123      	cbz	r3, d461c <_ZN7DS18B2014getTemperatureEPhb+0x28>
   d4612:	b91e      	cbnz	r6, d461c <_ZN7DS18B2014getTemperatureEPhb+0x28>
    ds->skip();
   d4614:	6820      	ldr	r0, [r4, #0]
   d4616:	f000 fb89 	bl	d4d2c <_ZN7OneWire4skipEv>
   d461a:	e003      	b.n	d4624 <_ZN7DS18B2014getTemperatureEPhb+0x30>
  else
    ds->select(addr);
   d461c:	4629      	mov	r1, r5
   d461e:	6820      	ldr	r0, [r4, #0]
   d4620:	f000 fb72 	bl	d4d08 <_ZN7OneWire6selectEPKh>

  ds->write(0x44);        // start conversion, with parasite power on at the end
   d4624:	2200      	movs	r2, #0
   d4626:	2144      	movs	r1, #68	; 0x44
   d4628:	6820      	ldr	r0, [r4, #0]
   d462a:	f000 fb3a 	bl	d4ca2 <_ZN7OneWire5writeEhh>
  delay(750);     // maybe 750ms is enough, maybe not
   d462e:	f240 20ee 	movw	r0, #750	; 0x2ee
   d4632:	f002 f9cf 	bl	d69d4 <delay>
                  // we might do a ds.depower() here, but the reset will take care of it.
  ds->reset();
   d4636:	6820      	ldr	r0, [r4, #0]
   d4638:	f000 faa6 	bl	d4b88 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
   d463c:	7ea3      	ldrb	r3, [r4, #26]
   d463e:	b123      	cbz	r3, d464a <_ZN7DS18B2014getTemperatureEPhb+0x56>
   d4640:	b91e      	cbnz	r6, d464a <_ZN7DS18B2014getTemperatureEPhb+0x56>
    ds->skip();
   d4642:	6820      	ldr	r0, [r4, #0]
   d4644:	f000 fb72 	bl	d4d2c <_ZN7OneWire4skipEv>
   d4648:	e003      	b.n	d4652 <_ZN7DS18B2014getTemperatureEPhb+0x5e>
  else
    ds->select(addr);
   d464a:	4629      	mov	r1, r5
   d464c:	6820      	ldr	r0, [r4, #0]
   d464e:	f000 fb5b 	bl	d4d08 <_ZN7OneWire6selectEPKh>

  ds->write(0xBE);         // Read Scratchpad
   d4652:	2200      	movs	r2, #0
   d4654:	21be      	movs	r1, #190	; 0xbe
   d4656:	6820      	ldr	r0, [r4, #0]
   d4658:	f000 fb23 	bl	d4ca2 <_ZN7OneWire5writeEhh>
  if (addr[0] == WIRE_DS2438) {
   d465c:	782b      	ldrb	r3, [r5, #0]
   d465e:	2b26      	cmp	r3, #38	; 0x26
   d4660:	d104      	bne.n	d466c <_ZN7DS18B2014getTemperatureEPhb+0x78>
    ds->write(0x00,0);     // DS2438 requires a page to read
   d4662:	2200      	movs	r2, #0
   d4664:	4611      	mov	r1, r2
   d4666:	6820      	ldr	r0, [r4, #0]
   d4668:	f000 fb1b 	bl	d4ca2 <_ZN7OneWire5writeEhh>
   d466c:	1ce6      	adds	r6, r4, #3
   d466e:	f104 070c 	add.w	r7, r4, #12
  }

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
   d4672:	6820      	ldr	r0, [r4, #0]
   d4674:	f000 fb38 	bl	d4ce8 <_ZN7OneWire4readEv>
   d4678:	f806 0f01 	strb.w	r0, [r6, #1]!
  ds->write(0xBE);         // Read Scratchpad
  if (addr[0] == WIRE_DS2438) {
    ds->write(0x00,0);     // DS2438 requires a page to read
  }

  for (int i = 0; i < 9; i++)
   d467c:	42be      	cmp	r6, r7
   d467e:	d1f8      	bne.n	d4672 <_ZN7DS18B2014getTemperatureEPhb+0x7e>
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
   d4680:	2108      	movs	r1, #8
   d4682:	1d20      	adds	r0, r4, #4
   d4684:	f000 fbdd 	bl	d4e42 <_ZN7OneWire4crc8EPhh>
  _readCRC = (_data[8]);
   d4688:	7b23      	ldrb	r3, [r4, #12]

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
   d468a:	7620      	strb	r0, [r4, #24]
  _readCRC = (_data[8]);
  if (_dataCRC != _readCRC) return NAN;
   d468c:	4298      	cmp	r0, r3
  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
  _readCRC = (_data[8]);
   d468e:	7663      	strb	r3, [r4, #25]
  if (_dataCRC != _readCRC) return NAN;
   d4690:	d160      	bne.n	d4754 <_ZN7DS18B2014getTemperatureEPhb+0x160>
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
   d4692:	782b      	ldrb	r3, [r5, #0]
   d4694:	2b22      	cmp	r3, #34	; 0x22
   d4696:	d019      	beq.n	d46cc <_ZN7DS18B2014getTemperatureEPhb+0xd8>
   d4698:	d814      	bhi.n	d46c4 <_ZN7DS18B2014getTemperatureEPhb+0xd0>
   d469a:	2b10      	cmp	r3, #16
   d469c:	d15a      	bne.n	d4754 <_ZN7DS18B2014getTemperatureEPhb+0x160>
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d469e:	7ae2      	ldrb	r2, [r4, #11]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d46a0:	88a3      	ldrh	r3, [r4, #4]
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
   d46a2:	2a10      	cmp	r2, #16
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d46a4:	bf08      	it	eq
   d46a6:	7aa2      	ldrbeq	r2, [r4, #10]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
   d46a8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
        raw = (raw & 0xFFF0) + 12 - _data[6];     
   d46ac:	bf02      	ittt	eq
   d46ae:	f023 030f 	biceq.w	r3, r3, #15
   d46b2:	f1c2 020c 	rsbeq	r2, r2, #12
   d46b6:	189b      	addeq	r3, r3, r2
   d46b8:	b21b      	sxth	r3, r3
      celsius = (float)raw / 16.0;
   d46ba:	ee00 3a10 	vmov	s0, r3
   d46be:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
      break;
   d46c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
   d46c4:	2b26      	cmp	r3, #38	; 0x26
   d46c6:	d01f      	beq.n	d4708 <_ZN7DS18B2014getTemperatureEPhb+0x114>
   d46c8:	2b28      	cmp	r3, #40	; 0x28
   d46ca:	d143      	bne.n	d4754 <_ZN7DS18B2014getTemperatureEPhb+0x160>
      celsius = (float)raw / 16.0;
      break;

    case WIRE_DS1822:
    case WIRE_DS18B20:
      switch (_data[4] & 0x60)
   d46cc:	7a22      	ldrb	r2, [r4, #8]
   d46ce:	7923      	ldrb	r3, [r4, #4]
   d46d0:	f002 0260 	and.w	r2, r2, #96	; 0x60
   d46d4:	2a20      	cmp	r2, #32
   d46d6:	d005      	beq.n	d46e4 <_ZN7DS18B2014getTemperatureEPhb+0xf0>
   d46d8:	2a40      	cmp	r2, #64	; 0x40
   d46da:	d006      	beq.n	d46ea <_ZN7DS18B2014getTemperatureEPhb+0xf6>
   d46dc:	b942      	cbnz	r2, d46f0 <_ZN7DS18B2014getTemperatureEPhb+0xfc>
      { // lower resolution means shorter conversion time, low bits need masking
        case 0x00: _data[0] &= ~0b111; break;           //  9 bit  93.75 ms
   d46de:	f023 0307 	bic.w	r3, r3, #7
   d46e2:	e004      	b.n	d46ee <_ZN7DS18B2014getTemperatureEPhb+0xfa>
        case 0x20: _data[0] &= ~0b011; break;           // 10 bit 187.50 ms
   d46e4:	f023 0303 	bic.w	r3, r3, #3
   d46e8:	e001      	b.n	d46ee <_ZN7DS18B2014getTemperatureEPhb+0xfa>
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
   d46ea:	f023 0301 	bic.w	r3, r3, #1
   d46ee:	7123      	strb	r3, [r4, #4]
        default: break;                                 // 12 bit 750.00 ms 
      }
      celsius = (int16_t)((_data[1] << 8) | _data[0]) / 16.0;
   d46f0:	7923      	ldrb	r3, [r4, #4]
   d46f2:	7960      	ldrb	r0, [r4, #5]
   d46f4:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d46f8:	b200      	sxth	r0, r0
   d46fa:	f003 fb75 	bl	d7de8 <__aeabi_i2d>
   d46fe:	2200      	movs	r2, #0
   d4700:	4b16      	ldr	r3, [pc, #88]	; (d475c <_ZN7DS18B2014getTemperatureEPhb+0x168>)
   d4702:	f003 fbd7 	bl	d7eb4 <__aeabi_dmul>
   d4706:	e020      	b.n	d474a <_ZN7DS18B2014getTemperatureEPhb+0x156>
      break;
      
    case WIRE_DS2438:
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
   d4708:	79a5      	ldrb	r5, [r4, #6]
   d470a:	4628      	mov	r0, r5
   d470c:	f003 fb6c 	bl	d7de8 <__aeabi_i2d>
   d4710:	4606      	mov	r6, r0
   d4712:	7960      	ldrb	r0, [r4, #5]
   d4714:	10c0      	asrs	r0, r0, #3
   d4716:	ee07 0a90 	vmov	s15, r0
   d471a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d471e:	460f      	mov	r7, r1
   d4720:	ee17 0a90 	vmov	r0, s15
   d4724:	f003 fb72 	bl	d7e0c <__aeabi_f2d>
   d4728:	2200      	movs	r2, #0
   d472a:	4b0d      	ldr	r3, [pc, #52]	; (d4760 <_ZN7DS18B2014getTemperatureEPhb+0x16c>)
   d472c:	f003 fbc2 	bl	d7eb4 <__aeabi_dmul>
   d4730:	460b      	mov	r3, r1
   d4732:	0629      	lsls	r1, r5, #24
   d4734:	4602      	mov	r2, r0
   d4736:	bf4c      	ite	mi
   d4738:	490a      	ldrmi	r1, [pc, #40]	; (d4764 <_ZN7DS18B2014getTemperatureEPhb+0x170>)
   d473a:	490b      	ldrpl	r1, [pc, #44]	; (d4768 <_ZN7DS18B2014getTemperatureEPhb+0x174>)
   d473c:	2000      	movs	r0, #0
   d473e:	f003 fbb9 	bl	d7eb4 <__aeabi_dmul>
   d4742:	4632      	mov	r2, r6
   d4744:	463b      	mov	r3, r7
   d4746:	f003 fa03 	bl	d7b50 <__adddf3>
   d474a:	f003 feab 	bl	d84a4 <__aeabi_d2f>
   d474e:	ee00 0a10 	vmov	s0, r0
      break;
   d4752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      
    default:
      celsius = NAN;
   d4754:	ed9f 0a05 	vldr	s0, [pc, #20]	; d476c <_ZN7DS18B2014getTemperatureEPhb+0x178>
      break;                            
  }
  
  return celsius;
}
   d4758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d475a:	bf00      	nop
   d475c:	3fb00000 	.word	0x3fb00000
   d4760:	3fa00000 	.word	0x3fa00000
   d4764:	bff00000 	.word	0xbff00000
   d4768:	3ff00000 	.word	0x3ff00000
   d476c:	7fc00000 	.word	0x7fc00000

000d4770 <_ZN7DS18B2014getTemperatureEb>:

  return "impossible";
}

float DS18B20::getTemperature(bool forceSelect)
{
   d4770:	b538      	push	{r3, r4, r5, lr}
  if (_singleDrop && _addr[0] == WIRE_UNKNOWN)
   d4772:	7e83      	ldrb	r3, [r0, #26]

  return "impossible";
}

float DS18B20::getTemperature(bool forceSelect)
{
   d4774:	4604      	mov	r4, r0
   d4776:	460d      	mov	r5, r1
  if (_singleDrop && _addr[0] == WIRE_UNKNOWN)
   d4778:	b93b      	cbnz	r3, d478a <_ZN7DS18B2014getTemperatureEb+0x1a>
  {
    resetsearch();
    if (!search()) return NAN;
  }
  return getTemperature(_addr, forceSelect);
   d477a:	462a      	mov	r2, r5
   d477c:	f104 0110 	add.w	r1, r4, #16
   d4780:	4620      	mov	r0, r4
}
   d4782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (_singleDrop && _addr[0] == WIRE_UNKNOWN)
  {
    resetsearch();
    if (!search()) return NAN;
  }
  return getTemperature(_addr, forceSelect);
   d4786:	f7ff bf35 	b.w	d45f4 <_ZN7DS18B2014getTemperatureEPhb>
  return "impossible";
}

float DS18B20::getTemperature(bool forceSelect)
{
  if (_singleDrop && _addr[0] == WIRE_UNKNOWN)
   d478a:	7c03      	ldrb	r3, [r0, #16]
   d478c:	2b00      	cmp	r3, #0
   d478e:	d1f4      	bne.n	d477a <_ZN7DS18B2014getTemperatureEb+0xa>
  {
    resetsearch();
   d4790:	f7ff ff2d 	bl	d45ee <_ZN7DS18B2011resetsearchEv>
    if (!search()) return NAN;
   d4794:	4620      	mov	r0, r4
   d4796:	f7ff ff1f 	bl	d45d8 <_ZN7DS18B206searchEv>
   d479a:	2800      	cmp	r0, #0
   d479c:	d1ed      	bne.n	d477a <_ZN7DS18B2014getTemperatureEb+0xa>
  }
  return getTemperature(_addr, forceSelect);
}
   d479e:	ed9f 0a01 	vldr	s0, [pc, #4]	; d47a4 <_ZN7DS18B2014getTemperatureEb+0x34>
   d47a2:	bd38      	pop	{r3, r4, r5, pc}
   d47a4:	7fc00000 	.word	0x7fc00000

000d47a8 <_ZN7DS18B208crcCheckEv>:
  return celsius * 1.8 + 32.0;
}

bool DS18B20::crcCheck()
{
  return (_dataCRC == _readCRC);
   d47a8:	7e02      	ldrb	r2, [r0, #24]
   d47aa:	7e40      	ldrb	r0, [r0, #25]
}
   d47ac:	1a13      	subs	r3, r2, r0
   d47ae:	4258      	negs	r0, r3
   d47b0:	4158      	adcs	r0, r3
   d47b2:	4770      	bx	lr

000d47b4 <_GLOBAL__sub_I__ZN7DS18B20C2Etb>:
   d47b4:	f001 beea 	b.w	d658c <HAL_Pin_Map>

000d47b8 <_ZN6MS5803C1E11ms5803_addr>:

#include "application.h"
#include "MS5803_I2C.h"
#include "math.h"

MS5803::MS5803(ms5803_addr address)
   d47b8:	b538      	push	{r3, r4, r5, lr}
   d47ba:	4604      	mov	r4, r0
   d47bc:	460d      	mov	r5, r1
// Base library type I2C
{
	Wire.begin(); // Arduino Wire library initializer
   d47be:	f003 f831 	bl	d7824 <_Z19__fetch_global_Wirev>
   d47c2:	f002 f9e5 	bl	d6b90 <_ZN7TwoWire5beginEv>
	_address = address; //set interface used for communication
   d47c6:	7225      	strb	r5, [r4, #8]
}
   d47c8:	4620      	mov	r0, r4
   d47ca:	bd38      	pop	{r3, r4, r5, pc}

000d47cc <_ZN6MS580311sendCommandEh>:
	return result;

}

void MS5803::sendCommand(uint8_t command)
{	
   d47cc:	b538      	push	{r3, r4, r5, lr}
   d47ce:	4605      	mov	r5, r0
   d47d0:	460c      	mov	r4, r1
	Wire.beginTransmission( _address);
   d47d2:	f003 f827 	bl	d7824 <_Z19__fetch_global_Wirev>
   d47d6:	7a29      	ldrb	r1, [r5, #8]
   d47d8:	f002 f9f2 	bl	d6bc0 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(command);
   d47dc:	f003 f822 	bl	d7824 <_Z19__fetch_global_Wirev>
   d47e0:	6803      	ldr	r3, [r0, #0]
   d47e2:	4621      	mov	r1, r4
   d47e4:	689b      	ldr	r3, [r3, #8]
   d47e6:	4798      	blx	r3
	Wire.endTransmission();
   d47e8:	f003 f81c 	bl	d7824 <_Z19__fetch_global_Wirev>
	
}
   d47ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void MS5803::sendCommand(uint8_t command)
{	
	Wire.beginTransmission( _address);
	Wire.write(command);
	Wire.endTransmission();
   d47f0:	f002 b9ed 	b.w	d6bce <_ZN7TwoWire15endTransmissionEv>

000d47f4 <_ZN6MS58035beginEv>:
   sensorWait(3);
}

uint8_t MS5803::begin(void)
// Initialize library for subsequent pressure measurements
{  
   d47f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d47f6:	4605      	mov	r5, r0
   d47f8:	f100 0608 	add.w	r6, r0, #8
   d47fc:	24a0      	movs	r4, #160	; 0xa0
	uint8_t i;
	for(i = 0; i <= 7; i++)
  {
		sendCommand(CMD_PROM + (i * 2));
   d47fe:	4621      	mov	r1, r4
   d4800:	4628      	mov	r0, r5
   d4802:	f7ff ffe3 	bl	d47cc <_ZN6MS580311sendCommandEh>
		Wire.requestFrom( _address, 2);
   d4806:	f003 f80d 	bl	d7824 <_Z19__fetch_global_Wirev>
   d480a:	2202      	movs	r2, #2
   d480c:	7a29      	ldrb	r1, [r5, #8]
   d480e:	f002 f9ce 	bl	d6bae <_ZN7TwoWire11requestFromEii>
		uint8_t highByte = Wire.read(); 
   d4812:	f003 f807 	bl	d7824 <_Z19__fetch_global_Wirev>
   d4816:	6803      	ldr	r3, [r0, #0]
   d4818:	695b      	ldr	r3, [r3, #20]
   d481a:	4798      	blx	r3
   d481c:	4607      	mov	r7, r0
		uint8_t lowByte = Wire.read();
   d481e:	f003 f801 	bl	d7824 <_Z19__fetch_global_Wirev>
   d4822:	6803      	ldr	r3, [r0, #0]
   d4824:	695b      	ldr	r3, [r3, #20]
   d4826:	4798      	blx	r3
   d4828:	3402      	adds	r4, #2
		coefficient[i] = (highByte << 8)|lowByte;
   d482a:	b2c0      	uxtb	r0, r0
   d482c:	b2e4      	uxtb	r4, r4
   d482e:	ea40 2007 	orr.w	r0, r0, r7, lsl #8

uint8_t MS5803::begin(void)
// Initialize library for subsequent pressure measurements
{  
	uint8_t i;
	for(i = 0; i <= 7; i++)
   d4832:	2cb0      	cmp	r4, #176	; 0xb0
  {
		sendCommand(CMD_PROM + (i * 2));
		Wire.requestFrom( _address, 2);
		uint8_t highByte = Wire.read(); 
		uint8_t lowByte = Wire.read();
		coefficient[i] = (highByte << 8)|lowByte;
   d4834:	f826 0f02 	strh.w	r0, [r6, #2]!

uint8_t MS5803::begin(void)
// Initialize library for subsequent pressure measurements
{  
	uint8_t i;
	for(i = 0; i <= 7; i++)
   d4838:	d1e1      	bne.n	d47fe <_ZN6MS58035beginEv+0xa>
	//	Serial.print("= ");
	//	Serial.println(coefficient[i]);
	}

	return 0;
}
   d483a:	2000      	movs	r0, #0
   d483c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d483e <_ZN6MS58035resetEv>:
	_address = address; //set interface used for communication
}

void MS5803::reset(void)
// Reset device I2C
{
   d483e:	b508      	push	{r3, lr}
   sendCommand(CMD_RESET);
   d4840:	211e      	movs	r1, #30
   d4842:	f7ff ffc3 	bl	d47cc <_ZN6MS580311sendCommandEh>
}

void MS5803::sensorWait(uint8_t time)
// Delay function.  This can be modified to work outside of Arduino based MCU's
{
	delay(time);
   d4846:	2003      	movs	r0, #3
void MS5803::reset(void)
// Reset device I2C
{
   sendCommand(CMD_RESET);
   sensorWait(3);
}
   d4848:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void MS5803::sensorWait(uint8_t time)
// Delay function.  This can be modified to work outside of Arduino based MCU's
{
	delay(time);
   d484c:	f002 b8c2 	b.w	d69d4 <delay>

000d4850 <_ZN6MS580316getADCconversionE11measurement9precision>:
// Select measurement type and precision
{	
	uint32_t result;
	uint8_t highByte = 0, midByte = 0, lowByte = 0;
	
	sendCommand(CMD_ADC_CONV + _measurement + _precision);
   d4850:	f102 0340 	add.w	r3, r2, #64	; 0x40
   d4854:	4419      	add	r1, r3
}

uint32_t MS5803::getADCconversion(measurement _measurement, precision _precision)
// Retrieve ADC measurement from the device.  
// Select measurement type and precision
{	
   d4856:	b570      	push	{r4, r5, r6, lr}
	uint32_t result;
	uint8_t highByte = 0, midByte = 0, lowByte = 0;
	
	sendCommand(CMD_ADC_CONV + _measurement + _precision);
   d4858:	b2c9      	uxtb	r1, r1
}

uint32_t MS5803::getADCconversion(measurement _measurement, precision _precision)
// Retrieve ADC measurement from the device.  
// Select measurement type and precision
{	
   d485a:	4605      	mov	r5, r0
   d485c:	4614      	mov	r4, r2
	uint32_t result;
	uint8_t highByte = 0, midByte = 0, lowByte = 0;
	
	sendCommand(CMD_ADC_CONV + _measurement + _precision);
   d485e:	f7ff ffb5 	bl	d47cc <_ZN6MS580311sendCommandEh>
}

void MS5803::sensorWait(uint8_t time)
// Delay function.  This can be modified to work outside of Arduino based MCU's
{
	delay(time);
   d4862:	2001      	movs	r0, #1
   d4864:	f002 f8b6 	bl	d69d4 <delay>
	uint8_t highByte = 0, midByte = 0, lowByte = 0;
	
	sendCommand(CMD_ADC_CONV + _measurement + _precision);
	// Wait for conversion to complete
	sensorWait(1); //general delay
	switch( _precision )
   d4868:	2c08      	cmp	r4, #8
   d486a:	d811      	bhi.n	d4890 <_ZN6MS580316getADCconversionE11measurement9precision+0x40>
   d486c:	e8df f004 	tbb	[pc, r4]
   d4870:	10071005 	.word	0x10071005
   d4874:	100b1009 	.word	0x100b1009
   d4878:	0d          	.byte	0x0d
   d4879:	00          	.byte	0x00
}

void MS5803::sensorWait(uint8_t time)
// Delay function.  This can be modified to work outside of Arduino based MCU's
{
	delay(time);
   d487a:	2001      	movs	r0, #1
   d487c:	e006      	b.n	d488c <_ZN6MS580316getADCconversionE11measurement9precision+0x3c>
   d487e:	2003      	movs	r0, #3
   d4880:	e004      	b.n	d488c <_ZN6MS580316getADCconversionE11measurement9precision+0x3c>
   d4882:	2004      	movs	r0, #4
   d4884:	e002      	b.n	d488c <_ZN6MS580316getADCconversionE11measurement9precision+0x3c>
   d4886:	2006      	movs	r0, #6
   d4888:	e000      	b.n	d488c <_ZN6MS580316getADCconversionE11measurement9precision+0x3c>
   d488a:	200a      	movs	r0, #10
   d488c:	f002 f8a2 	bl	d69d4 <delay>
		case ADC_1024: sensorWait(4); break; 
		case ADC_2048: sensorWait(6); break; 
		case ADC_4096: sensorWait(10); break; 
	}	
	
	sendCommand(CMD_ADC_READ);
   d4890:	2100      	movs	r1, #0
   d4892:	4628      	mov	r0, r5
   d4894:	f7ff ff9a 	bl	d47cc <_ZN6MS580311sendCommandEh>
	Wire.requestFrom(_address, 3);
   d4898:	f002 ffc4 	bl	d7824 <_Z19__fetch_global_Wirev>
   d489c:	7a29      	ldrb	r1, [r5, #8]
   d489e:	2203      	movs	r2, #3
   d48a0:	f002 f985 	bl	d6bae <_ZN7TwoWire11requestFromEii>
uint32_t MS5803::getADCconversion(measurement _measurement, precision _precision)
// Retrieve ADC measurement from the device.  
// Select measurement type and precision
{	
	uint32_t result;
	uint8_t highByte = 0, midByte = 0, lowByte = 0;
   d48a4:	2500      	movs	r5, #0
   d48a6:	462c      	mov	r4, r5
   d48a8:	462e      	mov	r6, r5
	}	
	
	sendCommand(CMD_ADC_READ);
	Wire.requestFrom(_address, 3);
	
	while(Wire.available())    
   d48aa:	f002 ffbb 	bl	d7824 <_Z19__fetch_global_Wirev>
   d48ae:	6803      	ldr	r3, [r0, #0]
   d48b0:	691b      	ldr	r3, [r3, #16]
   d48b2:	4798      	blx	r3
   d48b4:	b190      	cbz	r0, d48dc <_ZN6MS580316getADCconversionE11measurement9precision+0x8c>
	{ 
		highByte = Wire.read();
   d48b6:	f002 ffb5 	bl	d7824 <_Z19__fetch_global_Wirev>
   d48ba:	6803      	ldr	r3, [r0, #0]
   d48bc:	695b      	ldr	r3, [r3, #20]
   d48be:	4798      	blx	r3
   d48c0:	b2c6      	uxtb	r6, r0
		midByte = Wire.read();
   d48c2:	f002 ffaf 	bl	d7824 <_Z19__fetch_global_Wirev>
   d48c6:	6803      	ldr	r3, [r0, #0]
   d48c8:	695b      	ldr	r3, [r3, #20]
   d48ca:	4798      	blx	r3
   d48cc:	b2c4      	uxtb	r4, r0
		lowByte = Wire.read();	
   d48ce:	f002 ffa9 	bl	d7824 <_Z19__fetch_global_Wirev>
   d48d2:	6803      	ldr	r3, [r0, #0]
   d48d4:	695b      	ldr	r3, [r3, #20]
   d48d6:	4798      	blx	r3
   d48d8:	b2c5      	uxtb	r5, r0
	}	
	
	sendCommand(CMD_ADC_READ);
	Wire.requestFrom(_address, 3);
	
	while(Wire.available())    
   d48da:	e7e6      	b.n	d48aa <_ZN6MS580316getADCconversionE11measurement9precision+0x5a>
		lowByte = Wire.read();	
	}
	
	result = ((uint32_t)highByte << 16) + ((uint32_t)midByte << 8) + lowByte;

	return result;
   d48dc:	0220      	lsls	r0, r4, #8
   d48de:	eb00 4006 	add.w	r0, r0, r6, lsl #16

}
   d48e2:	4428      	add	r0, r5
   d48e4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d48e8 <_ZN6MS580315getMeasurementsE9precision>:
	return pressure_reported;
}

void MS5803::getMeasurements(precision _precision)

{
   d48e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//Retrieve ADC result
	int32_t temperature_raw = getADCconversion(TEMPERATURE, _precision);
   d48ec:	460a      	mov	r2, r1
	return pressure_reported;
}

void MS5803::getMeasurements(precision _precision)

{
   d48ee:	460e      	mov	r6, r1
   d48f0:	b085      	sub	sp, #20
	//Retrieve ADC result
	int32_t temperature_raw = getADCconversion(TEMPERATURE, _precision);
   d48f2:	2110      	movs	r1, #16
	return pressure_reported;
}

void MS5803::getMeasurements(precision _precision)

{
   d48f4:	4604      	mov	r4, r0
	//Retrieve ADC result
	int32_t temperature_raw = getADCconversion(TEMPERATURE, _precision);
   d48f6:	f7ff ffab 	bl	d4850 <_ZN6MS580316getADCconversionE11measurement9precision>
	int32_t pressure_raw = getADCconversion(PRESSURE, _precision);
   d48fa:	4632      	mov	r2, r6

void MS5803::getMeasurements(precision _precision)

{
	//Retrieve ADC result
	int32_t temperature_raw = getADCconversion(TEMPERATURE, _precision);
   d48fc:	4605      	mov	r5, r0
	int32_t pressure_raw = getADCconversion(PRESSURE, _precision);
   d48fe:	2100      	movs	r1, #0
   d4900:	4620      	mov	r0, r4
   d4902:	f7ff ffa5 	bl	d4850 <_ZN6MS580316getADCconversionE11measurement9precision>
	int32_t pressure_calc;
	
	int32_t dT;
		
	//Now that we have a raw temperature, let's compute our actual.
	dT = temperature_raw - ((int32_t)coefficient[5] << 8);
   d4906:	8aa3      	ldrh	r3, [r4, #20]
void MS5803::getMeasurements(precision _precision)

{
	//Retrieve ADC result
	int32_t temperature_raw = getADCconversion(TEMPERATURE, _precision);
	int32_t pressure_raw = getADCconversion(PRESSURE, _precision);
   d4908:	4607      	mov	r7, r0
	
	int32_t dT;
		
	//Now that we have a raw temperature, let's compute our actual.
	dT = temperature_raw - ((int32_t)coefficient[5] << 8);
	temp_calc = (((int64_t)dT * coefficient[6]) >> 23) + 2000;
   d490a:	8ae0      	ldrh	r0, [r4, #22]
	int32_t pressure_calc;
	
	int32_t dT;
		
	//Now that we have a raw temperature, let's compute our actual.
	dT = temperature_raw - ((int32_t)coefficient[5] << 8);
   d490c:	eba5 2503 	sub.w	r5, r5, r3, lsl #8
	temp_calc = (((int64_t)dT * coefficient[6]) >> 23) + 2000;
   d4910:	fb80 0105 	smull	r0, r1, r0, r5
   d4914:	0dc3      	lsrs	r3, r0, #23
   d4916:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
   d491a:	f503 66fa 	add.w	r6, r3, #2000	; 0x7d0
	// TODO TESTING  _temperature_actual = temp_calc;
	
	//Now we have our first order Temperature, let's calculate the second order.
	int64_t T2, OFF2, SENS2, OFF, SENS; //working variables

	if (temp_calc < 2000) 
   d491e:	f5b6 6ffa 	cmp.w	r6, #2000	; 0x7d0
   d4922:	fb85 ab05 	smull	sl, fp, r5, r5
   d4926:	fb03 f803 	mul.w	r8, r3, r3
   d492a:	da25      	bge.n	d4978 <_ZN6MS580315getMeasurementsE9precision+0x90>
	// If temp_calc is below 20.0C
	{	
		T2 = 3 * (((int64_t)dT * dT) >> 33);
		OFF2 = 3 * ((temp_calc - 2000) * (temp_calc - 2000)) / 2;
   d492c:	eb08 0248 	add.w	r2, r8, r8, lsl #1
   d4930:	1052      	asrs	r2, r2, #1
   d4932:	4610      	mov	r0, r2
   d4934:	17d1      	asrs	r1, r2, #31
		SENS2 = 5 * ((temp_calc - 2000) * (temp_calc - 2000)) / 8;
		
		if(temp_calc < -1500)
   d4936:	4a4c      	ldr	r2, [pc, #304]	; (d4a68 <_ZN6MS580315getMeasurementsE9precision+0x180>)

	if (temp_calc < 2000) 
	// If temp_calc is below 20.0C
	{	
		T2 = 3 * (((int64_t)dT * dT) >> 33);
		OFF2 = 3 * ((temp_calc - 2000) * (temp_calc - 2000)) / 2;
   d4938:	e9cd 0100 	strd	r0, r1, [sp]
		SENS2 = 5 * ((temp_calc - 2000) * (temp_calc - 2000)) / 8;
   d493c:	eb08 0088 	add.w	r0, r8, r8, lsl #2
	int64_t T2, OFF2, SENS2, OFF, SENS; //working variables

	if (temp_calc < 2000) 
	// If temp_calc is below 20.0C
	{	
		T2 = 3 * (((int64_t)dT * dT) >> 33);
   d4940:	ea4f 0e6b 	mov.w	lr, fp, asr #1
		OFF2 = 3 * ((temp_calc - 2000) * (temp_calc - 2000)) / 2;
		SENS2 = 5 * ((temp_calc - 2000) * (temp_calc - 2000)) / 8;
   d4944:	10c0      	asrs	r0, r0, #3
		
		if(temp_calc < -1500)
   d4946:	4296      	cmp	r6, r2
	int64_t T2, OFF2, SENS2, OFF, SENS; //working variables

	if (temp_calc < 2000) 
	// If temp_calc is below 20.0C
	{	
		T2 = 3 * (((int64_t)dT * dT) >> 33);
   d4948:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
		OFF2 = 3 * ((temp_calc - 2000) * (temp_calc - 2000)) / 2;
		SENS2 = 5 * ((temp_calc - 2000) * (temp_calc - 2000)) / 8;
   d494c:	ea4f 71e0 	mov.w	r1, r0, asr #31
		
		if(temp_calc < -1500)
   d4950:	da28      	bge.n	d49a4 <_ZN6MS580315getMeasurementsE9precision+0xbc>
		// If temp_calc is below -15.0C 
		{
			OFF2 = OFF2 + 7 * ((temp_calc + 1500) * (temp_calc + 1500));
   d4952:	e9dd 8900 	ldrd	r8, r9, [sp]
   d4956:	f603 53ac 	addw	r3, r3, #3500	; 0xdac
   d495a:	435b      	muls	r3, r3
   d495c:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
   d4960:	eb18 0802 	adds.w	r8, r8, r2
			SENS2 = SENS2 + 4 * ((temp_calc + 1500) * (temp_calc + 1500));
   d4964:	ea4f 0383 	mov.w	r3, r3, lsl #2
		SENS2 = 5 * ((temp_calc - 2000) * (temp_calc - 2000)) / 8;
		
		if(temp_calc < -1500)
		// If temp_calc is below -15.0C 
		{
			OFF2 = OFF2 + 7 * ((temp_calc + 1500) * (temp_calc + 1500));
   d4968:	eb49 79e2 	adc.w	r9, r9, r2, asr #31
			SENS2 = SENS2 + 4 * ((temp_calc + 1500) * (temp_calc + 1500));
   d496c:	18c0      	adds	r0, r0, r3
		SENS2 = 5 * ((temp_calc - 2000) * (temp_calc - 2000)) / 8;
		
		if(temp_calc < -1500)
		// If temp_calc is below -15.0C 
		{
			OFF2 = OFF2 + 7 * ((temp_calc + 1500) * (temp_calc + 1500));
   d496e:	e9cd 8900 	strd	r8, r9, [sp]
			SENS2 = SENS2 + 4 * ((temp_calc + 1500) * (temp_calc + 1500));
   d4972:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   d4976:	e015      	b.n	d49a4 <_ZN6MS580315getMeasurementsE9precision+0xbc>
		}
    } 
	else
	// If temp_calc is above 20.0C
	{ 
		T2 = 7 * ((uint64_t)dT * dT)/pow(2,37);
   d4978:	2307      	movs	r3, #7
   d497a:	fbaa 0103 	umull	r0, r1, sl, r3
   d497e:	fb03 110b 	mla	r1, r3, fp, r1
   d4982:	f003 fa61 	bl	d7e48 <__aeabi_ul2d>
   d4986:	2200      	movs	r2, #0
   d4988:	4b38      	ldr	r3, [pc, #224]	; (d4a6c <_ZN6MS580315getMeasurementsE9precision+0x184>)
   d498a:	f003 fa93 	bl	d7eb4 <__aeabi_dmul>
		OFF2 = ((temp_calc - 2000) * (temp_calc - 2000)) / 16;
   d498e:	ea4f 1828 	mov.w	r8, r8, asr #4
		}
    } 
	else
	// If temp_calc is above 20.0C
	{ 
		T2 = 7 * ((uint64_t)dT * dT)/pow(2,37);
   d4992:	f003 fdd7 	bl	d8544 <__aeabi_d2lz>
		OFF2 = ((temp_calc - 2000) * (temp_calc - 2000)) / 16;
   d4996:	4642      	mov	r2, r8
   d4998:	17d3      	asrs	r3, r2, #31
   d499a:	e9cd 2300 	strd	r2, r3, [sp]
		}
    } 
	else
	// If temp_calc is above 20.0C
	{ 
		T2 = 7 * ((uint64_t)dT * dT)/pow(2,37);
   d499e:	4686      	mov	lr, r0
		OFF2 = ((temp_calc - 2000) * (temp_calc - 2000)) / 16;
		SENS2 = 0;
   d49a0:	2100      	movs	r1, #0
   d49a2:	2000      	movs	r0, #0
	}
	
	// Now bring it all together to apply offsets 
	
	OFF = ((int64_t)coefficient[2] << 16) + (((coefficient[4] * (int64_t)dT)) >> 7);
   d49a4:	f8b4 8012 	ldrh.w	r8, [r4, #18]
   d49a8:	89e2      	ldrh	r2, [r4, #14]
   d49aa:	fb88 8905 	smull	r8, r9, r8, r5
   d49ae:	ea4f 4a02 	mov.w	sl, r2, lsl #16
   d49b2:	ea4f 12d8 	mov.w	r2, r8, lsr #7
   d49b6:	ea42 6249 	orr.w	r2, r2, r9, lsl #25
   d49ba:	eb1a 0802 	adds.w	r8, sl, r2
   d49be:	f04f 0b00 	mov.w	fp, #0
   d49c2:	ea4f 13e9 	mov.w	r3, r9, asr #7
   d49c6:	eb4b 0903 	adc.w	r9, fp, r3
   d49ca:	e9cd 8902 	strd	r8, r9, [sp, #8]
	SENS = ((int64_t)coefficient[1] << 15) + (((coefficient[3] * (int64_t)dT)) >> 8);
   d49ce:	f8b4 8010 	ldrh.w	r8, [r4, #16]
   d49d2:	89a2      	ldrh	r2, [r4, #12]
   d49d4:	fb88 8905 	smull	r8, r9, r8, r5
   d49d8:	ea4f 3ac2 	mov.w	sl, r2, lsl #15
   d49dc:	ea4f 2218 	mov.w	r2, r8, lsr #8
   d49e0:	ea42 6209 	orr.w	r2, r2, r9, lsl #24
   d49e4:	eb12 020a 	adds.w	r2, r2, sl
   d49e8:	f04f 0b00 	mov.w	fp, #0
   d49ec:	ea4f 2329 	mov.w	r3, r9, asr #8
   d49f0:	eb43 030b 	adc.w	r3, r3, fp
	

	pressure_calc = (((SENS * pressure_raw) / 2097152 ) - OFF) / 32768;
	
	_temperature_actual = temp_calc ;
	_pressure_actual = pressure_calc ; // 10;// pressure_calc;
   d49f4:	1a12      	subs	r2, r2, r0
   d49f6:	eb63 0301 	sbc.w	r3, r3, r1
   d49fa:	17f9      	asrs	r1, r7, #31
   d49fc:	4351      	muls	r1, r2
   d49fe:	fb07 1103 	mla	r1, r7, r3, r1
   d4a02:	fba2 2307 	umull	r2, r3, r2, r7
   d4a06:	440b      	add	r3, r1
   d4a08:	2a00      	cmp	r2, #0
	// Now lets calculate the pressure
	

	pressure_calc = (((SENS * pressure_raw) / 2097152 ) - OFF) / 32768;
	
	_temperature_actual = temp_calc ;
   d4a0a:	ebce 0606 	rsb	r6, lr, r6
	_pressure_actual = pressure_calc ; // 10;// pressure_calc;
   d4a0e:	f173 0100 	sbcs.w	r1, r3, #0
	// Now lets calculate the pressure
	

	pressure_calc = (((SENS * pressure_raw) / 2097152 ) - OFF) / 32768;
	
	_temperature_actual = temp_calc ;
   d4a12:	6026      	str	r6, [r4, #0]
	_pressure_actual = pressure_calc ; // 10;// pressure_calc;
   d4a14:	da03      	bge.n	d4a1e <_ZN6MS580315getMeasurementsE9precision+0x136>
   d4a16:	4816      	ldr	r0, [pc, #88]	; (d4a70 <_ZN6MS580315getMeasurementsE9precision+0x188>)
   d4a18:	2100      	movs	r1, #0
   d4a1a:	1812      	adds	r2, r2, r0
   d4a1c:	414b      	adcs	r3, r1
   d4a1e:	0d50      	lsrs	r0, r2, #21
   d4a20:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
   d4a24:	1559      	asrs	r1, r3, #21
   d4a26:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
   d4a2a:	e9dd 2300 	ldrd	r2, r3, [sp]
   d4a2e:	ebba 0a02 	subs.w	sl, sl, r2
   d4a32:	eb6b 0b03 	sbc.w	fp, fp, r3
   d4a36:	ebb0 0a0a 	subs.w	sl, r0, sl
   d4a3a:	eb61 0b0b 	sbc.w	fp, r1, fp
   d4a3e:	f1ba 0f00 	cmp.w	sl, #0
   d4a42:	f17b 0300 	sbcs.w	r3, fp, #0
   d4a46:	da06      	bge.n	d4a56 <_ZN6MS580315getMeasurementsE9precision+0x16e>
   d4a48:	f647 72ff 	movw	r2, #32767	; 0x7fff
   d4a4c:	2300      	movs	r3, #0
   d4a4e:	eb1a 0a02 	adds.w	sl, sl, r2
   d4a52:	eb4b 0b03 	adc.w	fp, fp, r3
   d4a56:	ea4f 33da 	mov.w	r3, sl, lsr #15
   d4a5a:	ea43 434b 	orr.w	r3, r3, fp, lsl #17
   d4a5e:	6063      	str	r3, [r4, #4]
	

}
   d4a60:	b005      	add	sp, #20
   d4a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4a66:	bf00      	nop
   d4a68:	fffffa24 	.word	0xfffffa24
   d4a6c:	3da00000 	.word	0x3da00000
   d4a70:	001fffff 	.word	0x001fffff

000d4a74 <_ZN6MS580311getPressureE9precision>:
	}
}

float MS5803::getPressure(precision _precision)
// Return a pressure reading units Pa.
{
   d4a74:	b510      	push	{r4, lr}
   d4a76:	4604      	mov	r4, r0
	getMeasurements(_precision);
   d4a78:	f7ff ff36 	bl	d48e8 <_ZN6MS580315getMeasurementsE9precision>
	float pressure_reported;
	pressure_reported = _pressure_actual;
   d4a7c:	ed94 0a01 	vldr	s0, [r4, #4]
   d4a80:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	pressure_reported = pressure_reported / 10.0f;
	return pressure_reported;
}
   d4a84:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   d4a88:	ee80 0a27 	vdiv.f32	s0, s0, s15
   d4a8c:	bd10      	pop	{r4, pc}

000d4a8e <_GLOBAL__sub_I__ZN6MS5803C2E11ms5803_addr>:
   d4a8e:	f001 bd7d 	b.w	d658c <HAL_Pin_Map>

000d4a92 <_GLOBAL__sub_I__ZN4DS18C2Etb>:
   d4a92:	f001 bd7b 	b.w	d658c <HAL_Pin_Map>
	...

000d4a98 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4a98:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4a9a:	6803      	ldr	r3, [r0, #0]
   d4a9c:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4a9e:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4aa0:	d904      	bls.n	d4aac <nrf_gpio_pin_port_decode+0x14>
   d4aa2:	4a07      	ldr	r2, [pc, #28]	; (d4ac0 <nrf_gpio_pin_port_decode+0x28>)
   d4aa4:	2100      	movs	r1, #0
   d4aa6:	200a      	movs	r0, #10
   d4aa8:	f001 fed0 	bl	d684c <panic_>
#if (GPIO_COUNT == 1)
    // The oldest definition case
    return NRF_GPIO;
#else
    if (*p_pin < P0_PIN_NUM)
   d4aac:	6823      	ldr	r3, [r4, #0]
   d4aae:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4ab0:	bf83      	ittte	hi
   d4ab2:	f003 031f 	andhi.w	r3, r3, #31
   d4ab6:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d4ab8:	4802      	ldrhi	r0, [pc, #8]	; (d4ac4 <nrf_gpio_pin_port_decode+0x2c>)
    // The oldest definition case
    return NRF_GPIO;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d4aba:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d4abe:	bd10      	pop	{r4, pc}
   d4ac0:	000d653d 	.word	0x000d653d
   d4ac4:	50000300 	.word	0x50000300

000d4ac8 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>:
      return HAL_GPIO_Read(_pin);
    }

  #else

    inline void digitalWriteFastLow() {
   d4ac8:	b507      	push	{r0, r1, r2, lr}
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4aca:	4b0b      	ldr	r3, [pc, #44]	; (d4af8 <_ZN7OneWire19digitalWriteFastLowEv.isra.0+0x30>)
   d4acc:	681b      	ldr	r3, [r3, #0]
   d4ace:	0100      	lsls	r0, r0, #4
   d4ad0:	1819      	adds	r1, r3, r0
   d4ad2:	5c1a      	ldrb	r2, [r3, r0]
   d4ad4:	784b      	ldrb	r3, [r1, #1]
   d4ad6:	a802      	add	r0, sp, #8
   d4ad8:	f003 031f 	and.w	r3, r3, #31
   d4adc:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4ae0:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4ae4:	f7ff ffd8 	bl	d4a98 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4ae8:	9a01      	ldr	r2, [sp, #4]
   d4aea:	2301      	movs	r3, #1
   d4aec:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4aee:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
      pinResetFast(_pin);
    }
   d4af2:	b003      	add	sp, #12
   d4af4:	f85d fb04 	ldr.w	pc, [sp], #4
   d4af8:	2003e46c 	.word	0x2003e46c

000d4afc <_ZN7OneWire20digitalWriteFastHighEv.isra.1>:

    inline void digitalWriteFastHigh() {
   d4afc:	b507      	push	{r0, r1, r2, lr}

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4afe:	4b0b      	ldr	r3, [pc, #44]	; (d4b2c <_ZN7OneWire20digitalWriteFastHighEv.isra.1+0x30>)
   d4b00:	681b      	ldr	r3, [r3, #0]
   d4b02:	0100      	lsls	r0, r0, #4
   d4b04:	1819      	adds	r1, r3, r0
   d4b06:	5c1a      	ldrb	r2, [r3, r0]
   d4b08:	784b      	ldrb	r3, [r1, #1]
   d4b0a:	a802      	add	r0, sp, #8
   d4b0c:	f003 031f 	and.w	r3, r3, #31
   d4b10:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d4b14:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4b18:	f7ff ffbe 	bl	d4a98 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4b1c:	9a01      	ldr	r2, [sp, #4]
   d4b1e:	2301      	movs	r3, #1
   d4b20:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4b22:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
      pinSetFast(_pin);
    }
   d4b26:	b003      	add	sp, #12
   d4b28:	f85d fb04 	ldr.w	pc, [sp], #4
   d4b2c:	2003e46c 	.word	0x2003e46c

000d4b30 <_ZN7OneWire15digitalReadFastEv.isra.4>:
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
    }

    inline uint8_t digitalReadFast(void){
   d4b30:	b513      	push	{r0, r1, r4, lr}
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4b32:	4b0f      	ldr	r3, [pc, #60]	; (d4b70 <_ZN7OneWire15digitalReadFastEv.isra.4+0x40>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	0100      	lsls	r0, r0, #4
   d4b38:	181a      	adds	r2, r3, r0
   d4b3a:	5c1c      	ldrb	r4, [r3, r0]
   d4b3c:	7853      	ldrb	r3, [r2, #1]
   d4b3e:	a802      	add	r0, sp, #8
   d4b40:	f003 031f 	and.w	r3, r3, #31
   d4b44:	ea43 1444 	orr.w	r4, r3, r4, lsl #5
   d4b48:	f840 4d04 	str.w	r4, [r0, #-4]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4b4c:	f7ff ffa4 	bl	d4a98 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d4b50:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
   d4b54:	a802      	add	r0, sp, #8
   d4b56:	f840 4d08 	str.w	r4, [r0, #-8]!
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4b5a:	f7ff ff9d 	bl	d4a98 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d4b5e:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
      return pinReadFast(_pin);
   d4b62:	9800      	ldr	r0, [sp, #0]
   d4b64:	fa23 f000 	lsr.w	r0, r3, r0
    }
   d4b68:	f000 0001 	and.w	r0, r0, #1
   d4b6c:	b002      	add	sp, #8
   d4b6e:	bd10      	pop	{r4, pc}
   d4b70:	2003e46c 	.word	0x2003e46c

000d4b74 <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
   d4b74:	b538      	push	{r3, r4, r5, lr}
   d4b76:	4604      	mov	r4, r0
   d4b78:	460d      	mov	r5, r1
{
    pinMode(pin, INPUT);
   d4b7a:	4628      	mov	r0, r5
   d4b7c:	2100      	movs	r1, #0
   d4b7e:	f002 fe27 	bl	d77d0 <pinMode>
    _pin = pin;
   d4b82:	8025      	strh	r5, [r4, #0]
}
   d4b84:	4620      	mov	r0, r4
   d4b86:	bd38      	pop	{r3, r4, r5, pc}

000d4b88 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
   d4b88:	b538      	push	{r3, r4, r5, lr}
   d4b8a:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
   d4b8c:	f002 f826 	bl	d6bdc <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4b90:	2100      	movs	r1, #0
   d4b92:	8828      	ldrh	r0, [r5, #0]
   d4b94:	f001 fd02 	bl	d659c <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
   d4b98:	f002 f822 	bl	d6be0 <_Z10interruptsv>
   d4b9c:	247d      	movs	r4, #125	; 0x7d
   d4b9e:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do {
        if (--retries == 0) return 0;
   d4ba0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   d4ba4:	d02b      	beq.n	d4bfe <_ZN7OneWire5resetEv+0x76>
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4ba6:	2002      	movs	r0, #2
   d4ba8:	f001 fcc8 	bl	d653c <HAL_Delay_Microseconds>

        delayMicroseconds(2);
    } while ( !digitalReadFast());
   d4bac:	8828      	ldrh	r0, [r5, #0]
   d4bae:	f7ff ffbf 	bl	d4b30 <_ZN7OneWire15digitalReadFastEv.isra.4>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do {
   d4bb2:	2800      	cmp	r0, #0
   d4bb4:	d0f3      	beq.n	d4b9e <_ZN7OneWire5resetEv+0x16>
        if (--retries == 0) return 0;

        delayMicroseconds(2);
    } while ( !digitalReadFast());

    noInterrupts();
   d4bb6:	f002 f811 	bl	d6bdc <_Z12noInterruptsv>

    digitalWriteFastLow();
   d4bba:	8828      	ldrh	r0, [r5, #0]
   d4bbc:	f7ff ff84 	bl	d4ac8 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4bc0:	2101      	movs	r1, #1
   d4bc2:	8828      	ldrh	r0, [r5, #0]
   d4bc4:	f001 fcea 	bl	d659c <HAL_Pin_Mode>
    pinModeFastOutput();   // drive output low

    interrupts();
   d4bc8:	f002 f80a 	bl	d6be0 <_Z10interruptsv>
   d4bcc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   d4bd0:	f001 fcb4 	bl	d653c <HAL_Delay_Microseconds>
    delayMicroseconds(480);
    noInterrupts();
   d4bd4:	f002 f802 	bl	d6bdc <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4bd8:	2100      	movs	r1, #0
   d4bda:	8828      	ldrh	r0, [r5, #0]
   d4bdc:	f001 fcde 	bl	d659c <HAL_Pin_Mode>
   d4be0:	2046      	movs	r0, #70	; 0x46
   d4be2:	f001 fcab 	bl	d653c <HAL_Delay_Microseconds>

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
   d4be6:	8828      	ldrh	r0, [r5, #0]
   d4be8:	f7ff ffa2 	bl	d4b30 <_ZN7OneWire15digitalReadFastEv.isra.4>
   d4bec:	fab0 f480 	clz	r4, r0

    interrupts();
   d4bf0:	f001 fff6 	bl	d6be0 <_Z10interruptsv>
   d4bf4:	f44f 70cd 	mov.w	r0, #410	; 0x19a

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
   d4bf8:	0964      	lsrs	r4, r4, #5
   d4bfa:	f001 fc9f 	bl	d653c <HAL_Delay_Microseconds>
    interrupts();

    delayMicroseconds(410);

    return r;
}
   d4bfe:	4620      	mov	r0, r4
   d4c00:	bd38      	pop	{r3, r4, r5, pc}

000d4c02 <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
   d4c02:	b538      	push	{r3, r4, r5, lr}
    if (v & 1) {
   d4c04:	f011 0501 	ands.w	r5, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
   d4c08:	4604      	mov	r4, r0
    if (v & 1) {
   d4c0a:	d013      	beq.n	d4c34 <_ZN7OneWire9write_bitEh+0x32>
        noInterrupts();
   d4c0c:	f001 ffe6 	bl	d6bdc <_Z12noInterruptsv>

        digitalWriteFastLow();
   d4c10:	8820      	ldrh	r0, [r4, #0]
   d4c12:	f7ff ff59 	bl	d4ac8 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4c16:	2101      	movs	r1, #1
   d4c18:	8820      	ldrh	r0, [r4, #0]
   d4c1a:	f001 fcbf 	bl	d659c <HAL_Pin_Mode>
   d4c1e:	200a      	movs	r0, #10
   d4c20:	f001 fc8c 	bl	d653c <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4c24:	8820      	ldrh	r0, [r4, #0]
   d4c26:	2100      	movs	r1, #0
   d4c28:	f001 fcb8 	bl	d659c <HAL_Pin_Mode>

        delayMicroseconds(10);

        pinModeFastInput();    // float high

        interrupts();
   d4c2c:	f001 ffd8 	bl	d6be0 <_Z10interruptsv>
   d4c30:	2037      	movs	r0, #55	; 0x37
   d4c32:	e012      	b.n	d4c5a <_ZN7OneWire9write_bitEh+0x58>

        delayMicroseconds(55);
    } else {
        noInterrupts();
   d4c34:	f001 ffd2 	bl	d6bdc <_Z12noInterruptsv>

        digitalWriteFastLow();
   d4c38:	8820      	ldrh	r0, [r4, #0]
   d4c3a:	f7ff ff45 	bl	d4ac8 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4c3e:	2101      	movs	r1, #1
   d4c40:	8820      	ldrh	r0, [r4, #0]
   d4c42:	f001 fcab 	bl	d659c <HAL_Pin_Mode>
   d4c46:	2041      	movs	r0, #65	; 0x41
   d4c48:	f001 fc78 	bl	d653c <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4c4c:	8820      	ldrh	r0, [r4, #0]
   d4c4e:	4629      	mov	r1, r5
   d4c50:	f001 fca4 	bl	d659c <HAL_Pin_Mode>

        delayMicroseconds(65);

        pinModeFastInput();    // float high

        interrupts();
   d4c54:	f001 ffc4 	bl	d6be0 <_Z10interruptsv>
   d4c58:	2005      	movs	r0, #5

        delayMicroseconds(5);
    }
}
   d4c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d4c5e:	f001 bc6d 	b.w	d653c <HAL_Delay_Microseconds>

000d4c62 <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
   d4c62:	b510      	push	{r4, lr}
   d4c64:	4604      	mov	r4, r0
    uint8_t r;

    noInterrupts();
   d4c66:	f001 ffb9 	bl	d6bdc <_Z12noInterruptsv>

    digitalWriteFastLow();
   d4c6a:	8820      	ldrh	r0, [r4, #0]
   d4c6c:	f7ff ff2c 	bl	d4ac8 <_ZN7OneWire19digitalWriteFastLowEv.isra.0>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4c70:	2101      	movs	r1, #1
   d4c72:	8820      	ldrh	r0, [r4, #0]
   d4c74:	f001 fc92 	bl	d659c <HAL_Pin_Mode>
   d4c78:	2003      	movs	r0, #3
   d4c7a:	f001 fc5f 	bl	d653c <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
   d4c7e:	2100      	movs	r1, #0
   d4c80:	8820      	ldrh	r0, [r4, #0]
   d4c82:	f001 fc8b 	bl	d659c <HAL_Pin_Mode>
   d4c86:	200a      	movs	r0, #10
   d4c88:	f001 fc58 	bl	d653c <HAL_Delay_Microseconds>

    pinModeFastInput();    // let pin float, pull up will raise

    delayMicroseconds(10);

    r = digitalReadFast();
   d4c8c:	8820      	ldrh	r0, [r4, #0]
   d4c8e:	f7ff ff4f 	bl	d4b30 <_ZN7OneWire15digitalReadFastEv.isra.4>
   d4c92:	4604      	mov	r4, r0

    interrupts();
   d4c94:	f001 ffa4 	bl	d6be0 <_Z10interruptsv>
   d4c98:	2035      	movs	r0, #53	; 0x35
   d4c9a:	f001 fc4f 	bl	d653c <HAL_Delay_Microseconds>
    delayMicroseconds(53);

    return r;
}
   d4c9e:	4620      	mov	r0, r4
   d4ca0:	bd10      	pop	{r4, pc}

000d4ca2 <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
   d4ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4ca6:	4605      	mov	r5, r0
   d4ca8:	4688      	mov	r8, r1
   d4caa:	4617      	mov	r7, r2
   d4cac:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4cae:	2401      	movs	r4, #1
        OneWire::write_bit( (bitMask & v)?1:0);
   d4cb0:	ea18 0f04 	tst.w	r8, r4
   d4cb4:	bf14      	ite	ne
   d4cb6:	2101      	movne	r1, #1
   d4cb8:	2100      	moveq	r1, #0
   d4cba:	4628      	mov	r0, r5
   d4cbc:	f7ff ffa1 	bl	d4c02 <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4cc0:	0064      	lsls	r4, r4, #1
   d4cc2:	3e01      	subs	r6, #1
   d4cc4:	b2e4      	uxtb	r4, r4
   d4cc6:	d1f3      	bne.n	d4cb0 <_ZN7OneWire5writeEhh+0xe>
        OneWire::write_bit( (bitMask & v)?1:0);
    }

    if ( power) {
   d4cc8:	b167      	cbz	r7, d4ce4 <_ZN7OneWire5writeEhh+0x42>
        noInterrupts();
   d4cca:	f001 ff87 	bl	d6bdc <_Z12noInterruptsv>

        digitalWriteFastHigh();
   d4cce:	8828      	ldrh	r0, [r5, #0]
   d4cd0:	f7ff ff14 	bl	d4afc <_ZN7OneWire20digitalWriteFastHighEv.isra.1>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
   d4cd4:	8828      	ldrh	r0, [r5, #0]
   d4cd6:	2101      	movs	r1, #1
   d4cd8:	f001 fc60 	bl	d659c <HAL_Pin_Mode>
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
    }
}
   d4cdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
   d4ce0:	f001 bf7e 	b.w	d6be0 <_Z10interruptsv>
   d4ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4ce8 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read() 
{
   d4ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4cea:	4607      	mov	r7, r0
   d4cec:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
   d4cee:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4cf0:	2401      	movs	r4, #1
        if ( OneWire::read_bit()) r |= bitMask;
   d4cf2:	4638      	mov	r0, r7
   d4cf4:	f7ff ffb5 	bl	d4c62 <_ZN7OneWire8read_bitEv>
   d4cf8:	b100      	cbz	r0, d4cfc <_ZN7OneWire4readEv+0x14>
   d4cfa:	4325      	orrs	r5, r4
uint8_t OneWire::read() 
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
   d4cfc:	0064      	lsls	r4, r4, #1
   d4cfe:	3e01      	subs	r6, #1
   d4d00:	b2e4      	uxtb	r4, r4
   d4d02:	d1f6      	bne.n	d4cf2 <_ZN7OneWire4readEv+0xa>
        if ( OneWire::read_bit()) r |= bitMask;
    }

    return r;
}
   d4d04:	4628      	mov	r0, r5
   d4d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d08 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4d08:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55);           // Choose ROM
   d4d0a:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4d0c:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55);           // Choose ROM
   d4d0e:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
   d4d10:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55);           // Choose ROM
   d4d12:	f7ff ffc6 	bl	d4ca2 <_ZN7OneWire5writeEhh>
   d4d16:	1e65      	subs	r5, r4, #1
   d4d18:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++) write(rom[i]);
   d4d1a:	f815 1f01 	ldrb.w	r1, [r5, #1]!
   d4d1e:	2200      	movs	r2, #0
   d4d20:	4630      	mov	r0, r6
   d4d22:	f7ff ffbe 	bl	d4ca2 <_ZN7OneWire5writeEhh>
   d4d26:	42a5      	cmp	r5, r4
   d4d28:	d1f7      	bne.n	d4d1a <_ZN7OneWire6selectEPKh+0x12>
}
   d4d2a:	bd70      	pop	{r4, r5, r6, pc}

000d4d2c <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC);           // Skip ROM
   d4d2c:	2200      	movs	r2, #0
   d4d2e:	21cc      	movs	r1, #204	; 0xcc
   d4d30:	f7ff bfb7 	b.w	d4ca2 <_ZN7OneWire5writeEhh>

000d4d34 <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
   d4d34:	2300      	movs	r3, #0
   d4d36:	7283      	strb	r3, [r0, #10]
    LastDeviceFlag = FALSE;
   d4d38:	7303      	strb	r3, [r0, #12]
    LastFamilyDiscrepancy = 0;
   d4d3a:	72c3      	strb	r3, [r0, #11]
   d4d3c:	f100 020a 	add.w	r2, r0, #10
   d4d40:	3002      	adds	r0, #2

    for(int i = 7; ; i--) {
        ROM_NO[i] = 0;
   d4d42:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if ( i == 0) break;
   d4d46:	4282      	cmp	r2, r0
   d4d48:	d1fb      	bne.n	d4d42 <_ZN7OneWire12reset_searchEv+0xe>
    }
}
   d4d4a:	4770      	bx	lr

000d4d4c <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d4d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d4d50:	7b05      	ldrb	r5, [r0, #12]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
   d4d52:	4604      	mov	r4, r0
   d4d54:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
   d4d56:	2d00      	cmp	r5, #0
   d4d58:	d15e      	bne.n	d4e18 <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset()){
   d4d5a:	f7ff ff15 	bl	d4b88 <_ZN7OneWire5resetEv>
   d4d5e:	b920      	cbnz	r0, d4d6a <_ZN7OneWire6searchEPh+0x1e>
            // reset the search
            LastDiscrepancy = 0;
   d4d60:	72a0      	strb	r0, [r4, #10]
            LastDeviceFlag = FALSE;
   d4d62:	7320      	strb	r0, [r4, #12]
            LastFamilyDiscrepancy = 0;
   d4d64:	72e0      	strb	r0, [r4, #11]

            return FALSE;
   d4d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
   d4d6a:	462a      	mov	r2, r5
   d4d6c:	21f0      	movs	r1, #240	; 0xf0
   d4d6e:	4620      	mov	r0, r4
   d4d70:	f7ff ff97 	bl	d4ca2 <_ZN7OneWire5writeEhh>

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
   d4d74:	2601      	movs	r6, #1

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
   d4d76:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d4d78:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
   d4d7a:	4620      	mov	r0, r4
   d4d7c:	f7ff ff71 	bl	d4c62 <_ZN7OneWire8read_bitEv>
   d4d80:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
   d4d82:	4620      	mov	r0, r4
   d4d84:	f7ff ff6d 	bl	d4c62 <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1)){
   d4d88:	f1b9 0f01 	cmp.w	r9, #1
   d4d8c:	d102      	bne.n	d4d94 <_ZN7OneWire6searchEPh+0x48>
   d4d8e:	2801      	cmp	r0, #1
   d4d90:	d11b      	bne.n	d4dca <_ZN7OneWire6searchEPh+0x7e>
   d4d92:	e037      	b.n	d4e04 <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit){
   d4d94:	4581      	cmp	r9, r0
   d4d96:	eb04 0305 	add.w	r3, r4, r5
   d4d9a:	d11e      	bne.n	d4dda <_ZN7OneWire6searchEPh+0x8e>
                    search_direction = id_bit;  // bit write value for search
                }
                else{
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
   d4d9c:	7aa2      	ldrb	r2, [r4, #10]
   d4d9e:	4297      	cmp	r7, r2
   d4da0:	d207      	bcs.n	d4db2 <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
   d4da2:	789a      	ldrb	r2, [r3, #2]
   d4da4:	4216      	tst	r6, r2
   d4da6:	bf14      	ite	ne
   d4da8:	f04f 0901 	movne.w	r9, #1
   d4dac:	f04f 0900 	moveq.w	r9, #0
   d4db0:	e004      	b.n	d4dbc <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
   d4db2:	bf0c      	ite	eq
   d4db4:	f04f 0901 	moveq.w	r9, #1
   d4db8:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0){
   d4dbc:	f1b9 0f00 	cmp.w	r9, #0
   d4dc0:	d103      	bne.n	d4dca <_ZN7OneWire6searchEPh+0x7e>
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
   d4dc2:	2f08      	cmp	r7, #8
   d4dc4:	d808      	bhi.n	d4dd8 <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
   d4dc6:	72e7      	strb	r7, [r4, #11]
   d4dc8:	e006      	b.n	d4dd8 <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
   d4dca:	1962      	adds	r2, r4, r5
   d4dcc:	f04f 0901 	mov.w	r9, #1
   d4dd0:	7893      	ldrb	r3, [r2, #2]
   d4dd2:	4333      	orrs	r3, r6
   d4dd4:	7093      	strb	r3, [r2, #2]
   d4dd6:	e004      	b.n	d4de2 <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
   d4dd8:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;
   d4dda:	789a      	ldrb	r2, [r3, #2]
   d4ddc:	ea22 0206 	bic.w	r2, r2, r6
   d4de0:	709a      	strb	r2, [r3, #2]

                // serial number search direction write bit
                write_bit(search_direction);
   d4de2:	4649      	mov	r1, r9
   d4de4:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
   d4de6:	0076      	lsls	r6, r6, #1
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
   d4de8:	f7ff ff0b 	bl	d4c02 <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
   d4dec:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
   d4df0:	bf04      	itt	eq
   d4df2:	3501      	addeq	r5, #1
   d4df4:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d4df6:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
   d4dfa:	bf08      	it	eq
   d4dfc:	2601      	moveq	r6, #1
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
   d4dfe:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
   d4e00:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
   d4e02:	d9ba      	bls.n	d4d7a <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
   d4e04:	2f40      	cmp	r7, #64	; 0x40
   d4e06:	d907      	bls.n	d4e18 <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
   d4e08:	f884 a00a 	strb.w	sl, [r4, #10]

            // check for last device
            if (LastDiscrepancy == 0)
   d4e0c:	f1ba 0f00 	cmp.w	sl, #0
   d4e10:	d112      	bne.n	d4e38 <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
   d4e12:	2301      	movs	r3, #1
   d4e14:	7323      	strb	r3, [r4, #12]
   d4e16:	e00f      	b.n	d4e38 <_ZN7OneWire6searchEPh+0xec>
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
        LastDiscrepancy = 0;
   d4e18:	2000      	movs	r0, #0
   d4e1a:	72a0      	strb	r0, [r4, #10]
        LastDeviceFlag = FALSE;
   d4e1c:	7320      	strb	r0, [r4, #12]
        LastFamilyDiscrepancy = 0;
   d4e1e:	72e0      	strb	r0, [r4, #11]
   d4e20:	1c63      	adds	r3, r4, #1
   d4e22:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d4e26:	3409      	adds	r4, #9
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
   d4e28:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   d4e2c:	f808 2f01 	strb.w	r2, [r8, #1]!
   d4e30:	42a3      	cmp	r3, r4
   d4e32:	d1f9      	bne.n	d4e28 <_ZN7OneWire6searchEPh+0xdc>
   d4e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
   d4e38:	78a3      	ldrb	r3, [r4, #2]
   d4e3a:	2b00      	cmp	r3, #0
   d4e3c:	d0ec      	beq.n	d4e18 <_ZN7OneWire6searchEPh+0xcc>
   d4e3e:	2001      	movs	r0, #1
   d4e40:	e7ee      	b.n	d4e20 <_ZN7OneWire6searchEPh+0xd4>

000d4e42 <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
   d4e42:	b530      	push	{r4, r5, lr}
   d4e44:	4605      	mov	r5, r0
    uint8_t crc = 0;
   d4e46:	2000      	movs	r0, #0

    while (len--) {
   d4e48:	3901      	subs	r1, #1
   d4e4a:	b2c9      	uxtb	r1, r1
   d4e4c:	29ff      	cmp	r1, #255	; 0xff
   d4e4e:	d013      	beq.n	d4e78 <_ZN7OneWire4crc8EPhh+0x36>
        uint8_t inbyte = *addr++;
   d4e50:	f815 4b01 	ldrb.w	r4, [r5], #1
   d4e54:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--) {
            uint8_t mix = (crc ^ inbyte) & 0x01;
   d4e56:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix) crc ^= 0x8C;
   d4e5a:	f013 0f01 	tst.w	r3, #1
   d4e5e:	ea4f 0050 	mov.w	r0, r0, lsr #1
   d4e62:	bf1c      	itt	ne
   d4e64:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
   d4e68:	b2d8      	uxtbne	r0, r3
   d4e6a:	1e53      	subs	r3, r2, #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
   d4e6c:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix) crc ^= 0x8C;
                inbyte >>= 1;
   d4e70:	ea4f 0454 	mov.w	r4, r4, lsr #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
   d4e74:	d1ef      	bne.n	d4e56 <_ZN7OneWire4crc8EPhh+0x14>
   d4e76:	e7e7      	b.n	d4e48 <_ZN7OneWire4crc8EPhh+0x6>
                inbyte >>= 1;
        }
    }

    return crc;
}
   d4e78:	bd30      	pop	{r4, r5, pc}
	...

000d4e7c <_GLOBAL__sub_I__ZN7OneWireC2Et>:
        cdata <<= 1;
        crc ^= cdata;
    }

    return crc;
}
   d4e7c:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4e7e:	f001 fb85 	bl	d658c <HAL_Pin_Map>
   d4e82:	4b01      	ldr	r3, [pc, #4]	; (d4e88 <_GLOBAL__sub_I__ZN7OneWireC2Et+0xc>)
   d4e84:	6018      	str	r0, [r3, #0]
   d4e86:	bd08      	pop	{r3, pc}
   d4e88:	2003e46c 	.word	0x2003e46c

000d4e8c <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d4e8c:	f001 bb7e 	b.w	d658c <HAL_Pin_Map>

000d4e90 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d4e90:	b510      	push	{r4, lr}
   d4e92:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4e94:	3024      	adds	r0, #36	; 0x24
   d4e96:	f000 fe77 	bl	d5b88 <_ZN8FatCache4syncEv>
   d4e9a:	b128      	cbz	r0, d4ea8 <_ZN9FatVolume9cacheSyncEv+0x18>
   d4e9c:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d4ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4ea4:	f000 be70 	b.w	d5b88 <_ZN8FatCache4syncEv>
  }
   d4ea8:	bd10      	pop	{r4, pc}

000d4eaa <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d4eaa:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d4eac:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d4eae:	f043 0304 	orr.w	r3, r3, #4
   d4eb2:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d4eb4:	f100 0210 	add.w	r2, r0, #16
   d4eb8:	6880      	ldr	r0, [r0, #8]
   d4eba:	f000 bf1b 	b.w	d5cf4 <_ZN9FatVolume15allocateClusterEmPm>
	...

000d4ec0 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d4ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d4ec4:	7803      	ldrb	r3, [r0, #0]
   d4ec6:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d4eca:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d4ecc:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4ed0:	b10b      	cbz	r3, d4ed6 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d4ed2:	2600      	movs	r6, #0
   d4ed4:	e02e      	b.n	d4f34 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d4ed6:	6942      	ldr	r2, [r0, #20]
   d4ed8:	4b18      	ldr	r3, [pc, #96]	; (d4f3c <_ZN7FatFile13addDirClusterEv+0x7c>)
   d4eda:	429a      	cmp	r2, r3
   d4edc:	d8f9      	bhi.n	d4ed2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d4ede:	f7ff ffe4 	bl	d4eaa <_ZN7FatFile10addClusterEv>
   d4ee2:	4606      	mov	r6, r0
   d4ee4:	2800      	cmp	r0, #0
   d4ee6:	d0f4      	beq.n	d4ed2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d4ee8:	6921      	ldr	r1, [r4, #16]
   d4eea:	68a0      	ldr	r0, [r4, #8]
   d4eec:	f000 fe97 	bl	d5c1e <_ZNK9FatVolume17clusterFirstBlockEm>
   d4ef0:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d4ef2:	68a0      	ldr	r0, [r4, #8]
   d4ef4:	2205      	movs	r2, #5
   d4ef6:	4639      	mov	r1, r7
   d4ef8:	3024      	adds	r0, #36	; 0x24
   d4efa:	f000 fe6c 	bl	d5bd6 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d4efe:	4680      	mov	r8, r0
   d4f00:	2800      	cmp	r0, #0
   d4f02:	d0e6      	beq.n	d4ed2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d4f04:	4629      	mov	r1, r5
   d4f06:	f44f 7200 	mov.w	r2, #512	; 0x200
   d4f0a:	f003 fb7f 	bl	d860c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d4f0e:	2501      	movs	r5, #1
   d4f10:	68a3      	ldr	r3, [r4, #8]
   d4f12:	791a      	ldrb	r2, [r3, #4]
   d4f14:	42aa      	cmp	r2, r5
   d4f16:	d909      	bls.n	d4f2c <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d4f18:	4642      	mov	r2, r8
   d4f1a:	19e9      	adds	r1, r5, r7
   d4f1c:	6818      	ldr	r0, [r3, #0]
   d4f1e:	f001 f9db 	bl	d62d8 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d4f22:	2800      	cmp	r0, #0
   d4f24:	d0d5      	beq.n	d4ed2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d4f26:	3501      	adds	r5, #1
   d4f28:	b2ed      	uxtb	r5, r5
   d4f2a:	e7f1      	b.n	d4f10 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d4f2c:	6963      	ldr	r3, [r4, #20]
   d4f2e:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d4f32:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d4f34:	4630      	mov	r0, r6
   d4f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4f3a:	bf00      	nop
   d4f3c:	001ffdff 	.word	0x001ffdff

000d4f40 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d4f40:	b510      	push	{r4, lr}
   d4f42:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d4f44:	6880      	ldr	r0, [r0, #8]
   d4f46:	460a      	mov	r2, r1
   d4f48:	3024      	adds	r0, #36	; 0x24
   d4f4a:	69a1      	ldr	r1, [r4, #24]
   d4f4c:	f000 fe43 	bl	d5bd6 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d4f50:	b120      	cbz	r0, d4f5c <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d4f52:	88a3      	ldrh	r3, [r4, #4]
   d4f54:	f003 030f 	and.w	r3, r3, #15
   d4f58:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d4f5c:	bd10      	pop	{r4, pc}

000d4f5e <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d4f5e:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d4f60:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d4f62:	4605      	mov	r5, r0
   d4f64:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d4f66:	b984      	cbnz	r4, d4f8a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d4f68:	2224      	movs	r2, #36	; 0x24
   d4f6a:	4621      	mov	r1, r4
   d4f6c:	f003 fb4e 	bl	d860c <memset>

  m_vol = vol;
   d4f70:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d4f72:	79f3      	ldrb	r3, [r6, #7]
   d4f74:	2b10      	cmp	r3, #16
   d4f76:	d003      	beq.n	d4f80 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d4f78:	2b20      	cmp	r3, #32
   d4f7a:	d106      	bne.n	d4f8a <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d4f7c:	2340      	movs	r3, #64	; 0x40
   d4f7e:	e000      	b.n	d4f82 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d4f80:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d4f82:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d4f84:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d4f86:	70a8      	strb	r0, [r5, #2]
   d4f88:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d4f8a:	2000      	movs	r0, #0
   d4f8c:	bd70      	pop	{r4, r5, r6, pc}

000d4f8e <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d4f8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4f92:	7803      	ldrb	r3, [r0, #0]
   d4f94:	4604      	mov	r4, r0
   d4f96:	4689      	mov	r9, r1
   d4f98:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d4f9a:	b14b      	cbz	r3, d4fb0 <_ZN7FatFile4readEPvj+0x22>
   d4f9c:	7882      	ldrb	r2, [r0, #2]
   d4f9e:	07d1      	lsls	r1, r2, #31
   d4fa0:	d506      	bpl.n	d4fb0 <_ZN7FatFile4readEPvj+0x22>
   d4fa2:	e00c      	b.n	d4fbe <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4fa4:	465a      	mov	r2, fp
   d4fa6:	6921      	ldr	r1, [r4, #16]
   d4fa8:	f000 fe3f 	bl	d5c2a <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d4fac:	2800      	cmp	r0, #0
   d4fae:	da3d      	bge.n	d502c <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d4fb0:	7863      	ldrb	r3, [r4, #1]
   d4fb2:	f043 0302 	orr.w	r3, r3, #2
   d4fb6:	7063      	strb	r3, [r4, #1]
  return -1;
   d4fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d4fbc:	e097      	b.n	d50ee <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d4fbe:	071a      	lsls	r2, r3, #28
   d4fc0:	d503      	bpl.n	d4fca <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d4fc2:	69e3      	ldr	r3, [r4, #28]
   d4fc4:	6962      	ldr	r2, [r4, #20]
   d4fc6:	1a9b      	subs	r3, r3, r2
   d4fc8:	e007      	b.n	d4fda <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d4fca:	069a      	lsls	r2, r3, #26
   d4fcc:	d508      	bpl.n	d4fe0 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d4fce:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d4fd0:	891a      	ldrh	r2, [r3, #8]
   d4fd2:	6963      	ldr	r3, [r4, #20]
   d4fd4:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d4fd8:	b29b      	uxth	r3, r3
   d4fda:	429d      	cmp	r5, r3
   d4fdc:	bf28      	it	cs
   d4fde:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d4fe0:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d4fe2:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4fe6:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d4fea:	2e00      	cmp	r6, #0
   d4fec:	d035      	beq.n	d505a <_ZN7FatFile4readEPvj+0xcc>
   d4fee:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d4ff0:	6963      	ldr	r3, [r4, #20]
   d4ff2:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d4ff4:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d4ff8:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d4ffc:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d5000:	d002      	beq.n	d5008 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d5002:	6a03      	ldr	r3, [r0, #32]
   d5004:	4419      	add	r1, r3
   d5006:	e01d      	b.n	d5044 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5008:	f890 8005 	ldrb.w	r8, [r0, #5]
   d500c:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d5010:	f1ba 0f00 	cmp.w	sl, #0
   d5014:	d110      	bne.n	d5038 <_ZN7FatFile4readEPvj+0xaa>
   d5016:	f1b8 0f00 	cmp.w	r8, #0
   d501a:	d10d      	bne.n	d5038 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d501c:	2b00      	cmp	r3, #0
   d501e:	d1c1      	bne.n	d4fa4 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5020:	0653      	lsls	r3, r2, #25
   d5022:	bf4c      	ite	mi
   d5024:	6a03      	ldrmi	r3, [r0, #32]
   d5026:	6a23      	ldrpl	r3, [r4, #32]
   d5028:	6123      	str	r3, [r4, #16]
   d502a:	e005      	b.n	d5038 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d502c:	d104      	bne.n	d5038 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d502e:	7823      	ldrb	r3, [r4, #0]
   d5030:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5034:	d111      	bne.n	d505a <_ZN7FatFile4readEPvj+0xcc>
   d5036:	e7bb      	b.n	d4fb0 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5038:	6921      	ldr	r1, [r4, #16]
   d503a:	68a0      	ldr	r0, [r4, #8]
   d503c:	f000 fdef 	bl	d5c1e <_ZNK9FatVolume17clusterFirstBlockEm>
   d5040:	eb08 0100 	add.w	r1, r8, r0
   d5044:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d5046:	f1ba 0f00 	cmp.w	sl, #0
   d504a:	d135      	bne.n	d50b8 <_ZN7FatFile4readEPvj+0x12a>
   d504c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5050:	d332      	bcc.n	d50b8 <_ZN7FatFile4readEPvj+0x12a>
   d5052:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5054:	4299      	cmp	r1, r3
   d5056:	d102      	bne.n	d505e <_ZN7FatFile4readEPvj+0xd0>
   d5058:	e02e      	b.n	d50b8 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d505a:	1ba8      	subs	r0, r5, r6
   d505c:	e047      	b.n	d50ee <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d505e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5062:	d31b      	bcc.n	d509c <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d5064:	7822      	ldrb	r2, [r4, #0]
   d5066:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d5068:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d506c:	d406      	bmi.n	d507c <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d506e:	7902      	ldrb	r2, [r0, #4]
   d5070:	ebc8 0202 	rsb	r2, r8, r2
   d5074:	b2d2      	uxtb	r2, r2
   d5076:	4592      	cmp	sl, r2
   d5078:	bf28      	it	cs
   d507a:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d507c:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d507e:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5082:	d207      	bcs.n	d5094 <_ZN7FatFile4readEPvj+0x106>
   d5084:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d5086:	4653      	mov	r3, sl
   d5088:	464a      	mov	r2, r9
   d508a:	6800      	ldr	r0, [r0, #0]
   d508c:	f001 f8e2 	bl	d6254 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d5090:	b960      	cbnz	r0, d50ac <_ZN7FatFile4readEPvj+0x11e>
   d5092:	e78d      	b.n	d4fb0 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5094:	4453      	add	r3, sl
   d5096:	4299      	cmp	r1, r3
   d5098:	d321      	bcc.n	d50de <_ZN7FatFile4readEPvj+0x150>
   d509a:	e7f3      	b.n	d5084 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d509c:	464a      	mov	r2, r9
   d509e:	6800      	ldr	r0, [r0, #0]
   d50a0:	f001 f890 	bl	d61c4 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d50a4:	2800      	cmp	r0, #0
   d50a6:	d083      	beq.n	d4fb0 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d50a8:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d50ac:	6963      	ldr	r3, [r4, #20]
   d50ae:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d50b0:	44b9      	add	r9, r7
    m_curPosition += n;
   d50b2:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d50b4:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d50b6:	e798      	b.n	d4fea <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d50b8:	2200      	movs	r2, #0
   d50ba:	3024      	adds	r0, #36	; 0x24
   d50bc:	f000 fd8b 	bl	d5bd6 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d50c0:	2800      	cmp	r0, #0
   d50c2:	f43f af75 	beq.w	d4fb0 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d50c6:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d50ca:	42b7      	cmp	r7, r6
   d50cc:	bf28      	it	cs
   d50ce:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d50d0:	eb00 010a 	add.w	r1, r0, sl
   d50d4:	463a      	mov	r2, r7
   d50d6:	4648      	mov	r0, r9
   d50d8:	f003 fa8d 	bl	d85f6 <memcpy>
   d50dc:	e7e6      	b.n	d50ac <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d50de:	3024      	adds	r0, #36	; 0x24
   d50e0:	9101      	str	r1, [sp, #4]
   d50e2:	f000 fd51 	bl	d5b88 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d50e6:	9901      	ldr	r1, [sp, #4]
   d50e8:	2800      	cmp	r0, #0
   d50ea:	d1cb      	bne.n	d5084 <_ZN7FatFile4readEPvj+0xf6>
   d50ec:	e760      	b.n	d4fb0 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d50ee:	b003      	add	sp, #12
   d50f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d50f4 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d50f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d50f6:	6943      	ldr	r3, [r0, #20]
   d50f8:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d50fc:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d50fe:	b105      	cbz	r5, d5102 <_ZN7FatFile12readDirCacheEb+0xe>
   d5100:	b969      	cbnz	r1, d511e <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d5102:	2201      	movs	r2, #1
   d5104:	f10d 0107 	add.w	r1, sp, #7
   d5108:	4620      	mov	r0, r4
   d510a:	f7ff ff40 	bl	d4f8e <_ZN7FatFile4readEPvj>
   d510e:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d5110:	2801      	cmp	r0, #1
   d5112:	d001      	beq.n	d5118 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d5114:	2000      	movs	r0, #0
   d5116:	e008      	b.n	d512a <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d5118:	6963      	ldr	r3, [r4, #20]
   d511a:	331f      	adds	r3, #31
   d511c:	e000      	b.n	d5120 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d511e:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d5120:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d5122:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d5124:	3030      	adds	r0, #48	; 0x30
   d5126:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d512a:	b003      	add	sp, #12
   d512c:	bd30      	pop	{r4, r5, pc}

000d512e <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d512e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5132:	460e      	mov	r6, r1
   d5134:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d5136:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5138:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d513a:	2900      	cmp	r1, #0
   d513c:	d039      	beq.n	d51b2 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d513e:	6945      	ldr	r5, [r0, #20]
   d5140:	42b5      	cmp	r5, r6
   d5142:	d03a      	beq.n	d51ba <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d5144:	b90e      	cbnz	r6, d514a <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d5146:	6106      	str	r6, [r0, #16]
    goto done;
   d5148:	e031      	b.n	d51ae <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d514a:	070b      	lsls	r3, r1, #28
   d514c:	d503      	bpl.n	d5156 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d514e:	69c3      	ldr	r3, [r0, #28]
   d5150:	429e      	cmp	r6, r3
   d5152:	d82e      	bhi.n	d51b2 <_ZN7FatFile7seekSetEm+0x84>
   d5154:	e007      	b.n	d5166 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d5156:	0688      	lsls	r0, r1, #26
   d5158:	d505      	bpl.n	d5166 <_ZN7FatFile7seekSetEm+0x38>
   d515a:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d515c:	891b      	ldrh	r3, [r3, #8]
   d515e:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d5162:	d826      	bhi.n	d51b2 <_ZN7FatFile7seekSetEm+0x84>
   d5164:	e023      	b.n	d51ae <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5166:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d516a:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d516e:	1e6a      	subs	r2, r5, #1
   d5170:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5174:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5176:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5178:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d517a:	429a      	cmp	r2, r3
   d517c:	d800      	bhi.n	d5180 <_ZN7FatFile7seekSetEm+0x52>
   d517e:	b94d      	cbnz	r5, d5194 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5180:	064a      	lsls	r2, r1, #25
   d5182:	bf4c      	ite	mi
   d5184:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d5188:	6a22      	ldrpl	r2, [r4, #32]
   d518a:	6122      	str	r2, [r4, #16]
   d518c:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d518e:	f104 0810 	add.w	r8, r4, #16
   d5192:	e00a      	b.n	d51aa <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d5194:	1a9b      	subs	r3, r3, r2
   d5196:	e7f9      	b.n	d518c <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5198:	4642      	mov	r2, r8
   d519a:	6921      	ldr	r1, [r4, #16]
   d519c:	68a0      	ldr	r0, [r4, #8]
   d519e:	f000 fd44 	bl	d5c2a <_ZN9FatVolume6fatGetEmPm>
   d51a2:	2800      	cmp	r0, #0
   d51a4:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   d51a8:	dd03      	ble.n	d51b2 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d51aa:	2d00      	cmp	r5, #0
   d51ac:	d1f4      	bne.n	d5198 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d51ae:	6166      	str	r6, [r4, #20]
   d51b0:	e003      	b.n	d51ba <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d51b2:	6127      	str	r7, [r4, #16]
  return false;
   d51b4:	2000      	movs	r0, #0
   d51b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d51ba:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d51bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d51c0 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d51c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d51c2:	460f      	mov	r7, r1
   d51c4:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d51c6:	2100      	movs	r1, #0
   d51c8:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d51ca:	4604      	mov	r4, r0
   d51cc:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d51ce:	f003 fa1d 	bl	d860c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d51d2:	68b8      	ldr	r0, [r7, #8]
   d51d4:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d51d6:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d51da:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d51dc:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d51e0:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d51e2:	6a3b      	ldr	r3, [r7, #32]
   d51e4:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d51e6:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d51e8:	7acb      	ldrb	r3, [r1, #11]
   d51ea:	071d      	lsls	r5, r3, #28
   d51ec:	d44c      	bmi.n	d5288 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d51ee:	1883      	adds	r3, r0, r2
   d51f0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d51f4:	f003 0317 	and.w	r3, r3, #23
   d51f8:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d51fa:	7ac9      	ldrb	r1, [r1, #11]
   d51fc:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d5200:	bf04      	itt	eq
   d5202:	f043 0308 	orreq.w	r3, r3, #8
   d5206:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d5208:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d520c:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d520e:	f006 0303 	and.w	r3, r6, #3
   d5212:	2b01      	cmp	r3, #1
   d5214:	d009      	beq.n	d522a <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d5216:	2b02      	cmp	r3, #2
   d5218:	d005      	beq.n	d5226 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d521a:	2b00      	cmp	r3, #0
   d521c:	d134      	bne.n	d5288 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d521e:	0571      	lsls	r1, r6, #21
   d5220:	d432      	bmi.n	d5288 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d5222:	2301      	movs	r3, #1
   d5224:	e002      	b.n	d522c <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d5226:	2303      	movs	r3, #3
   d5228:	e000      	b.n	d522c <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d522a:	2302      	movs	r3, #2
   d522c:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d522e:	78a1      	ldrb	r1, [r4, #2]
   d5230:	078b      	lsls	r3, r1, #30
   d5232:	d503      	bpl.n	d523c <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d5234:	7823      	ldrb	r3, [r4, #0]
   d5236:	f013 0f11 	tst.w	r3, #17
   d523a:	d125      	bne.n	d5288 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d523c:	b24b      	sxtb	r3, r1
   d523e:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d5242:	f006 0108 	and.w	r1, r6, #8
   d5246:	bf14      	ite	ne
   d5248:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d524c:	2700      	moveq	r7, #0
   d524e:	4319      	orrs	r1, r3
   d5250:	4339      	orrs	r1, r7
   d5252:	70a1      	strb	r1, [r4, #2]
   d5254:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d5256:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d5258:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d525a:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d525c:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d5260:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d5264:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d5268:	d504      	bpl.n	d5274 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d526a:	b181      	cbz	r1, d528e <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d526c:	f000 fd7d 	bl	d5d6a <_ZN9FatVolume9freeChainEm>
   d5270:	b968      	cbnz	r0, d528e <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5272:	e009      	b.n	d5288 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d5274:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d5276:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d5278:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d527a:	0473      	lsls	r3, r6, #17
   d527c:	d50c      	bpl.n	d5298 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d527e:	69e1      	ldr	r1, [r4, #28]
   d5280:	4620      	mov	r0, r4
   d5282:	f7ff ff54 	bl	d512e <_ZN7FatFile7seekSetEm>
   d5286:	b938      	cbnz	r0, d5298 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d5288:	2000      	movs	r0, #0
   d528a:	7020      	strb	r0, [r4, #0]
  return false;
   d528c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d528e:	78a3      	ldrb	r3, [r4, #2]
   d5290:	f043 0304 	orr.w	r3, r3, #4
   d5294:	70a3      	strb	r3, [r4, #2]
   d5296:	e7f0      	b.n	d527a <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d5298:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d529a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d529c <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d529c:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d529e:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d52a0:	4604      	mov	r4, r0
  if (!isOpen()) {
   d52a2:	b90b      	cbnz	r3, d52a8 <_ZN7FatFile4syncEv+0xc>
    return true;
   d52a4:	2001      	movs	r0, #1
   d52a6:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d52a8:	7883      	ldrb	r3, [r0, #2]
   d52aa:	075a      	lsls	r2, r3, #29
   d52ac:	d523      	bpl.n	d52f6 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d52ae:	2101      	movs	r1, #1
   d52b0:	f7ff fe46 	bl	d4f40 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d52b4:	4605      	mov	r5, r0
   d52b6:	b928      	cbnz	r0, d52c4 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d52b8:	7863      	ldrb	r3, [r4, #1]
   d52ba:	f043 0301 	orr.w	r3, r3, #1
   d52be:	7063      	strb	r3, [r4, #1]
  return false;
   d52c0:	2000      	movs	r0, #0
   d52c2:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d52c4:	7803      	ldrb	r3, [r0, #0]
   d52c6:	2be5      	cmp	r3, #229	; 0xe5
   d52c8:	d0f6      	beq.n	d52b8 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d52ca:	7823      	ldrb	r3, [r4, #0]
   d52cc:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d52ce:	bf44      	itt	mi
   d52d0:	69e3      	ldrmi	r3, [r4, #28]
   d52d2:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d52d4:	8c23      	ldrh	r3, [r4, #32]
   d52d6:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d52d8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d52da:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d52dc:	4b09      	ldr	r3, [pc, #36]	; (d5304 <_ZN7FatFile4syncEv+0x68>)
   d52de:	681b      	ldr	r3, [r3, #0]
   d52e0:	b12b      	cbz	r3, d52ee <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d52e2:	f100 0116 	add.w	r1, r0, #22
   d52e6:	3018      	adds	r0, #24
   d52e8:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d52ea:	8b2b      	ldrh	r3, [r5, #24]
   d52ec:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d52ee:	78a3      	ldrb	r3, [r4, #2]
   d52f0:	f023 0304 	bic.w	r3, r3, #4
   d52f4:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d52f6:	68a0      	ldr	r0, [r4, #8]
   d52f8:	f7ff fdca 	bl	d4e90 <_ZN9FatVolume9cacheSyncEv>
   d52fc:	2800      	cmp	r0, #0
   d52fe:	d0db      	beq.n	d52b8 <_ZN7FatFile4syncEv+0x1c>
   d5300:	e7d0      	b.n	d52a4 <_ZN7FatFile4syncEv+0x8>
   d5302:	bf00      	nop
   d5304:	2003e474 	.word	0x2003e474

000d5308 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d5308:	b510      	push	{r4, lr}
   d530a:	4604      	mov	r4, r0
  bool rtn = sync();
   d530c:	f7ff ffc6 	bl	d529c <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d5310:	2300      	movs	r3, #0
   d5312:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d5314:	bd10      	pop	{r4, pc}

000d5316 <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5316:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5318:	b093      	sub	sp, #76	; 0x4c
   d531a:	461f      	mov	r7, r3
   d531c:	2300      	movs	r3, #0
   d531e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d5322:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5326:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5328:	9201      	str	r2, [sp, #4]
   d532a:	4606      	mov	r6, r0
   d532c:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d532e:	b10b      	cbz	r3, d5334 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d5330:	2000      	movs	r0, #0
   d5332:	e03d      	b.n	d53b0 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5334:	780b      	ldrb	r3, [r1, #0]
   d5336:	f013 0f70 	tst.w	r3, #112	; 0x70
   d533a:	d0f9      	beq.n	d5330 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d533c:	7813      	ldrb	r3, [r2, #0]
   d533e:	2b2f      	cmp	r3, #47	; 0x2f
   d5340:	d112      	bne.n	d5368 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d5342:	9b01      	ldr	r3, [sp, #4]
   d5344:	781a      	ldrb	r2, [r3, #0]
   d5346:	2a2f      	cmp	r2, #47	; 0x2f
   d5348:	d102      	bne.n	d5350 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d534a:	3301      	adds	r3, #1
   d534c:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d534e:	e7f8      	b.n	d5342 <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d5350:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d5352:	b91a      	cbnz	r2, d535c <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d5354:	4630      	mov	r0, r6
   d5356:	f7ff fe02 	bl	d4f5e <_ZN7FatFile8openRootEP9FatVolume>
   d535a:	e029      	b.n	d53b0 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d535c:	a809      	add	r0, sp, #36	; 0x24
   d535e:	f7ff fdfe 	bl	d4f5e <_ZN7FatFile8openRootEP9FatVolume>
   d5362:	2800      	cmp	r0, #0
   d5364:	d0e4      	beq.n	d5330 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d5366:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d5368:	aa01      	add	r2, sp, #4
   d536a:	a903      	add	r1, sp, #12
   d536c:	9801      	ldr	r0, [sp, #4]
   d536e:	f000 f8ff 	bl	d5570 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d5372:	2800      	cmp	r0, #0
   d5374:	d0dc      	beq.n	d5330 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d5376:	9b01      	ldr	r3, [sp, #4]
   d5378:	781b      	ldrb	r3, [r3, #0]
   d537a:	b19b      	cbz	r3, d53a4 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d537c:	2300      	movs	r3, #0
   d537e:	aa03      	add	r2, sp, #12
   d5380:	4621      	mov	r1, r4
   d5382:	4630      	mov	r0, r6
   d5384:	f000 fa36 	bl	d57f4 <_ZN7FatFile4openEPS_P7fname_ti>
   d5388:	2800      	cmp	r0, #0
   d538a:	d0d1      	beq.n	d5330 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d538c:	4635      	mov	r5, r6
   d538e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5390:	ac09      	add	r4, sp, #36	; 0x24
   d5392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5398:	682b      	ldr	r3, [r5, #0]
   d539a:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d539c:	4630      	mov	r0, r6
   d539e:	f7ff ffb3 	bl	d5308 <_ZN7FatFile5closeEv>
   d53a2:	e7e0      	b.n	d5366 <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d53a4:	463b      	mov	r3, r7
   d53a6:	aa03      	add	r2, sp, #12
   d53a8:	4621      	mov	r1, r4
   d53aa:	4630      	mov	r0, r6
   d53ac:	f000 fa22 	bl	d57f4 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d53b0:	b013      	add	sp, #76	; 0x4c
   d53b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d53b4 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d53b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d53b8:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d53ba:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d53bc:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d53be:	4604      	mov	r4, r0
   d53c0:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d53c2:	d508      	bpl.n	d53d6 <_ZN7FatFile5writeEPKvj+0x22>
   d53c4:	7883      	ldrb	r3, [r0, #2]
   d53c6:	079a      	lsls	r2, r3, #30
   d53c8:	d505      	bpl.n	d53d6 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d53ca:	071b      	lsls	r3, r3, #28
   d53cc:	d50b      	bpl.n	d53e6 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d53ce:	69e1      	ldr	r1, [r4, #28]
   d53d0:	f7ff fead 	bl	d512e <_ZN7FatFile7seekSetEm>
   d53d4:	b938      	cbnz	r0, d53e6 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d53d6:	7863      	ldrb	r3, [r4, #1]
   d53d8:	f043 0301 	orr.w	r3, r3, #1
   d53dc:	7063      	strb	r3, [r4, #1]
  return -1;
   d53de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d53e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d53e6:	6963      	ldr	r3, [r4, #20]
   d53e8:	43db      	mvns	r3, r3
   d53ea:	4598      	cmp	r8, r3
   d53ec:	d8f3      	bhi.n	d53d6 <_ZN7FatFile5writeEPKvj+0x22>
   d53ee:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d53f0:	f04f 0a00 	mov.w	sl, #0
   d53f4:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d53f6:	2e00      	cmp	r6, #0
   d53f8:	f000 8081 	beq.w	d54fe <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d53fc:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d53fe:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5400:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d5404:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5408:	d11c      	bne.n	d5444 <_ZN7FatFile5writeEPKvj+0x90>
   d540a:	b9df      	cbnz	r7, d5444 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d540c:	6921      	ldr	r1, [r4, #16]
   d540e:	b171      	cbz	r1, d542e <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5410:	f104 0210 	add.w	r2, r4, #16
   d5414:	f000 fc09 	bl	d5c2a <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d5418:	2800      	cmp	r0, #0
   d541a:	dbdc      	blt.n	d53d6 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d541c:	f040 808e 	bne.w	d553c <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d5420:	4620      	mov	r0, r4
   d5422:	f7ff fd42 	bl	d4eaa <_ZN7FatFile10addClusterEv>
   d5426:	2800      	cmp	r0, #0
   d5428:	f040 8088 	bne.w	d553c <_ZN7FatFile5writeEPKvj+0x188>
   d542c:	e7d3      	b.n	d53d6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d542e:	6a23      	ldr	r3, [r4, #32]
   d5430:	b93b      	cbnz	r3, d5442 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d5432:	4620      	mov	r0, r4
   d5434:	f7ff fd39 	bl	d4eaa <_ZN7FatFile10addClusterEv>
   d5438:	2800      	cmp	r0, #0
   d543a:	d0cc      	beq.n	d53d6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d543c:	6923      	ldr	r3, [r4, #16]
   d543e:	6223      	str	r3, [r4, #32]
   d5440:	e000      	b.n	d5444 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d5442:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5444:	6921      	ldr	r1, [r4, #16]
   d5446:	68a0      	ldr	r0, [r4, #8]
   d5448:	f000 fbe9 	bl	d5c1e <_ZNK9FatVolume17clusterFirstBlockEm>
   d544c:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d544e:	b917      	cbnz	r7, d5456 <_ZN7FatFile5writeEPKvj+0xa2>
   d5450:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5454:	d221      	bcs.n	d549a <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d5456:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d545a:	42b5      	cmp	r5, r6
   d545c:	bf28      	it	cs
   d545e:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d5460:	b937      	cbnz	r7, d5470 <_ZN7FatFile5writeEPKvj+0xbc>
   d5462:	6963      	ldr	r3, [r4, #20]
   d5464:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d5466:	4293      	cmp	r3, r2
   d5468:	bf34      	ite	cc
   d546a:	2201      	movcc	r2, #1
   d546c:	2205      	movcs	r2, #5
   d546e:	e000      	b.n	d5472 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d5470:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5472:	68a0      	ldr	r0, [r4, #8]
   d5474:	3024      	adds	r0, #36	; 0x24
   d5476:	f000 fbae 	bl	d5bd6 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d547a:	2800      	cmp	r0, #0
   d547c:	d0ab      	beq.n	d53d6 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d547e:	4438      	add	r0, r7
   d5480:	462a      	mov	r2, r5
   d5482:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d5484:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5486:	f003 f8b6 	bl	d85f6 <memcpy>
      if (512 == (n + blockOffset)) {
   d548a:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d548e:	d130      	bne.n	d54f2 <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5490:	68a0      	ldr	r0, [r4, #8]
   d5492:	3024      	adds	r0, #36	; 0x24
   d5494:	f000 fb78 	bl	d5b88 <_ZN8FatCache4syncEv>
   d5498:	e017      	b.n	d54ca <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d549a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d549e:	68a0      	ldr	r0, [r4, #8]
   d54a0:	d315      	bcc.n	d54ce <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d54a2:	7902      	ldrb	r2, [r0, #4]
   d54a4:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d54a6:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d54a8:	b2d2      	uxtb	r2, r2
   d54aa:	4293      	cmp	r3, r2
   d54ac:	bf28      	it	cs
   d54ae:	4613      	movcs	r3, r2
   d54b0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d54b2:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d54b4:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d54b8:	d302      	bcc.n	d54c0 <_ZN7FatFile5writeEPKvj+0x10c>
   d54ba:	441a      	add	r2, r3
   d54bc:	4291      	cmp	r1, r2
   d54be:	d337      	bcc.n	d5530 <_ZN7FatFile5writeEPKvj+0x17c>
   d54c0:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d54c2:	464a      	mov	r2, r9
   d54c4:	6838      	ldr	r0, [r7, #0]
   d54c6:	f000 ff79 	bl	d63bc <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d54ca:	b990      	cbnz	r0, d54f2 <_ZN7FatFile5writeEPKvj+0x13e>
   d54cc:	e783      	b.n	d53d6 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d54ce:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d54d0:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d54d2:	bf02      	ittt	eq
   d54d4:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d54d8:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d54dc:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d54de:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d54e0:	464a      	mov	r2, r9
   d54e2:	6818      	ldr	r0, [r3, #0]
   d54e4:	f000 fef8 	bl	d62d8 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d54e8:	2800      	cmp	r0, #0
   d54ea:	f43f af74 	beq.w	d53d6 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d54ee:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d54f2:	6963      	ldr	r3, [r4, #20]
   d54f4:	442b      	add	r3, r5
   d54f6:	6163      	str	r3, [r4, #20]
    src += n;
   d54f8:	44a9      	add	r9, r5
    nToWrite -= n;
   d54fa:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d54fc:	e77a      	b.n	d53f4 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d54fe:	69e2      	ldr	r2, [r4, #28]
   d5500:	4293      	cmp	r3, r2
   d5502:	d901      	bls.n	d5508 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d5504:	61e3      	str	r3, [r4, #28]
   d5506:	e002      	b.n	d550e <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d5508:	4b0f      	ldr	r3, [pc, #60]	; (d5548 <_ZN7FatFile5writeEPKvj+0x194>)
   d550a:	681b      	ldr	r3, [r3, #0]
   d550c:	b11b      	cbz	r3, d5516 <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d550e:	78a3      	ldrb	r3, [r4, #2]
   d5510:	f043 0304 	orr.w	r3, r3, #4
   d5514:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d5516:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d551a:	2b00      	cmp	r3, #0
   d551c:	db02      	blt.n	d5524 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d551e:	4640      	mov	r0, r8
   d5520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d5524:	4620      	mov	r0, r4
   d5526:	f7ff feb9 	bl	d529c <_ZN7FatFile4syncEv>
   d552a:	2800      	cmp	r0, #0
   d552c:	d1f7      	bne.n	d551e <_ZN7FatFile5writeEPKvj+0x16a>
   d552e:	e752      	b.n	d53d6 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5530:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5534:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5538:	62c2      	str	r2, [r0, #44]	; 0x2c
   d553a:	e7c1      	b.n	d54c0 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d553c:	6921      	ldr	r1, [r4, #16]
   d553e:	68a0      	ldr	r0, [r4, #8]
   d5540:	f000 fb6d 	bl	d5c1e <_ZNK9FatVolume17clusterFirstBlockEm>
   d5544:	4601      	mov	r1, r0
   d5546:	e783      	b.n	d5450 <_ZN7FatFile5writeEPKvj+0x9c>
   d5548:	2003e474 	.word	0x2003e474

000d554c <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d554c:	f001 b81e 	b.w	d658c <HAL_Pin_Map>

000d5550 <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d5550:	1e41      	subs	r1, r0, #1
   d5552:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d5556:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d5558:	0843      	lsrs	r3, r0, #1
   d555a:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d555e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d5562:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d5566:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d5568:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d556a:	d1f5      	bne.n	d5558 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d556c:	4770      	bx	lr
	...

000d5570 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d5570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d5574:	7803      	ldrb	r3, [r0, #0]
   d5576:	2b20      	cmp	r3, #32
   d5578:	f100 0401 	add.w	r4, r0, #1
   d557c:	d101      	bne.n	d5582 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d557e:	4620      	mov	r0, r4
   d5580:	e7f8      	b.n	d5574 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d5582:	4f70      	ldr	r7, [pc, #448]	; (d5744 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d5584:	6088      	str	r0, [r1, #8]
   d5586:	4605      	mov	r5, r0
   d5588:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d558a:	462e      	mov	r6, r5
   d558c:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d5590:	b30b      	cbz	r3, d55d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d5592:	2b2f      	cmp	r3, #47	; 0x2f
   d5594:	d101      	bne.n	d559a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d5596:	1903      	adds	r3, r0, r4
   d5598:	e017      	b.n	d55ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d559a:	2b5c      	cmp	r3, #92	; 0x5c
   d559c:	d102      	bne.n	d55a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d559e:	2000      	movs	r0, #0
   d55a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d55a4:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d55a8:	b2e4      	uxtb	r4, r4
   d55aa:	2c1d      	cmp	r4, #29
   d55ac:	d803      	bhi.n	d55b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d55ae:	fa27 f404 	lsr.w	r4, r7, r4
   d55b2:	07e4      	lsls	r4, r4, #31
   d55b4:	d4f3      	bmi.n	d559e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d55b6:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d55ba:	2c3c      	cmp	r4, #60	; 0x3c
   d55bc:	d0ef      	beq.n	d559e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d55be:	3b20      	subs	r3, #32
   d55c0:	2b5e      	cmp	r3, #94	; 0x5e
   d55c2:	d9e1      	bls.n	d5588 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d55c4:	e7eb      	b.n	d559e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d55c6:	2d2f      	cmp	r5, #47	; 0x2f
   d55c8:	d105      	bne.n	d55d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d55ca:	461e      	mov	r6, r3
   d55cc:	f813 5b01 	ldrb.w	r5, [r3], #1
   d55d0:	2d20      	cmp	r5, #32
   d55d2:	d1f8      	bne.n	d55c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d55d4:	e7f9      	b.n	d55ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d55d6:	6016      	str	r6, [r2, #0]
   d55d8:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d55da:	4298      	cmp	r0, r3
   d55dc:	ebc0 0803 	rsb	r8, r0, r3
   d55e0:	d009      	beq.n	d55f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d55e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d55e6:	2a2e      	cmp	r2, #46	; 0x2e
   d55e8:	d0f7      	beq.n	d55da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d55ea:	2a20      	cmp	r2, #32
   d55ec:	d0f5      	beq.n	d55da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d55ee:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d55f2:	dcd4      	bgt.n	d559e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d55f4:	e001      	b.n	d55fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d55f6:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d55fa:	f8c1 8004 	str.w	r8, [r1, #4]
   d55fe:	f101 030c 	add.w	r3, r1, #12
   d5602:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d5606:	2420      	movs	r4, #32
   d5608:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d560c:	4293      	cmp	r3, r2
   d560e:	d1fb      	bne.n	d5608 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d5610:	4603      	mov	r3, r0
   d5612:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d5614:	f813 4b01 	ldrb.w	r4, [r3], #1
   d5618:	2c2e      	cmp	r4, #46	; 0x2e
   d561a:	d0fa      	beq.n	d5612 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d561c:	2c20      	cmp	r4, #32
   d561e:	d0f8      	beq.n	d5612 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d5620:	fab2 f482 	clz	r4, r2
   d5624:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d5626:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
   d562a:	1c73      	adds	r3, r6, #1
   d562c:	d107      	bne.n	d563e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d562e:	2700      	movs	r7, #0
   d5630:	f04f 0e07 	mov.w	lr, #7
   d5634:	463d      	mov	r5, r7
   d5636:	46ba      	mov	sl, r7
   d5638:	f04f 0908 	mov.w	r9, #8
   d563c:	e009      	b.n	d5652 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d563e:	5d83      	ldrb	r3, [r0, r6]
   d5640:	2b2e      	cmp	r3, #46	; 0x2e
   d5642:	d0f4      	beq.n	d562e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d5644:	3e01      	subs	r6, #1
   d5646:	e7f0      	b.n	d562a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d5648:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d564a:	2b20      	cmp	r3, #32
   d564c:	d104      	bne.n	d5658 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d564e:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d5650:	3201      	adds	r2, #1
   d5652:	4542      	cmp	r2, r8
   d5654:	dbf8      	blt.n	d5648 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d5656:	e04b      	b.n	d56f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d5658:	2b2e      	cmp	r3, #46	; 0x2e
   d565a:	d102      	bne.n	d5662 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d565c:	42b2      	cmp	r2, r6
   d565e:	d1f6      	bne.n	d564e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d5660:	e003      	b.n	d566a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d5662:	2b22      	cmp	r3, #34	; 0x22
   d5664:	d017      	beq.n	d5696 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d5666:	2b7c      	cmp	r3, #124	; 0x7c
   d5668:	d015      	beq.n	d5696 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d566a:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d566e:	f1bc 0f05 	cmp.w	ip, #5
   d5672:	d801      	bhi.n	d5678 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d5674:	2b2d      	cmp	r3, #45	; 0x2d
   d5676:	d10e      	bne.n	d5696 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d5678:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d567c:	f1bc 0f05 	cmp.w	ip, #5
   d5680:	d909      	bls.n	d5696 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d5682:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d5686:	f1bc 0f02 	cmp.w	ip, #2
   d568a:	d904      	bls.n	d5696 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d568c:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d5690:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d5694:	d902      	bls.n	d569c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d5696:	42b2      	cmp	r2, r6
   d5698:	d10e      	bne.n	d56b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d569a:	e049      	b.n	d5730 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d569c:	42b2      	cmp	r2, r6
   d569e:	d047      	beq.n	d5730 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d56a0:	4575      	cmp	r5, lr
   d56a2:	d821      	bhi.n	d56e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d56a4:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d56a8:	f1bc 0f19 	cmp.w	ip, #25
   d56ac:	d808      	bhi.n	d56c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d56ae:	3b20      	subs	r3, #32
   d56b0:	b2db      	uxtb	r3, r3
        lc |= bit;
   d56b2:	ea49 0707 	orr.w	r7, r9, r7
   d56b6:	e00a      	b.n	d56ce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d56b8:	4575      	cmp	r5, lr
   d56ba:	d815      	bhi.n	d56e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d56bc:	2400      	movs	r4, #0
      c = '_';
   d56be:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d56c0:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d56c4:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d56c8:	bf98      	it	ls
   d56ca:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d56ce:	f105 0c01 	add.w	ip, r5, #1
   d56d2:	fa5f fc8c 	uxtb.w	ip, ip
   d56d6:	440d      	add	r5, r1
      if (i < 7) {
   d56d8:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d56dc:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d56de:	d801      	bhi.n	d56e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d56e0:	f881 c00c 	strb.w	ip, [r1, #12]
   d56e4:	4665      	mov	r5, ip
   d56e6:	e7b3      	b.n	d5650 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d56e8:	f1be 0f0a 	cmp.w	lr, #10
   d56ec:	d117      	bne.n	d571e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d56ee:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d56f0:	7b4b      	ldrb	r3, [r1, #13]
   d56f2:	2b20      	cmp	r3, #32
   d56f4:	f43f af53 	beq.w	d559e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d56f8:	b13c      	cbz	r4, d570a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d56fa:	ea1a 0f07 	tst.w	sl, r7
   d56fe:	bf18      	it	ne
   d5700:	2702      	movne	r7, #2
   d5702:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d5704:	2001      	movs	r0, #1
   d5706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d570a:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d570c:	2001      	movs	r0, #1
   d570e:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d5710:	4419      	add	r1, r3
   d5712:	237e      	movs	r3, #126	; 0x7e
   d5714:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d5716:	2331      	movs	r3, #49	; 0x31
   d5718:	738b      	strb	r3, [r1, #14]
   d571a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d571e:	42b2      	cmp	r2, r6
   d5720:	dce5      	bgt.n	d56ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d5722:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d5724:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d5728:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d572a:	f04f 0910 	mov.w	r9, #16
   d572e:	e78e      	b.n	d564e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d5730:	f1be 0f0a 	cmp.w	lr, #10
   d5734:	d0db      	beq.n	d56ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d5736:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d5738:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d573c:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d573e:	f04f 0910 	mov.w	r9, #16
   d5742:	e785      	b.n	d5650 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d5744:	31000101 	.word	0x31000101

000d5748 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d5748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d574c:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d5750:	4606      	mov	r6, r0
   d5752:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d5754:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d5756:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d5758:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d575c:	6869      	ldr	r1, [r5, #4]
   d575e:	68aa      	ldr	r2, [r5, #8]
   d5760:	1863      	adds	r3, r4, r1
   d5762:	b29b      	uxth	r3, r3
   d5764:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d5766:	4291      	cmp	r1, r2
   d5768:	d006      	beq.n	d5778 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d576a:	f812 0b01 	ldrb.w	r0, [r2], #1
   d576e:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d5772:	4043      	eors	r3, r0
   d5774:	b29b      	uxth	r3, r3
   d5776:	e7f6      	b.n	d5766 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d5778:	f1b9 0f03 	cmp.w	r9, #3
   d577c:	bf28      	it	cs
   d577e:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5782:	f109 0204 	add.w	r2, r9, #4
   d5786:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d5788:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d578c:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d578e:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5790:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5792:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5794:	bf94      	ite	ls
   d5796:	3130      	addls	r1, #48	; 0x30
   d5798:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d579a:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d579c:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d579e:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d57a2:	d3f1      	bcc.n	d5788 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d57a4:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d57a8:	2100      	movs	r1, #0
   d57aa:	735f      	strb	r7, [r3, #13]
   d57ac:	4630      	mov	r0, r6
   d57ae:	f7ff fcbe 	bl	d512e <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d57b2:	2101      	movs	r1, #1
   d57b4:	4630      	mov	r0, r6
   d57b6:	f7ff fc9d 	bl	d50f4 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d57ba:	4601      	mov	r1, r0
   d57bc:	b928      	cbnz	r0, d57ca <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d57be:	7870      	ldrb	r0, [r6, #1]
   d57c0:	fab0 f080 	clz	r0, r0
   d57c4:	0940      	lsrs	r0, r0, #5
   d57c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d57ca:	7803      	ldrb	r3, [r0, #0]
   d57cc:	b14b      	cbz	r3, d57e2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d57ce:	7ac3      	ldrb	r3, [r0, #11]
   d57d0:	071b      	lsls	r3, r3, #28
   d57d2:	d4ee      	bmi.n	d57b2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d57d4:	220b      	movs	r2, #11
   d57d6:	4640      	mov	r0, r8
   d57d8:	f002 fefe 	bl	d85d8 <memcmp>
   d57dc:	2800      	cmp	r0, #0
   d57de:	d1e8      	bne.n	d57b2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d57e0:	e002      	b.n	d57e8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d57e2:	2001      	movs	r0, #1
   d57e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d57e8:	3401      	adds	r4, #1
   d57ea:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d57ec:	2c64      	cmp	r4, #100	; 0x64
   d57ee:	d1b5      	bne.n	d575c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d57f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d57f4 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d57f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d57f8:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d57fa:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d57fc:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d57fe:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d5802:	9005      	str	r0, [sp, #20]
   d5804:	460e      	mov	r6, r1
   d5806:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d5808:	d101      	bne.n	d580e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d580a:	2000      	movs	r0, #0
   d580c:	e1a0      	b.n	d5b50 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d580e:	9b05      	ldr	r3, [sp, #20]
   d5810:	781b      	ldrb	r3, [r3, #0]
   d5812:	2b00      	cmp	r3, #0
   d5814:	d1f9      	bne.n	d580a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d5816:	6853      	ldr	r3, [r2, #4]
   d5818:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d581a:	7813      	ldrb	r3, [r2, #0]
   d581c:	079b      	lsls	r3, r3, #30
   d581e:	f000 818d 	beq.w	d5b3c <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d5822:	9b02      	ldr	r3, [sp, #8]
   d5824:	270d      	movs	r7, #13
   d5826:	330c      	adds	r3, #12
   d5828:	fbb3 f7f7 	udiv	r7, r3, r7
   d582c:	3701      	adds	r7, #1
   d582e:	b2ff      	uxtb	r7, r7
   d5830:	2100      	movs	r1, #0
   d5832:	4630      	mov	r0, r6
   d5834:	f7ff fc7b 	bl	d512e <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d5838:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d583c:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d5840:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d5844:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d5846:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d5848:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d584a:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d584e:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5850:	6972      	ldr	r2, [r6, #20]
   d5852:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d5854:	2101      	movs	r1, #1
   d5856:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5858:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d585c:	f7ff fc4a 	bl	d50f4 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d5860:	9b07      	ldr	r3, [sp, #28]
   d5862:	b920      	cbnz	r0, d586e <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d5864:	7873      	ldrb	r3, [r6, #1]
   d5866:	2b00      	cmp	r3, #0
   d5868:	f000 8090 	beq.w	d598c <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d586c:	e7cd      	b.n	d580a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d586e:	7802      	ldrb	r2, [r0, #0]
   d5870:	2ae5      	cmp	r2, #229	; 0xe5
   d5872:	d000      	beq.n	d5876 <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d5874:	b942      	cbnz	r2, d5888 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5876:	2c00      	cmp	r4, #0
   d5878:	bf08      	it	eq
   d587a:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d587c:	42bc      	cmp	r4, r7
        freeFound++;
   d587e:	bf3c      	itt	cc
   d5880:	3401      	addcc	r4, #1
   d5882:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d5884:	b922      	cbnz	r2, d5890 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d5886:	e081      	b.n	d598c <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d5888:	42bc      	cmp	r4, r7
   d588a:	bf38      	it	cc
   d588c:	2400      	movcc	r4, #0
   d588e:	e003      	b.n	d5898 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d5890:	2ae5      	cmp	r2, #229	; 0xe5
   d5892:	d101      	bne.n	d5898 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d5894:	2500      	movs	r5, #0
   d5896:	e7db      	b.n	d5850 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d5898:	2a2e      	cmp	r2, #46	; 0x2e
   d589a:	d0fb      	beq.n	d5894 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d589c:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d589e:	290f      	cmp	r1, #15
   d58a0:	d152      	bne.n	d5948 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d58a2:	b93d      	cbnz	r5, d58b4 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d58a4:	0651      	lsls	r1, r2, #25
   d58a6:	d5d3      	bpl.n	d5850 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d58a8:	7b43      	ldrb	r3, [r0, #13]
   d58aa:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d58ac:	f002 051f 	and.w	r5, r2, #31
   d58b0:	462b      	mov	r3, r5
   d58b2:	e007      	b.n	d58c4 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d58b4:	3b01      	subs	r3, #1
   d58b6:	b2db      	uxtb	r3, r3
   d58b8:	429a      	cmp	r2, r3
   d58ba:	d1eb      	bne.n	d5894 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d58bc:	7b42      	ldrb	r2, [r0, #13]
   d58be:	9903      	ldr	r1, [sp, #12]
   d58c0:	4291      	cmp	r1, r2
   d58c2:	d1e7      	bne.n	d5894 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d58c4:	1e5a      	subs	r2, r3, #1
   d58c6:	f04f 0c0d 	mov.w	ip, #13
   d58ca:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d58ce:	9a02      	ldr	r2, [sp, #8]
   d58d0:	4562      	cmp	r2, ip
   d58d2:	d9df      	bls.n	d5894 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d58d4:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d58d8:	f1be 0f04 	cmp.w	lr, #4
   d58dc:	fa5f f28e 	uxtb.w	r2, lr
   d58e0:	d804      	bhi.n	d58ec <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d58e2:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d58e6:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d58ea:	e00c      	b.n	d5906 <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d58ec:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d58ee:	bf95      	itete	ls
   d58f0:	f10e 32ff 	addls.w	r2, lr, #4294967295	; 0xffffffff
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d58f4:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d58f8:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d58fc:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d5900:	bf94      	ite	ls
   d5902:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5904:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d5906:	9902      	ldr	r1, [sp, #8]
   d5908:	4561      	cmp	r1, ip
   d590a:	d103      	bne.n	d5914 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d590c:	2a00      	cmp	r2, #0
   d590e:	bf18      	it	ne
   d5910:	2500      	movne	r5, #0
   d5912:	e79d      	b.n	d5850 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5914:	2aff      	cmp	r2, #255	; 0xff
   d5916:	d8bd      	bhi.n	d5894 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5918:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d591a:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d591e:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5920:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d5924:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5928:	bf98      	it	ls
   d592a:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d592c:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5930:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d5934:	bf98      	it	ls
   d5936:	b2d2      	uxtbls	r2, r2
   d5938:	f1bc 0f19 	cmp.w	ip, #25
   d593c:	bf9c      	itt	ls
   d593e:	3120      	addls	r1, #32
   d5940:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5942:	4291      	cmp	r1, r2
   d5944:	d1a6      	bne.n	d5894 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5946:	e0fb      	b.n	d5b40 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5948:	0709      	lsls	r1, r1, #28
   d594a:	d4a3      	bmi.n	d5894 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d594c:	b14d      	cbz	r5, d5962 <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d594e:	2b01      	cmp	r3, #1
   d5950:	f47f af5b 	bne.w	d580a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5954:	f7ff fdfc 	bl	d5550 <_ZN7FatFile11lfnChecksumEPh>
   d5958:	9b03      	ldr	r3, [sp, #12]
   d595a:	4283      	cmp	r3, r0
   d595c:	f47f af55 	bne.w	d580a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5960:	e00f      	b.n	d5982 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5962:	220b      	movs	r2, #11
   d5964:	9906      	ldr	r1, [sp, #24]
   d5966:	9307      	str	r3, [sp, #28]
   d5968:	f002 fe36 	bl	d85d8 <memcmp>
   d596c:	9b07      	ldr	r3, [sp, #28]
   d596e:	2800      	cmp	r0, #0
   d5970:	f47f af6e 	bne.w	d5850 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d5974:	f899 2000 	ldrb.w	r2, [r9]
   d5978:	07d2      	lsls	r2, r2, #31
   d597a:	d502      	bpl.n	d5982 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d597c:	2201      	movs	r2, #1
   d597e:	9204      	str	r2, [sp, #16]
   d5980:	e766      	b.n	d5850 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d5982:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d5986:	f000 80d1 	beq.w	d5b2c <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d598a:	e73e      	b.n	d580a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d598c:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d5990:	f43f af3b 	beq.w	d580a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5994:	f00b 0303 	and.w	r3, fp, #3
   d5998:	3b01      	subs	r3, #1
   d599a:	2b01      	cmp	r3, #1
   d599c:	f63f af35 	bhi.w	d580a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d59a0:	2c00      	cmp	r4, #0
   d59a2:	bf08      	it	eq
   d59a4:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d59a6:	42bc      	cmp	r4, r7
   d59a8:	d302      	bcc.n	d59b0 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d59aa:	9b04      	ldr	r3, [sp, #16]
   d59ac:	b9cb      	cbnz	r3, d59e2 <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d59ae:	e01f      	b.n	d59f0 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d59b0:	2100      	movs	r1, #0
   d59b2:	4630      	mov	r0, r6
   d59b4:	f7ff fb9e 	bl	d50f4 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d59b8:	b910      	cbnz	r0, d59c0 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d59ba:	7873      	ldrb	r3, [r6, #1]
   d59bc:	b15b      	cbz	r3, d59d6 <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d59be:	e724      	b.n	d580a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d59c0:	3401      	adds	r4, #1
   d59c2:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d59c4:	e7ef      	b.n	d59a6 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d59c6:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d59c8:	791b      	ldrb	r3, [r3, #4]
   d59ca:	2b01      	cmp	r3, #1
   d59cc:	d8ed      	bhi.n	d59aa <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d59ce:	3410      	adds	r4, #16
   d59d0:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d59d2:	42a7      	cmp	r7, r4
   d59d4:	d9e9      	bls.n	d59aa <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d59d6:	4630      	mov	r0, r6
   d59d8:	f7ff fa72 	bl	d4ec0 <_ZN7FatFile13addDirClusterEv>
   d59dc:	2800      	cmp	r0, #0
   d59de:	d1f2      	bne.n	d59c6 <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d59e0:	e713      	b.n	d580a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d59e2:	4649      	mov	r1, r9
   d59e4:	4630      	mov	r0, r6
   d59e6:	f7ff feaf 	bl	d5748 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d59ea:	2800      	cmp	r0, #0
   d59ec:	f43f af0d 	beq.w	d580a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d59f0:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d59f4:	4630      	mov	r0, r6
   d59f6:	f7ff fb9a 	bl	d512e <_ZN7FatFile7seekSetEm>
   d59fa:	2800      	cmp	r0, #0
   d59fc:	f43f af05 	beq.w	d580a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d5a00:	1e7d      	subs	r5, r7, #1
   d5a02:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d5a04:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d5a06:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d5a0a:	f04f 080f 	mov.w	r8, #15
   d5a0e:	e041      	b.n	d5a94 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d5a10:	2100      	movs	r1, #0
   d5a12:	4630      	mov	r0, r6
   d5a14:	f7ff fb6e 	bl	d50f4 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d5a18:	4607      	mov	r7, r0
   d5a1a:	2800      	cmp	r0, #0
   d5a1c:	f43f aef5 	beq.w	d580a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d5a20:	68b2      	ldr	r2, [r6, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d5a22:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d5a26:	42ac      	cmp	r4, r5
   d5a28:	f043 0301 	orr.w	r3, r3, #1
   d5a2c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d5a30:	bf0c      	ite	eq
   d5a32:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d5a36:	4622      	movne	r2, r4
   d5a38:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d5a3a:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d5a3e:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d5a42:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d5a46:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d5a48:	f7ff fd82 	bl	d5550 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5a4c:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d5a4e:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d5a50:	f887 a01a 	strb.w	sl, [r7, #26]
   d5a54:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5a58:	f002 021f 	and.w	r2, r2, #31
   d5a5c:	230d      	movs	r3, #13
   d5a5e:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d5a60:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5a64:	435a      	muls	r2, r3
   d5a66:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d5a68:	9902      	ldr	r1, [sp, #8]
   d5a6a:	4291      	cmp	r1, r2
   d5a6c:	d915      	bls.n	d5a9a <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d5a6e:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d5a72:	2b04      	cmp	r3, #4
   d5a74:	fa5f fc83 	uxtb.w	ip, r3
   d5a78:	f103 0001 	add.w	r0, r3, #1
   d5a7c:	d813      	bhi.n	d5aa6 <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d5a7e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d5a82:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d5a86:	280d      	cmp	r0, #13
   d5a88:	f102 0201 	add.w	r2, r2, #1
   d5a8c:	4603      	mov	r3, r0
   d5a8e:	d1eb      	bne.n	d5a68 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d5a90:	3c01      	subs	r4, #1
   d5a92:	b2e4      	uxtb	r4, r4
   d5a94:	2c00      	cmp	r4, #0
   d5a96:	d1bb      	bne.n	d5a10 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d5a98:	e00e      	b.n	d5ab8 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d5a9a:	bf14      	ite	ne
   d5a9c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d5aa0:	2100      	moveq	r1, #0
   d5aa2:	b289      	uxth	r1, r1
   d5aa4:	e7e5      	b.n	d5a72 <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d5aa6:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d5aaa:	bf94      	ite	ls
   d5aac:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d5ab0:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d5ab4:	8099      	strh	r1, [r3, #4]
   d5ab6:	e7e6      	b.n	d5a86 <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d5ab8:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d5aba:	4621      	mov	r1, r4
   d5abc:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d5abe:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d5ac2:	f7ff fb17 	bl	d50f4 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d5ac6:	4607      	mov	r7, r0
   d5ac8:	2800      	cmp	r0, #0
   d5aca:	f43f ae9e 	beq.w	d580a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d5ace:	2220      	movs	r2, #32
   d5ad0:	4621      	mov	r1, r4
   d5ad2:	f002 fd9b 	bl	d860c <memset>
  memcpy(dir->name, fname->sfn, 11);
   d5ad6:	464b      	mov	r3, r9
   d5ad8:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d5adc:	603a      	str	r2, [r7, #0]
   d5ade:	685a      	ldr	r2, [r3, #4]
   d5ae0:	607a      	str	r2, [r7, #4]
   d5ae2:	891a      	ldrh	r2, [r3, #8]
   d5ae4:	813a      	strh	r2, [r7, #8]
   d5ae6:	7a9b      	ldrb	r3, [r3, #10]
   d5ae8:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d5aea:	f899 3000 	ldrb.w	r3, [r9]
   d5aee:	f003 0318 	and.w	r3, r3, #24
   d5af2:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d5af4:	4b18      	ldr	r3, [pc, #96]	; (d5b58 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d5af6:	681b      	ldr	r3, [r3, #0]
   d5af8:	b12b      	cbz	r3, d5b06 <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d5afa:	f107 010e 	add.w	r1, r7, #14
   d5afe:	f107 0010 	add.w	r0, r7, #16
   d5b02:	4798      	blx	r3
   d5b04:	e006      	b.n	d5b14 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d5b06:	2321      	movs	r3, #33	; 0x21
   d5b08:	743b      	strb	r3, [r7, #16]
   d5b0a:	2328      	movs	r3, #40	; 0x28
   d5b0c:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d5b0e:	2308      	movs	r3, #8
   d5b10:	73bc      	strb	r4, [r7, #14]
   d5b12:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d5b14:	8a3b      	ldrh	r3, [r7, #16]
   d5b16:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d5b18:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d5b1a:	89fb      	ldrh	r3, [r7, #14]
   d5b1c:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d5b1e:	68b2      	ldr	r2, [r6, #8]
   d5b20:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d5b24:	f043 0301 	orr.w	r3, r3, #1
   d5b28:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d5b2c:	9500      	str	r5, [sp, #0]
   d5b2e:	465b      	mov	r3, fp
   d5b30:	4652      	mov	r2, sl
   d5b32:	4631      	mov	r1, r6
   d5b34:	9805      	ldr	r0, [sp, #20]
   d5b36:	f7ff fb43 	bl	d51c0 <_ZN7FatFile15openCachedEntryEPS_tih>
   d5b3a:	e009      	b.n	d5b50 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d5b3c:	2701      	movs	r7, #1
   d5b3e:	e677      	b.n	d5830 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d5b40:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d5b44:	f1be 0f0d 	cmp.w	lr, #13
   d5b48:	f43f ae82 	beq.w	d5850 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5b4c:	46d4      	mov	ip, sl
   d5b4e:	e6c3      	b.n	d58d8 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d5b50:	b009      	add	sp, #36	; 0x24
   d5b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5b56:	bf00      	nop
   d5b58:	2003e474 	.word	0x2003e474

000d5b5c <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d5b5c:	f000 bd16 	b.w	d658c <HAL_Pin_Map>

000d5b60 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5b60:	b570      	push	{r4, r5, r6, lr}
   d5b62:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5b64:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5b66:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5b68:	b149      	cbz	r1, d5b7e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5b6a:	f002 fd7f 	bl	d866c <strlen>
   d5b6e:	682b      	ldr	r3, [r5, #0]
   d5b70:	4602      	mov	r2, r0
   d5b72:	4621      	mov	r1, r4
   d5b74:	4628      	mov	r0, r5
   d5b76:	68db      	ldr	r3, [r3, #12]
    }
   d5b78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5b7c:	4718      	bx	r3
    }
   d5b7e:	bd70      	pop	{r4, r5, r6, pc}

000d5b80 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d5b80:	f000 bd04 	b.w	d658c <HAL_Pin_Map>

000d5b84 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d5b84:	f000 bd02 	b.w	d658c <HAL_Pin_Map>

000d5b88 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5b88:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d5b8a:	7803      	ldrb	r3, [r0, #0]
   d5b8c:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5b8e:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d5b90:	d51e      	bpl.n	d5bd0 <_ZN8FatCache4syncEv+0x48>
   d5b92:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5b94:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d5b96:	f100 060c 	add.w	r6, r0, #12
   d5b9a:	4632      	mov	r2, r6
   d5b9c:	6818      	ldr	r0, [r3, #0]
   d5b9e:	f000 fb9b 	bl	d62d8 <_ZN9SdSpiCard10writeBlockEmPKh>
   d5ba2:	4605      	mov	r5, r0
   d5ba4:	b908      	cbnz	r0, d5baa <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d5ba6:	2500      	movs	r5, #0
   d5ba8:	e013      	b.n	d5bd2 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d5baa:	7823      	ldrb	r3, [r4, #0]
   d5bac:	079b      	lsls	r3, r3, #30
   d5bae:	d404      	bmi.n	d5bba <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d5bb0:	7823      	ldrb	r3, [r4, #0]
   d5bb2:	f023 0301 	bic.w	r3, r3, #1
   d5bb6:	7023      	strb	r3, [r4, #0]
   d5bb8:	e00b      	b.n	d5bd2 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d5bba:	6863      	ldr	r3, [r4, #4]
   d5bbc:	68a0      	ldr	r0, [r4, #8]
   d5bbe:	6919      	ldr	r1, [r3, #16]
   d5bc0:	4632      	mov	r2, r6
   d5bc2:	4401      	add	r1, r0
   d5bc4:	6818      	ldr	r0, [r3, #0]
   d5bc6:	f000 fb87 	bl	d62d8 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d5bca:	2800      	cmp	r0, #0
   d5bcc:	d1f0      	bne.n	d5bb0 <_ZN8FatCache4syncEv+0x28>
   d5bce:	e7ea      	b.n	d5ba6 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d5bd0:	2501      	movs	r5, #1

fail:
  return false;
}
   d5bd2:	4628      	mov	r0, r5
   d5bd4:	bd70      	pop	{r4, r5, r6, pc}

000d5bd6 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5bd6:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d5bd8:	6883      	ldr	r3, [r0, #8]
   d5bda:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5bdc:	4604      	mov	r4, r0
   d5bde:	460e      	mov	r6, r1
   d5be0:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d5be2:	d014      	beq.n	d5c0e <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d5be4:	f7ff ffd0 	bl	d5b88 <_ZN8FatCache4syncEv>
   d5be8:	b908      	cbnz	r0, d5bee <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d5bea:	2000      	movs	r0, #0
   d5bec:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d5bee:	076b      	lsls	r3, r5, #29
   d5bf0:	d503      	bpl.n	d5bfa <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d5bf2:	2300      	movs	r3, #0
   d5bf4:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d5bf6:	60a6      	str	r6, [r4, #8]
   d5bf8:	e009      	b.n	d5c0e <_ZN8FatCache4readEmh+0x38>
   d5bfa:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5bfc:	f104 020c 	add.w	r2, r4, #12
   d5c00:	4631      	mov	r1, r6
   d5c02:	6818      	ldr	r0, [r3, #0]
   d5c04:	f000 fade 	bl	d61c4 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d5c08:	2800      	cmp	r0, #0
   d5c0a:	d1f2      	bne.n	d5bf2 <_ZN8FatCache4readEmh+0x1c>
   d5c0c:	e7ed      	b.n	d5bea <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d5c0e:	7823      	ldrb	r3, [r4, #0]
   d5c10:	4620      	mov	r0, r4
   d5c12:	f005 0503 	and.w	r5, r5, #3
   d5c16:	431d      	orrs	r5, r3
   d5c18:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d5c1c:	bd70      	pop	{r4, r5, r6, pc}

000d5c1e <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d5c1e:	7983      	ldrb	r3, [r0, #6]
   d5c20:	6940      	ldr	r0, [r0, #20]
   d5c22:	3902      	subs	r1, #2
   d5c24:	4099      	lsls	r1, r3
}
   d5c26:	4408      	add	r0, r1
   d5c28:	4770      	bx	lr

000d5c2a <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5c2a:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d5c2c:	b570      	push	{r4, r5, r6, lr}
   d5c2e:	4605      	mov	r5, r0
   d5c30:	460c      	mov	r4, r1
   d5c32:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5c34:	d802      	bhi.n	d5c3c <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d5c36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5c3a:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5c3c:	69c3      	ldr	r3, [r0, #28]
   d5c3e:	4299      	cmp	r1, r3
   d5c40:	d8f9      	bhi.n	d5c36 <_ZN9FatVolume6fatGetEmPm+0xc>
   d5c42:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5c44:	2b20      	cmp	r3, #32
   d5c46:	d110      	bne.n	d5c6a <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d5c48:	6981      	ldr	r1, [r0, #24]
   d5c4a:	2202      	movs	r2, #2
   d5c4c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5c50:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5c54:	f7ff ffbf 	bl	d5bd6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5c58:	2800      	cmp	r0, #0
   d5c5a:	d0ec      	beq.n	d5c36 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d5c5c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5c60:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d5c64:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d5c68:	e00f      	b.n	d5c8a <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d5c6a:	2b10      	cmp	r3, #16
   d5c6c:	d1e3      	bne.n	d5c36 <_ZN9FatVolume6fatGetEmPm+0xc>
   d5c6e:	6983      	ldr	r3, [r0, #24]
   d5c70:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5c74:	2202      	movs	r2, #2
   d5c76:	4419      	add	r1, r3
   d5c78:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5c7c:	f7ff ffab 	bl	d5bd6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5c80:	2800      	cmp	r0, #0
   d5c82:	d0d8      	beq.n	d5c36 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d5c84:	b2e4      	uxtb	r4, r4
   d5c86:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d5c8a:	69ea      	ldr	r2, [r5, #28]
   d5c8c:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d5c8e:	bf9a      	itte	ls
   d5c90:	6033      	strls	r3, [r6, #0]
  return 1;
   d5c92:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d5c94:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d5c96:	bd70      	pop	{r4, r5, r6, pc}

000d5c98 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5c98:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d5c9a:	b538      	push	{r3, r4, r5, lr}
   d5c9c:	460c      	mov	r4, r1
   d5c9e:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5ca0:	d801      	bhi.n	d5ca6 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d5ca2:	2000      	movs	r0, #0
   d5ca4:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5ca6:	69c3      	ldr	r3, [r0, #28]
   d5ca8:	4299      	cmp	r1, r3
   d5caa:	d8fa      	bhi.n	d5ca2 <_ZN9FatVolume6fatPutEmm+0xa>
   d5cac:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5cae:	2b20      	cmp	r3, #32
   d5cb0:	d10e      	bne.n	d5cd0 <_ZN9FatVolume6fatPutEmm+0x38>
   d5cb2:	6981      	ldr	r1, [r0, #24]
   d5cb4:	2203      	movs	r2, #3
   d5cb6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5cba:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5cbe:	f7ff ff8a 	bl	d5bd6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d5cc2:	2800      	cmp	r0, #0
   d5cc4:	d0ed      	beq.n	d5ca2 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d5cc6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5cca:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d5cce:	e00f      	b.n	d5cf0 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d5cd0:	2b10      	cmp	r3, #16
   d5cd2:	d1e6      	bne.n	d5ca2 <_ZN9FatVolume6fatPutEmm+0xa>
   d5cd4:	6983      	ldr	r3, [r0, #24]
   d5cd6:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5cda:	2203      	movs	r2, #3
   d5cdc:	4419      	add	r1, r3
   d5cde:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5ce2:	f7ff ff78 	bl	d5bd6 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d5ce6:	2800      	cmp	r0, #0
   d5ce8:	d0db      	beq.n	d5ca2 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d5cea:	b2e4      	uxtb	r4, r4
   d5cec:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d5cf0:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d5cf2:	bd38      	pop	{r3, r4, r5, pc}

000d5cf4 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d5cf4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d5cf8:	68c4      	ldr	r4, [r0, #12]
   d5cfa:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d5cfc:	4605      	mov	r5, r0
   d5cfe:	460e      	mov	r6, r1
   d5d00:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d5d02:	d207      	bcs.n	d5d14 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d5d04:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d5d06:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d5d08:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d5d0a:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d5d0c:	429c      	cmp	r4, r3
   d5d0e:	d903      	bls.n	d5d18 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d5d10:	b9cf      	cbnz	r7, d5d46 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d5d12:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d5d14:	2701      	movs	r7, #1
   d5d16:	e7f7      	b.n	d5d08 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d5d18:	42a6      	cmp	r6, r4
   d5d1a:	d014      	beq.n	d5d46 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d5d1c:	aa01      	add	r2, sp, #4
   d5d1e:	4621      	mov	r1, r4
   d5d20:	4628      	mov	r0, r5
   d5d22:	f7ff ff82 	bl	d5c2a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d5d26:	2800      	cmp	r0, #0
   d5d28:	db0d      	blt.n	d5d46 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d5d2a:	d0ed      	beq.n	d5d08 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d5d2c:	9b01      	ldr	r3, [sp, #4]
   d5d2e:	2b00      	cmp	r3, #0
   d5d30:	d1ea      	bne.n	d5d08 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d5d32:	b107      	cbz	r7, d5d36 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d5d34:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d5d36:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d5d3a:	4621      	mov	r1, r4
   d5d3c:	4628      	mov	r0, r5
   d5d3e:	f7ff ffab 	bl	d5c98 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d5d42:	4607      	mov	r7, r0
   d5d44:	b908      	cbnz	r0, d5d4a <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d5d46:	2700      	movs	r7, #0
   d5d48:	e00b      	b.n	d5d62 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d5d4a:	b916      	cbnz	r6, d5d52 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d5d4c:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d5d50:	e007      	b.n	d5d62 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d5d52:	4622      	mov	r2, r4
   d5d54:	4631      	mov	r1, r6
   d5d56:	4628      	mov	r0, r5
   d5d58:	f7ff ff9e 	bl	d5c98 <_ZN9FatVolume6fatPutEmm>
   d5d5c:	2800      	cmp	r0, #0
   d5d5e:	d1f5      	bne.n	d5d4c <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d5d60:	e7f1      	b.n	d5d46 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d5d62:	4638      	mov	r0, r7
   d5d64:	b002      	add	sp, #8
   d5d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5d6a <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d5d6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5d6c:	4605      	mov	r5, r0
   d5d6e:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d5d70:	aa01      	add	r2, sp, #4
   d5d72:	4621      	mov	r1, r4
   d5d74:	4628      	mov	r0, r5
   d5d76:	f7ff ff58 	bl	d5c2a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d5d7a:	1e06      	subs	r6, r0, #0
   d5d7c:	da01      	bge.n	d5d82 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d5d7e:	2000      	movs	r0, #0
   d5d80:	e00f      	b.n	d5da2 <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d5d82:	2200      	movs	r2, #0
   d5d84:	4621      	mov	r1, r4
   d5d86:	4628      	mov	r0, r5
   d5d88:	f7ff ff86 	bl	d5c98 <_ZN9FatVolume6fatPutEmm>
   d5d8c:	2800      	cmp	r0, #0
   d5d8e:	d0f6      	beq.n	d5d7e <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d5d90:	68eb      	ldr	r3, [r5, #12]
   d5d92:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d5d94:	bf9c      	itt	ls
   d5d96:	f104 34ff 	addls.w	r4, r4, #4294967295	; 0xffffffff
   d5d9a:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d5d9c:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d5d9e:	2e00      	cmp	r6, #0
   d5da0:	d1e6      	bne.n	d5d70 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d5da2:	b002      	add	sp, #8
   d5da4:	bd70      	pop	{r4, r5, r6, pc}

000d5da6 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d5da6:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d5da8:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d5daa:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d5dac:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d5dae:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5db0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d5db4:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d5db6:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d5db8:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5dba:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5dbe:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d5dc0:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5dc4:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d5dc8:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d5dcc:	b1a1      	cbz	r1, d5df8 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d5dce:	2904      	cmp	r1, #4
   d5dd0:	d85d      	bhi.n	d5e8e <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5dd2:	4611      	mov	r1, r2
   d5dd4:	3024      	adds	r0, #36	; 0x24
   d5dd6:	f7ff fefe 	bl	d5bd6 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5dda:	2800      	cmp	r0, #0
   d5ddc:	d057      	beq.n	d5e8e <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d5dde:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d5de2:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d5de6:	065b      	lsls	r3, r3, #25
   d5de8:	d151      	bne.n	d5e8e <_ZN9FatVolume4initEh+0xe8>
   d5dea:	351b      	adds	r5, #27
   d5dec:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d5df0:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d5df4:	2d00      	cmp	r5, #0
   d5df6:	d04a      	beq.n	d5e8e <_ZN9FatVolume4initEh+0xe8>
   d5df8:	2200      	movs	r2, #0
   d5dfa:	4629      	mov	r1, r5
   d5dfc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d5e00:	f7ff fee9 	bl	d5bd6 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d5e04:	2800      	cmp	r0, #0
   d5e06:	d042      	beq.n	d5e8e <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d5e08:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d5e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d5e10:	d13d      	bne.n	d5e8e <_ZN9FatVolume4initEh+0xe8>
   d5e12:	7c03      	ldrb	r3, [r0, #16]
   d5e14:	2b02      	cmp	r3, #2
   d5e16:	d13a      	bne.n	d5e8e <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d5e18:	89c3      	ldrh	r3, [r0, #14]
   d5e1a:	2b00      	cmp	r3, #0
   d5e1c:	d037      	beq.n	d5e8e <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d5e1e:	7b41      	ldrb	r1, [r0, #13]
   d5e20:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d5e22:	1e4b      	subs	r3, r1, #1
   d5e24:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d5e26:	2300      	movs	r3, #0
   d5e28:	71a3      	strb	r3, [r4, #6]
   d5e2a:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d5e2c:	2301      	movs	r3, #1
   d5e2e:	428b      	cmp	r3, r1
   d5e30:	d007      	beq.n	d5e42 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d5e32:	3e01      	subs	r6, #1
   d5e34:	d02b      	beq.n	d5e8e <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d5e36:	79a2      	ldrb	r2, [r4, #6]
   d5e38:	005b      	lsls	r3, r3, #1
   d5e3a:	3201      	adds	r2, #1
   d5e3c:	b2db      	uxtb	r3, r3
   d5e3e:	71a2      	strb	r2, [r4, #6]
   d5e40:	e7f5      	b.n	d5e2e <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d5e42:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d5e44:	b902      	cbnz	r2, d5e48 <_ZN9FatVolume4initEh+0xa2>
   d5e46:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d5e48:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d5e4a:	89c6      	ldrh	r6, [r0, #14]
   d5e4c:	442e      	add	r6, r5
   d5e4e:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d5e50:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d5e54:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d5e56:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d5e5a:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d5e5c:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d5e60:	0152      	lsls	r2, r2, #5
   d5e62:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d5e66:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d5e6a:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d5e6c:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d5e70:	b903      	cbnz	r3, d5e74 <_ZN9FatVolume4initEh+0xce>
   d5e72:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d5e74:	1aad      	subs	r5, r5, r2
   d5e76:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d5e78:	79a5      	ldrb	r5, [r4, #6]
   d5e7a:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d5e7e:	1c6b      	adds	r3, r5, #1
   d5e80:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d5e82:	f640 73f4 	movw	r3, #4084	; 0xff4
   d5e86:	429d      	cmp	r5, r3
   d5e88:	d803      	bhi.n	d5e92 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d5e8a:	230c      	movs	r3, #12
   d5e8c:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d5e8e:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d5e90:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d5e92:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d5e96:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d5e98:	bf85      	ittet	hi
   d5e9a:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d5e9c:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d5e9e:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d5ea0:	2320      	movhi	r3, #32
   d5ea2:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d5ea4:	2001      	movs	r0, #1

fail:
  return false;
}
   d5ea6:	bd70      	pop	{r4, r5, r6, pc}

000d5ea8 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d5ea8:	f000 bb70 	b.w	d658c <HAL_Pin_Map>

000d5eac <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d5eac:	f000 bb6e 	b.w	d658c <HAL_Pin_Map>

000d5eb0 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d5eb0:	f000 bb6c 	b.w	d658c <HAL_Pin_Map>

000d5eb4 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d5eb4:	f000 bb6a 	b.w	d658c <HAL_Pin_Map>

000d5eb8 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d5eb8:	f000 bb68 	b.w	d658c <HAL_Pin_Map>

000d5ebc <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d5ebc:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d5ebe:	4c0e      	ldr	r4, [pc, #56]	; (d5ef8 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d5ec0:	460e      	mov	r6, r1
   d5ec2:	4615      	mov	r5, r2

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d5ec4:	f000 fb42 	bl	d654c <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d5ec8:	6823      	ldr	r3, [r4, #0]
   d5eca:	1ac0      	subs	r0, r0, r3
   d5ecc:	4b0b      	ldr	r3, [pc, #44]	; (d5efc <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d5ece:	4298      	cmp	r0, r3
   d5ed0:	d908      	bls.n	d5ee4 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5ed2:	f000 fb43 	bl	d655c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5ed6:	4b0a      	ldr	r3, [pc, #40]	; (d5f00 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d5ed8:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d5eda:	f000 fcf3 	bl	d68c4 <spark_process>
   d5ede:	f000 fb35 	bl	d654c <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d5ee2:	6020      	str	r0, [r4, #0]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d5ee4:	f000 fb3a 	bl	d655c <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d5ee8:	b280      	uxth	r0, r0
   d5eea:	1b80      	subs	r0, r0, r6
}
   d5eec:	42a8      	cmp	r0, r5
   d5eee:	bfd4      	ite	le
   d5ef0:	2000      	movle	r0, #0
   d5ef2:	2001      	movgt	r0, #1
   d5ef4:	bd70      	pop	{r4, r5, r6, pc}
   d5ef6:	bf00      	nop
   d5ef8:	2003e478 	.word	0x2003e478
   d5efc:	000186a0 	.word	0x000186a0
   d5f00:	2003e714 	.word	0x2003e714

000d5f04 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d5f04:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d5f06:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d5f08:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d5f0a:	b94d      	cbnz	r5, d5f20 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d5f0c:	6840      	ldr	r0, [r0, #4]
   d5f0e:	f000 fa7d 	bl	d640c <_ZN14SdSpiAltDriver8activateEv>
   d5f12:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d5f14:	4629      	mov	r1, r5
   d5f16:	7d18      	ldrb	r0, [r3, #20]
   d5f18:	f001 fc6b 	bl	d77f2 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d5f1c:	2301      	movs	r3, #1
   d5f1e:	7223      	strb	r3, [r4, #8]
   d5f20:	bd38      	pop	{r3, r4, r5, pc}

000d5f22 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d5f22:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d5f24:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d5f26:	4604      	mov	r4, r0
  if (m_spiActive) {
   d5f28:	b16b      	cbz	r3, d5f46 <_ZN9SdSpiCard7spiStopEv+0x24>
   d5f2a:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d5f2c:	2101      	movs	r1, #1
   d5f2e:	7d18      	ldrb	r0, [r3, #20]
   d5f30:	f001 fc5f 	bl	d77f2 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5f34:	21ff      	movs	r1, #255	; 0xff
   d5f36:	6860      	ldr	r0, [r4, #4]
   d5f38:	f000 fa9a 	bl	d6470 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d5f3c:	6860      	ldr	r0, [r4, #4]
   d5f3e:	f000 fa79 	bl	d6434 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d5f42:	2300      	movs	r3, #0
   d5f44:	7223      	strb	r3, [r4, #8]
   d5f46:	bd10      	pop	{r4, pc}

000d5f48 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d5f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5f4a:	4604      	mov	r4, r0
   d5f4c:	460d      	mov	r5, r1
   d5f4e:	4616      	mov	r6, r2
   d5f50:	f000 fb04 	bl	d655c <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d5f54:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5f56:	6860      	ldr	r0, [r4, #4]
   d5f58:	f000 fa6f 	bl	d643a <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d5f5c:	28ff      	cmp	r0, #255	; 0xff
   d5f5e:	7260      	strb	r0, [r4, #9]
   d5f60:	d109      	bne.n	d5f76 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d5f62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5f66:	4639      	mov	r1, r7
   d5f68:	4620      	mov	r0, r4
   d5f6a:	f7ff ffa7 	bl	d5ebc <_ZN9SdSpiCard10isTimedOutEtt>
   d5f6e:	2800      	cmp	r0, #0
   d5f70:	d0f1      	beq.n	d5f56 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5f72:	2355      	movs	r3, #85	; 0x55
   d5f74:	e00b      	b.n	d5f8e <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d5f76:	28fe      	cmp	r0, #254	; 0xfe
   d5f78:	d001      	beq.n	d5f7e <_ZN9SdSpiCard8readDataEPhj+0x36>
   d5f7a:	2350      	movs	r3, #80	; 0x50
   d5f7c:	e007      	b.n	d5f8e <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d5f7e:	4632      	mov	r2, r6
   d5f80:	4629      	mov	r1, r5
   d5f82:	6860      	ldr	r0, [r4, #4]
   d5f84:	f000 fa5e 	bl	d6444 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d5f88:	7260      	strb	r0, [r4, #9]
   d5f8a:	b130      	cbz	r0, d5f9a <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5f8c:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d5f8e:	4620      	mov	r0, r4
   d5f90:	7023      	strb	r3, [r4, #0]
   d5f92:	f7ff ffc6 	bl	d5f22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5f96:	2000      	movs	r0, #0
}
   d5f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5f9a:	6860      	ldr	r0, [r4, #4]
   d5f9c:	f000 fa4d 	bl	d643a <_ZN14SdSpiAltDriver7receiveEv>
   d5fa0:	6860      	ldr	r0, [r4, #4]
   d5fa2:	f000 fa4a 	bl	d643a <_ZN14SdSpiAltDriver7receiveEv>
   d5fa6:	2001      	movs	r0, #1
   d5fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5faa <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d5faa:	b570      	push	{r4, r5, r6, lr}
   d5fac:	4604      	mov	r4, r0
   d5fae:	460e      	mov	r6, r1
   d5fb0:	f000 fad4 	bl	d655c <HAL_Timer_Get_Milli_Seconds>
   d5fb4:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d5fb6:	4632      	mov	r2, r6
   d5fb8:	4629      	mov	r1, r5
   d5fba:	4620      	mov	r0, r4
   d5fbc:	f7ff ff7e 	bl	d5ebc <_ZN9SdSpiCard10isTimedOutEtt>
   d5fc0:	b930      	cbnz	r0, d5fd0 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d5fc2:	6860      	ldr	r0, [r4, #4]
   d5fc4:	f000 fa39 	bl	d643a <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d5fc8:	28ff      	cmp	r0, #255	; 0xff
   d5fca:	d1f4      	bne.n	d5fb6 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d5fcc:	2001      	movs	r0, #1
   d5fce:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d5fd0:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d5fd2:	bd70      	pop	{r4, r5, r6, pc}

000d5fd4 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d5fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d5fd6:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d5fd8:	9201      	str	r2, [sp, #4]
   d5fda:	4604      	mov	r4, r0
   d5fdc:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d5fde:	b90b      	cbnz	r3, d5fe4 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d5fe0:	f7ff ff90 	bl	d5f04 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d5fe4:	b125      	cbz	r5, d5ff0 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d5fe6:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d5fea:	4620      	mov	r0, r4
   d5fec:	f7ff ffdd 	bl	d5faa <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5ff0:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d5ff4:	6860      	ldr	r0, [r4, #4]
   d5ff6:	f000 fa3b 	bl	d6470 <_ZN14SdSpiAltDriver4sendEh>
   d5ffa:	f10d 0607 	add.w	r6, sp, #7
   d5ffe:	f10d 0703 	add.w	r7, sp, #3
   d6002:	f816 1901 	ldrb.w	r1, [r6], #-1
   d6006:	6860      	ldr	r0, [r4, #4]
   d6008:	f000 fa32 	bl	d6470 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d600c:	42be      	cmp	r6, r7
   d600e:	d1f8      	bne.n	d6002 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d6010:	2d00      	cmp	r5, #0
   d6012:	bf0c      	ite	eq
   d6014:	2195      	moveq	r1, #149	; 0x95
   d6016:	2187      	movne	r1, #135	; 0x87
   d6018:	6860      	ldr	r0, [r4, #4]
   d601a:	f000 fa29 	bl	d6470 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d601e:	6860      	ldr	r0, [r4, #4]
   d6020:	f000 fa0b 	bl	d643a <_ZN14SdSpiAltDriver7receiveEv>
   d6024:	250b      	movs	r5, #11
   d6026:	6860      	ldr	r0, [r4, #4]
   d6028:	f000 fa07 	bl	d643a <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d602c:	0603      	lsls	r3, r0, #24
   d602e:	7260      	strb	r0, [r4, #9]
   d6030:	d503      	bpl.n	d603a <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d6032:	3d01      	subs	r5, #1
   d6034:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6038:	d1f5      	bne.n	d6026 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d603a:	b003      	add	sp, #12
   d603c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d603e <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d603e:	b570      	push	{r4, r5, r6, lr}
   d6040:	4604      	mov	r4, r0
   d6042:	460d      	mov	r5, r1
   d6044:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d6046:	2137      	movs	r1, #55	; 0x37
   d6048:	2200      	movs	r2, #0
   d604a:	f7ff ffc3 	bl	d5fd4 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d604e:	4632      	mov	r2, r6
   d6050:	4629      	mov	r1, r5
   d6052:	4620      	mov	r0, r4
  }
   d6054:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d6058:	f7ff bfbc 	b.w	d5fd4 <_ZN9SdSpiCard11cardCommandEhm>

000d605c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d605c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d6060:	2500      	movs	r5, #0
   d6062:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d6064:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d6066:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d6068:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d606a:	4604      	mov	r4, r0
   d606c:	4690      	mov	r8, r2
   d606e:	461e      	mov	r6, r3
   d6070:	f000 fa74 	bl	d655c <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d6074:	4641      	mov	r1, r8
   d6076:	4607      	mov	r7, r0
   d6078:	6860      	ldr	r0, [r4, #4]
   d607a:	f000 f9cb 	bl	d6414 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d607e:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_CORE = 72*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d6080:	4a4f      	ldr	r2, [pc, #316]	; (d61c0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d6082:	721d      	strb	r5, [r3, #8]
   d6084:	f04f 0801 	mov.w	r8, #1
   d6088:	60da      	str	r2, [r3, #12]
   d608a:	745d      	strb	r5, [r3, #17]
   d608c:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d6090:	4620      	mov	r0, r4
   d6092:	f7ff ff37 	bl	d5f04 <_ZN9SdSpiCard8spiStartEv>
   d6096:	6863      	ldr	r3, [r4, #4]
   d6098:	4641      	mov	r1, r8
   d609a:	7d18      	ldrb	r0, [r3, #20]
   d609c:	f001 fba9 	bl	d77f2 <digitalWrite>
   d60a0:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d60a2:	21ff      	movs	r1, #255	; 0xff
   d60a4:	6860      	ldr	r0, [r4, #4]
   d60a6:	3d01      	subs	r5, #1
   d60a8:	f000 f9e2 	bl	d6470 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d60ac:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d60b0:	d1f7      	bne.n	d60a2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d60b2:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d60b4:	4629      	mov	r1, r5
   d60b6:	7d18      	ldrb	r0, [r3, #20]
   d60b8:	f001 fb9b 	bl	d77f2 <digitalWrite>
   d60bc:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d60be:	2200      	movs	r2, #0
   d60c0:	4611      	mov	r1, r2
   d60c2:	4620      	mov	r0, r4
   d60c4:	f7ff ff86 	bl	d5fd4 <_ZN9SdSpiCard11cardCommandEhm>
   d60c8:	2801      	cmp	r0, #1
   d60ca:	4680      	mov	r8, r0
   d60cc:	d012      	beq.n	d60f4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d60ce:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d60d0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d60d4:	d101      	bne.n	d60da <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d60d6:	2320      	movs	r3, #32
   d60d8:	e057      	b.n	d618a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d60da:	21fd      	movs	r1, #253	; 0xfd
   d60dc:	6860      	ldr	r0, [r4, #4]
   d60de:	f000 f9c7 	bl	d6470 <_ZN14SdSpiAltDriver4sendEh>
   d60e2:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d60e6:	6860      	ldr	r0, [r4, #4]
   d60e8:	f000 f9a7 	bl	d643a <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d60ec:	f1b8 0801 	subs.w	r8, r8, #1
   d60f0:	d1f9      	bne.n	d60e6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d60f2:	e7e4      	b.n	d60be <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d60f4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d60f8:	2108      	movs	r1, #8
   d60fa:	4620      	mov	r0, r4
   d60fc:	f7ff ff6a 	bl	d5fd4 <_ZN9SdSpiCard11cardCommandEhm>
   d6100:	2805      	cmp	r0, #5
   d6102:	d102      	bne.n	d610a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6104:	f884 800a 	strb.w	r8, [r4, #10]
   d6108:	e00f      	b.n	d612a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d610a:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d610c:	6860      	ldr	r0, [r4, #4]
   d610e:	f000 f994 	bl	d643a <_ZN14SdSpiAltDriver7receiveEv>
   d6112:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d6114:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d6118:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d611a:	d1f7      	bne.n	d610c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d611c:	28aa      	cmp	r0, #170	; 0xaa
   d611e:	d102      	bne.n	d6126 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6120:	2302      	movs	r3, #2
   d6122:	72a3      	strb	r3, [r4, #10]
   d6124:	e001      	b.n	d612a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6126:	2325      	movs	r3, #37	; 0x25
   d6128:	e02f      	b.n	d618a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d612a:	7aa3      	ldrb	r3, [r4, #10]
   d612c:	2b02      	cmp	r3, #2
   d612e:	bf0c      	ite	eq
   d6130:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d6134:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d6136:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d6138:	462a      	mov	r2, r5
   d613a:	2129      	movs	r1, #41	; 0x29
   d613c:	4620      	mov	r0, r4
   d613e:	f7ff ff7e 	bl	d603e <_ZN9SdSpiCard8cardAcmdEhm>
   d6142:	4602      	mov	r2, r0
   d6144:	b148      	cbz	r0, d615a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d6146:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d614a:	4639      	mov	r1, r7
   d614c:	4620      	mov	r0, r4
   d614e:	f7ff feb5 	bl	d5ebc <_ZN9SdSpiCard10isTimedOutEtt>
   d6152:	2800      	cmp	r0, #0
   d6154:	d0f0      	beq.n	d6138 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d6156:	2343      	movs	r3, #67	; 0x43
   d6158:	e017      	b.n	d618a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d615a:	7aa3      	ldrb	r3, [r4, #10]
   d615c:	2b02      	cmp	r3, #2
   d615e:	d00e      	beq.n	d617e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d6160:	4620      	mov	r0, r4
   d6162:	f7ff fede 	bl	d5f22 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d6166:	6863      	ldr	r3, [r4, #4]
   d6168:	68b0      	ldr	r0, [r6, #8]
   d616a:	7934      	ldrb	r4, [r6, #4]
   d616c:	7b31      	ldrb	r1, [r6, #12]
   d616e:	7b72      	ldrb	r2, [r6, #13]
   d6170:	745a      	strb	r2, [r3, #17]
   d6172:	60d8      	str	r0, [r3, #12]
   d6174:	721c      	strb	r4, [r3, #8]
   d6176:	7419      	strb	r1, [r3, #16]
  return true;
   d6178:	2001      	movs	r0, #1
   d617a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d617e:	213a      	movs	r1, #58	; 0x3a
   d6180:	4620      	mov	r0, r4
   d6182:	f7ff ff27 	bl	d5fd4 <_ZN9SdSpiCard11cardCommandEhm>
   d6186:	b138      	cbz	r0, d6198 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d6188:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d618a:	4620      	mov	r0, r4
   d618c:	7023      	strb	r3, [r4, #0]
   d618e:	f7ff fec8 	bl	d5f22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6192:	2000      	movs	r0, #0
}
   d6194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6198:	6860      	ldr	r0, [r4, #4]
   d619a:	f000 f94e 	bl	d643a <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d619e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d61a2:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d61a4:	bf04      	itt	eq
   d61a6:	2303      	moveq	r3, #3
   d61a8:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d61aa:	6860      	ldr	r0, [r4, #4]
   d61ac:	f000 f945 	bl	d643a <_ZN14SdSpiAltDriver7receiveEv>
   d61b0:	6860      	ldr	r0, [r4, #4]
   d61b2:	f000 f942 	bl	d643a <_ZN14SdSpiAltDriver7receiveEv>
   d61b6:	6860      	ldr	r0, [r4, #4]
   d61b8:	f000 f93f 	bl	d643a <_ZN14SdSpiAltDriver7receiveEv>
   d61bc:	e7d0      	b.n	d6160 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d61be:	bf00      	nop
   d61c0:	0003d090 	.word	0x0003d090

000d61c4 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d61c4:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d61c6:	7a83      	ldrb	r3, [r0, #10]
   d61c8:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d61ca:	bf18      	it	ne
   d61cc:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d61ce:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d61d0:	460a      	mov	r2, r1
   d61d2:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d61d4:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d61d6:	f7ff fefd 	bl	d5fd4 <_ZN9SdSpiCard11cardCommandEhm>
   d61da:	b110      	cbz	r0, d61e2 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d61dc:	2330      	movs	r3, #48	; 0x30
   d61de:	7023      	strb	r3, [r4, #0]
   d61e0:	e00b      	b.n	d61fa <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d61e2:	4629      	mov	r1, r5
   d61e4:	f44f 7200 	mov.w	r2, #512	; 0x200
   d61e8:	4620      	mov	r0, r4
   d61ea:	f7ff fead 	bl	d5f48 <_ZN9SdSpiCard8readDataEPhj>
   d61ee:	4605      	mov	r5, r0
   d61f0:	b118      	cbz	r0, d61fa <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d61f2:	4620      	mov	r0, r4
   d61f4:	f7ff fe95 	bl	d5f22 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d61f8:	e003      	b.n	d6202 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d61fa:	4620      	mov	r0, r4
   d61fc:	f7ff fe91 	bl	d5f22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6200:	2500      	movs	r5, #0
}
   d6202:	4628      	mov	r0, r5
   d6204:	bd38      	pop	{r3, r4, r5, pc}

000d6206 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6206:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d6208:	7a83      	ldrb	r3, [r0, #10]
   d620a:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d620c:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d620e:	bf18      	it	ne
   d6210:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d6212:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6214:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d6216:	f7ff fedd 	bl	d5fd4 <_ZN9SdSpiCard11cardCommandEhm>
   d621a:	b130      	cbz	r0, d622a <_ZN9SdSpiCard9readStartEm+0x24>
   d621c:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d621e:	4620      	mov	r0, r4
   d6220:	7023      	strb	r3, [r4, #0]
   d6222:	f7ff fe7e 	bl	d5f22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6226:	2000      	movs	r0, #0
   d6228:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d622a:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d622c:	bd10      	pop	{r4, pc}

000d622e <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d622e:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d6230:	2200      	movs	r2, #0
   d6232:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d6234:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d6236:	f7ff fecd 	bl	d5fd4 <_ZN9SdSpiCard11cardCommandEhm>
   d623a:	b130      	cbz	r0, d624a <_ZN9SdSpiCard8readStopEv+0x1c>
   d623c:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d623e:	4620      	mov	r0, r4
   d6240:	7023      	strb	r3, [r4, #0]
   d6242:	f7ff fe6e 	bl	d5f22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6246:	2000      	movs	r0, #0
   d6248:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d624a:	4620      	mov	r0, r4
   d624c:	f7ff fe69 	bl	d5f22 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6250:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6252:	bd10      	pop	{r4, pc}

000d6254 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d6254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6256:	4605      	mov	r5, r0
   d6258:	4616      	mov	r6, r2
   d625a:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d625c:	f7ff ffd3 	bl	d6206 <_ZN9SdSpiCard9readStartEm>
   d6260:	b198      	cbz	r0, d628a <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d6262:	2400      	movs	r4, #0
   d6264:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d6266:	429f      	cmp	r7, r3
   d6268:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d626c:	d908      	bls.n	d6280 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d626e:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6272:	4628      	mov	r0, r5
   d6274:	f7ff fe68 	bl	d5f48 <_ZN9SdSpiCard8readDataEPhj>
   d6278:	3401      	adds	r4, #1
   d627a:	2800      	cmp	r0, #0
   d627c:	d1f2      	bne.n	d6264 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d627e:	e004      	b.n	d628a <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d6280:	4628      	mov	r0, r5
}
   d6282:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d6286:	f7ff bfd2 	b.w	d622e <_ZN9SdSpiCard8readStopEv>
}
   d628a:	2000      	movs	r0, #0
   d628c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d628e <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d628e:	b538      	push	{r3, r4, r5, lr}
   d6290:	4604      	mov	r4, r0
   d6292:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6294:	6840      	ldr	r0, [r0, #4]
   d6296:	f000 f8eb 	bl	d6470 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d629a:	f44f 7200 	mov.w	r2, #512	; 0x200
   d629e:	4629      	mov	r1, r5
   d62a0:	6860      	ldr	r0, [r4, #4]
   d62a2:	f000 f8e9 	bl	d6478 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d62a6:	21ff      	movs	r1, #255	; 0xff
   d62a8:	6860      	ldr	r0, [r4, #4]
   d62aa:	f000 f8e1 	bl	d6470 <_ZN14SdSpiAltDriver4sendEh>
   d62ae:	21ff      	movs	r1, #255	; 0xff
   d62b0:	6860      	ldr	r0, [r4, #4]
   d62b2:	f000 f8dd 	bl	d6470 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d62b6:	6860      	ldr	r0, [r4, #4]
   d62b8:	f000 f8bf 	bl	d643a <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d62bc:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d62be:	f000 001f 	and.w	r0, r0, #31
   d62c2:	2805      	cmp	r0, #5
   d62c4:	d006      	beq.n	d62d4 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d62c6:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d62c8:	4620      	mov	r0, r4
   d62ca:	7023      	strb	r3, [r4, #0]
   d62cc:	f7ff fe29 	bl	d5f22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d62d0:	2000      	movs	r0, #0
   d62d2:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d62d4:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d62d6:	bd38      	pop	{r3, r4, r5, pc}

000d62d8 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d62d8:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d62da:	7a83      	ldrb	r3, [r0, #10]
   d62dc:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d62de:	bf18      	it	ne
   d62e0:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d62e2:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d62e4:	460a      	mov	r2, r1
   d62e6:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d62e8:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d62ea:	f7ff fe73 	bl	d5fd4 <_ZN9SdSpiCard11cardCommandEhm>
   d62ee:	4606      	mov	r6, r0
   d62f0:	b108      	cbz	r0, d62f6 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d62f2:	2332      	movs	r3, #50	; 0x32
   d62f4:	e01d      	b.n	d6332 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d62f6:	462a      	mov	r2, r5
   d62f8:	21fe      	movs	r1, #254	; 0xfe
   d62fa:	4620      	mov	r0, r4
   d62fc:	f7ff ffc7 	bl	d628e <_ZN9SdSpiCard9writeDataEhPKh>
   d6300:	b1c0      	cbz	r0, d6334 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6302:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d6306:	4620      	mov	r0, r4
   d6308:	f7ff fe4f 	bl	d5faa <_ZN9SdSpiCard11waitNotBusyEt>
   d630c:	4605      	mov	r5, r0
   d630e:	b908      	cbnz	r0, d6314 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d6310:	235a      	movs	r3, #90	; 0x5a
   d6312:	e00e      	b.n	d6332 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d6314:	4632      	mov	r2, r6
   d6316:	210d      	movs	r1, #13
   d6318:	4620      	mov	r0, r4
   d631a:	f7ff fe5b 	bl	d5fd4 <_ZN9SdSpiCard11cardCommandEhm>
   d631e:	b938      	cbnz	r0, d6330 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6320:	6860      	ldr	r0, [r4, #4]
   d6322:	f000 f88a 	bl	d643a <_ZN14SdSpiAltDriver7receiveEv>
   d6326:	b918      	cbnz	r0, d6330 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d6328:	4620      	mov	r0, r4
   d632a:	f7ff fdfa 	bl	d5f22 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d632e:	e005      	b.n	d633c <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6330:	2329      	movs	r3, #41	; 0x29
   d6332:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d6334:	4620      	mov	r0, r4
   d6336:	f7ff fdf4 	bl	d5f22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d633a:	2500      	movs	r5, #0
}
   d633c:	4628      	mov	r0, r5
   d633e:	bd70      	pop	{r4, r5, r6, pc}

000d6340 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d6340:	b538      	push	{r3, r4, r5, lr}
   d6342:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6344:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d6348:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d634a:	f7ff fe2e 	bl	d5faa <_ZN9SdSpiCard11waitNotBusyEt>
   d634e:	b910      	cbnz	r0, d6356 <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d6350:	235b      	movs	r3, #91	; 0x5b
   d6352:	7023      	strb	r3, [r4, #0]
   d6354:	e005      	b.n	d6362 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d6356:	462a      	mov	r2, r5
   d6358:	21fc      	movs	r1, #252	; 0xfc
   d635a:	4620      	mov	r0, r4
   d635c:	f7ff ff97 	bl	d628e <_ZN9SdSpiCard9writeDataEhPKh>
   d6360:	b918      	cbnz	r0, d636a <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6362:	4620      	mov	r0, r4
   d6364:	f7ff fddd 	bl	d5f22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6368:	2000      	movs	r0, #0
}
   d636a:	bd38      	pop	{r3, r4, r5, pc}

000d636c <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d636c:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d636e:	7a83      	ldrb	r3, [r0, #10]
   d6370:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6372:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d6374:	bf18      	it	ne
   d6376:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d6378:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d637a:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d637c:	f7ff fe2a 	bl	d5fd4 <_ZN9SdSpiCard11cardCommandEhm>
   d6380:	b130      	cbz	r0, d6390 <_ZN9SdSpiCard10writeStartEm+0x24>
   d6382:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6384:	4620      	mov	r0, r4
   d6386:	7023      	strb	r3, [r4, #0]
   d6388:	f7ff fdcb 	bl	d5f22 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d638c:	2000      	movs	r0, #0
   d638e:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d6390:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6392:	bd10      	pop	{r4, pc}

000d6394 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d6394:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6396:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d639a:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d639c:	f7ff fe05 	bl	d5faa <_ZN9SdSpiCard11waitNotBusyEt>
   d63a0:	4605      	mov	r5, r0
   d63a2:	b120      	cbz	r0, d63ae <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d63a4:	21fd      	movs	r1, #253	; 0xfd
   d63a6:	6860      	ldr	r0, [r4, #4]
   d63a8:	f000 f862 	bl	d6470 <_ZN14SdSpiAltDriver4sendEh>
   d63ac:	e001      	b.n	d63b2 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d63ae:	2356      	movs	r3, #86	; 0x56
   d63b0:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d63b2:	4620      	mov	r0, r4
   d63b4:	f7ff fdb5 	bl	d5f22 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d63b8:	4628      	mov	r0, r5
   d63ba:	bd38      	pop	{r3, r4, r5, pc}

000d63bc <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d63bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d63be:	4605      	mov	r5, r0
   d63c0:	4616      	mov	r6, r2
   d63c2:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d63c4:	f7ff ffd2 	bl	d636c <_ZN9SdSpiCard10writeStartEm>
   d63c8:	b170      	cbz	r0, d63e8 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d63ca:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d63cc:	42bc      	cmp	r4, r7
   d63ce:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d63d2:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d63d4:	d004      	beq.n	d63e0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d63d6:	f7ff ffb3 	bl	d6340 <_ZN9SdSpiCard9writeDataEPKh>
   d63da:	b128      	cbz	r0, d63e8 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d63dc:	3401      	adds	r4, #1
   d63de:	e7f5      	b.n	d63cc <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d63e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d63e4:	f7ff bfd6 	b.w	d6394 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d63e8:	4628      	mov	r0, r5
   d63ea:	f7ff fd9a 	bl	d5f22 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d63ee:	2000      	movs	r0, #0
   d63f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d63f2 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d63f2:	f000 b8cb 	b.w	d658c <HAL_Pin_Map>

000d63f6 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d63f6:	f000 b8c9 	b.w	d658c <HAL_Pin_Map>

000d63fa <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d63fa:	f000 b8c7 	b.w	d658c <HAL_Pin_Map>
	...

000d6400 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d6400:	4b01      	ldr	r3, [pc, #4]	; (d6408 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d6402:	2201      	movs	r2, #1
   d6404:	701a      	strb	r2, [r3, #0]
   d6406:	4770      	bx	lr
   d6408:	2003e47c 	.word	0x2003e47c

000d640c <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d640c:	1d01      	adds	r1, r0, #4
   d640e:	6800      	ldr	r0, [r0, #0]
   d6410:	f000 bf4e 	b.w	d72b0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d6414 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d6414:	b510      	push	{r4, lr}
   d6416:	4604      	mov	r4, r0
  m_csPin = csPin;
   d6418:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d641a:	6800      	ldr	r0, [r0, #0]
   d641c:	f000 ff2a 	bl	d7274 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d6420:	7d20      	ldrb	r0, [r4, #20]
   d6422:	2101      	movs	r1, #1
   d6424:	f001 f9d4 	bl	d77d0 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d6428:	7d20      	ldrb	r0, [r4, #20]
   d642a:	2101      	movs	r1, #1
}
   d642c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d6430:	f001 b9df 	b.w	d77f2 <digitalWrite>

000d6434 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d6434:	6800      	ldr	r0, [r0, #0]
   d6436:	f000 bf22 	b.w	d727e <_ZN8SPIClass14endTransactionEv>

000d643a <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d643a:	21ff      	movs	r1, #255	; 0xff
   d643c:	6800      	ldr	r0, [r0, #0]
   d643e:	f000 bfa7 	b.w	d7390 <_ZN8SPIClass8transferEh>
	...

000d6444 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d6444:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6446:	4b08      	ldr	r3, [pc, #32]	; (d6468 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d6448:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d644a:	2500      	movs	r5, #0
   d644c:	4c07      	ldr	r4, [pc, #28]	; (d646c <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d644e:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6450:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d6452:	4613      	mov	r3, r2
   d6454:	460a      	mov	r2, r1
   d6456:	4629      	mov	r1, r5
   d6458:	f000 ffa0 	bl	d739c <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d645c:	7823      	ldrb	r3, [r4, #0]
   d645e:	2b00      	cmp	r3, #0
   d6460:	d0fc      	beq.n	d645c <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d6462:	2000      	movs	r0, #0
   d6464:	b003      	add	sp, #12
   d6466:	bd30      	pop	{r4, r5, pc}
   d6468:	000d6401 	.word	0x000d6401
   d646c:	2003e47c 	.word	0x2003e47c

000d6470 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d6470:	6800      	ldr	r0, [r0, #0]
   d6472:	f000 bf8d 	b.w	d7390 <_ZN8SPIClass8transferEh>
	...

000d6478 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d6478:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d647a:	4b07      	ldr	r3, [pc, #28]	; (d6498 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d647c:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d647e:	2500      	movs	r5, #0
   d6480:	4c06      	ldr	r4, [pc, #24]	; (d649c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6482:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6484:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6486:	4613      	mov	r3, r2
   d6488:	462a      	mov	r2, r5
   d648a:	f000 ff87 	bl	d739c <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d648e:	7823      	ldrb	r3, [r4, #0]
   d6490:	2b00      	cmp	r3, #0
   d6492:	d0fc      	beq.n	d648e <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d6494:	b003      	add	sp, #12
   d6496:	bd30      	pop	{r4, r5, pc}
   d6498:	000d6401 	.word	0x000d6401
   d649c:	2003e47c 	.word	0x2003e47c

000d64a0 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d64a0:	f000 b874 	b.w	d658c <HAL_Pin_Map>

000d64a4 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d64a4:	f000 b872 	b.w	d658c <HAL_Pin_Map>

000d64a8 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d64a8:	f000 b870 	b.w	d658c <HAL_Pin_Map>

000d64ac <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d64ac:	b508      	push	{r3, lr}
   d64ae:	4b02      	ldr	r3, [pc, #8]	; (d64b8 <os_thread_is_current+0xc>)
   d64b0:	681b      	ldr	r3, [r3, #0]
   d64b2:	689b      	ldr	r3, [r3, #8]
   d64b4:	9301      	str	r3, [sp, #4]
   d64b6:	bd08      	pop	{r3, pc}
   d64b8:	00030248 	.word	0x00030248

000d64bc <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d64bc:	b508      	push	{r3, lr}
   d64be:	4b02      	ldr	r3, [pc, #8]	; (d64c8 <os_thread_yield+0xc>)
   d64c0:	681b      	ldr	r3, [r3, #0]
   d64c2:	68db      	ldr	r3, [r3, #12]
   d64c4:	9301      	str	r3, [sp, #4]
   d64c6:	bd08      	pop	{r3, pc}
   d64c8:	00030248 	.word	0x00030248

000d64cc <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d64cc:	b508      	push	{r3, lr}
   d64ce:	4b02      	ldr	r3, [pc, #8]	; (d64d8 <os_thread_join+0xc>)
   d64d0:	681b      	ldr	r3, [r3, #0]
   d64d2:	691b      	ldr	r3, [r3, #16]
   d64d4:	9301      	str	r3, [sp, #4]
   d64d6:	bd08      	pop	{r3, pc}
   d64d8:	00030248 	.word	0x00030248

000d64dc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d64dc:	b508      	push	{r3, lr}
   d64de:	4b02      	ldr	r3, [pc, #8]	; (d64e8 <os_thread_cleanup+0xc>)
   d64e0:	681b      	ldr	r3, [r3, #0]
   d64e2:	695b      	ldr	r3, [r3, #20]
   d64e4:	9301      	str	r3, [sp, #4]
   d64e6:	bd08      	pop	{r3, pc}
   d64e8:	00030248 	.word	0x00030248

000d64ec <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d64ec:	b508      	push	{r3, lr}
   d64ee:	4b02      	ldr	r3, [pc, #8]	; (d64f8 <os_mutex_create+0xc>)
   d64f0:	681b      	ldr	r3, [r3, #0]
   d64f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d64f4:	9301      	str	r3, [sp, #4]
   d64f6:	bd08      	pop	{r3, pc}
   d64f8:	00030248 	.word	0x00030248

000d64fc <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d64fc:	b508      	push	{r3, lr}
   d64fe:	4b02      	ldr	r3, [pc, #8]	; (d6508 <os_mutex_lock+0xc>)
   d6500:	681b      	ldr	r3, [r3, #0]
   d6502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6504:	9301      	str	r3, [sp, #4]
   d6506:	bd08      	pop	{r3, pc}
   d6508:	00030248 	.word	0x00030248

000d650c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d650c:	b508      	push	{r3, lr}
   d650e:	4b02      	ldr	r3, [pc, #8]	; (d6518 <os_mutex_unlock+0xc>)
   d6510:	681b      	ldr	r3, [r3, #0]
   d6512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6514:	9301      	str	r3, [sp, #4]
   d6516:	bd08      	pop	{r3, pc}
   d6518:	00030248 	.word	0x00030248

000d651c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d651c:	b508      	push	{r3, lr}
   d651e:	4b02      	ldr	r3, [pc, #8]	; (d6528 <os_mutex_recursive_create+0xc>)
   d6520:	681b      	ldr	r3, [r3, #0]
   d6522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6524:	9301      	str	r3, [sp, #4]
   d6526:	bd08      	pop	{r3, pc}
   d6528:	00030248 	.word	0x00030248

000d652c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d652c:	b508      	push	{r3, lr}
   d652e:	4b02      	ldr	r3, [pc, #8]	; (d6538 <HAL_RNG_GetRandomNumber+0xc>)
   d6530:	681b      	ldr	r3, [r3, #0]
   d6532:	685b      	ldr	r3, [r3, #4]
   d6534:	9301      	str	r3, [sp, #4]
   d6536:	bd08      	pop	{r3, pc}
   d6538:	00030218 	.word	0x00030218

000d653c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d653c:	b508      	push	{r3, lr}
   d653e:	4b02      	ldr	r3, [pc, #8]	; (d6548 <HAL_Delay_Microseconds+0xc>)
   d6540:	681b      	ldr	r3, [r3, #0]
   d6542:	68db      	ldr	r3, [r3, #12]
   d6544:	9301      	str	r3, [sp, #4]
   d6546:	bd08      	pop	{r3, pc}
   d6548:	00030218 	.word	0x00030218

000d654c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d654c:	b508      	push	{r3, lr}
   d654e:	4b02      	ldr	r3, [pc, #8]	; (d6558 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d6550:	681b      	ldr	r3, [r3, #0]
   d6552:	691b      	ldr	r3, [r3, #16]
   d6554:	9301      	str	r3, [sp, #4]
   d6556:	bd08      	pop	{r3, pc}
   d6558:	00030218 	.word	0x00030218

000d655c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d655c:	b508      	push	{r3, lr}
   d655e:	4b02      	ldr	r3, [pc, #8]	; (d6568 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6560:	681b      	ldr	r3, [r3, #0]
   d6562:	695b      	ldr	r3, [r3, #20]
   d6564:	9301      	str	r3, [sp, #4]
   d6566:	bd08      	pop	{r3, pc}
   d6568:	00030218 	.word	0x00030218

000d656c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d656c:	b508      	push	{r3, lr}
   d656e:	4b02      	ldr	r3, [pc, #8]	; (d6578 <HAL_RTC_Get_UnixTime+0xc>)
   d6570:	681b      	ldr	r3, [r3, #0]
   d6572:	69db      	ldr	r3, [r3, #28]
   d6574:	9301      	str	r3, [sp, #4]
   d6576:	bd08      	pop	{r3, pc}
   d6578:	00030218 	.word	0x00030218

000d657c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d657c:	b508      	push	{r3, lr}
   d657e:	4b02      	ldr	r3, [pc, #8]	; (d6588 <HAL_RTC_Time_Is_Valid+0xc>)
   d6580:	681b      	ldr	r3, [r3, #0]
   d6582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6584:	9301      	str	r3, [sp, #4]
   d6586:	bd08      	pop	{r3, pc}
   d6588:	00030218 	.word	0x00030218

000d658c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d658c:	b508      	push	{r3, lr}
   d658e:	4b02      	ldr	r3, [pc, #8]	; (d6598 <HAL_Pin_Map+0xc>)
   d6590:	681b      	ldr	r3, [r3, #0]
   d6592:	681b      	ldr	r3, [r3, #0]
   d6594:	9301      	str	r3, [sp, #4]
   d6596:	bd08      	pop	{r3, pc}
   d6598:	0003022c 	.word	0x0003022c

000d659c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d659c:	b508      	push	{r3, lr}
   d659e:	4b02      	ldr	r3, [pc, #8]	; (d65a8 <HAL_Pin_Mode+0xc>)
   d65a0:	681b      	ldr	r3, [r3, #0]
   d65a2:	689b      	ldr	r3, [r3, #8]
   d65a4:	9301      	str	r3, [sp, #4]
   d65a6:	bd08      	pop	{r3, pc}
   d65a8:	0003022c 	.word	0x0003022c

000d65ac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d65ac:	b508      	push	{r3, lr}
   d65ae:	4b02      	ldr	r3, [pc, #8]	; (d65b8 <HAL_Get_Pin_Mode+0xc>)
   d65b0:	681b      	ldr	r3, [r3, #0]
   d65b2:	68db      	ldr	r3, [r3, #12]
   d65b4:	9301      	str	r3, [sp, #4]
   d65b6:	bd08      	pop	{r3, pc}
   d65b8:	0003022c 	.word	0x0003022c

000d65bc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d65bc:	b508      	push	{r3, lr}
   d65be:	4b02      	ldr	r3, [pc, #8]	; (d65c8 <HAL_GPIO_Write+0xc>)
   d65c0:	681b      	ldr	r3, [r3, #0]
   d65c2:	691b      	ldr	r3, [r3, #16]
   d65c4:	9301      	str	r3, [sp, #4]
   d65c6:	bd08      	pop	{r3, pc}
   d65c8:	0003022c 	.word	0x0003022c

000d65cc <HAL_Interrupts_Enable_All>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d65cc:	b508      	push	{r3, lr}
   d65ce:	4b02      	ldr	r3, [pc, #8]	; (d65d8 <HAL_Interrupts_Enable_All+0xc>)
   d65d0:	681b      	ldr	r3, [r3, #0]
   d65d2:	6a1b      	ldr	r3, [r3, #32]
   d65d4:	9301      	str	r3, [sp, #4]
   d65d6:	bd08      	pop	{r3, pc}
   d65d8:	0003022c 	.word	0x0003022c

000d65dc <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d65dc:	b508      	push	{r3, lr}
   d65de:	4b02      	ldr	r3, [pc, #8]	; (d65e8 <HAL_Interrupts_Disable_All+0xc>)
   d65e0:	681b      	ldr	r3, [r3, #0]
   d65e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d65e4:	9301      	str	r3, [sp, #4]
   d65e6:	bd08      	pop	{r3, pc}
   d65e8:	0003022c 	.word	0x0003022c

000d65ec <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d65ec:	b508      	push	{r3, lr}
   d65ee:	4b02      	ldr	r3, [pc, #8]	; (d65f8 <HAL_I2C_Begin+0xc>)
   d65f0:	681b      	ldr	r3, [r3, #0]
   d65f2:	68db      	ldr	r3, [r3, #12]
   d65f4:	9301      	str	r3, [sp, #4]
   d65f6:	bd08      	pop	{r3, pc}
   d65f8:	00030228 	.word	0x00030228

000d65fc <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d65fc:	b508      	push	{r3, lr}
   d65fe:	4b02      	ldr	r3, [pc, #8]	; (d6608 <HAL_I2C_Request_Data+0xc>)
   d6600:	681b      	ldr	r3, [r3, #0]
   d6602:	695b      	ldr	r3, [r3, #20]
   d6604:	9301      	str	r3, [sp, #4]
   d6606:	bd08      	pop	{r3, pc}
   d6608:	00030228 	.word	0x00030228

000d660c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d660c:	b508      	push	{r3, lr}
   d660e:	4b02      	ldr	r3, [pc, #8]	; (d6618 <HAL_I2C_Begin_Transmission+0xc>)
   d6610:	681b      	ldr	r3, [r3, #0]
   d6612:	699b      	ldr	r3, [r3, #24]
   d6614:	9301      	str	r3, [sp, #4]
   d6616:	bd08      	pop	{r3, pc}
   d6618:	00030228 	.word	0x00030228

000d661c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d661c:	b508      	push	{r3, lr}
   d661e:	4b02      	ldr	r3, [pc, #8]	; (d6628 <HAL_I2C_End_Transmission+0xc>)
   d6620:	681b      	ldr	r3, [r3, #0]
   d6622:	69db      	ldr	r3, [r3, #28]
   d6624:	9301      	str	r3, [sp, #4]
   d6626:	bd08      	pop	{r3, pc}
   d6628:	00030228 	.word	0x00030228

000d662c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d662c:	b508      	push	{r3, lr}
   d662e:	4b02      	ldr	r3, [pc, #8]	; (d6638 <HAL_I2C_Write_Data+0xc>)
   d6630:	681b      	ldr	r3, [r3, #0]
   d6632:	6a1b      	ldr	r3, [r3, #32]
   d6634:	9301      	str	r3, [sp, #4]
   d6636:	bd08      	pop	{r3, pc}
   d6638:	00030228 	.word	0x00030228

000d663c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d663c:	b508      	push	{r3, lr}
   d663e:	4b02      	ldr	r3, [pc, #8]	; (d6648 <HAL_I2C_Available_Data+0xc>)
   d6640:	681b      	ldr	r3, [r3, #0]
   d6642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6644:	9301      	str	r3, [sp, #4]
   d6646:	bd08      	pop	{r3, pc}
   d6648:	00030228 	.word	0x00030228

000d664c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d664c:	b508      	push	{r3, lr}
   d664e:	4b02      	ldr	r3, [pc, #8]	; (d6658 <HAL_I2C_Read_Data+0xc>)
   d6650:	681b      	ldr	r3, [r3, #0]
   d6652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6654:	9301      	str	r3, [sp, #4]
   d6656:	bd08      	pop	{r3, pc}
   d6658:	00030228 	.word	0x00030228

000d665c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d665c:	b508      	push	{r3, lr}
   d665e:	4b02      	ldr	r3, [pc, #8]	; (d6668 <HAL_I2C_Peek_Data+0xc>)
   d6660:	681b      	ldr	r3, [r3, #0]
   d6662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6664:	9301      	str	r3, [sp, #4]
   d6666:	bd08      	pop	{r3, pc}
   d6668:	00030228 	.word	0x00030228

000d666c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d666c:	b508      	push	{r3, lr}
   d666e:	4b02      	ldr	r3, [pc, #8]	; (d6678 <HAL_I2C_Flush_Data+0xc>)
   d6670:	681b      	ldr	r3, [r3, #0]
   d6672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6674:	9301      	str	r3, [sp, #4]
   d6676:	bd08      	pop	{r3, pc}
   d6678:	00030228 	.word	0x00030228

000d667c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d667c:	b508      	push	{r3, lr}
   d667e:	4b02      	ldr	r3, [pc, #8]	; (d6688 <HAL_I2C_Is_Enabled+0xc>)
   d6680:	681b      	ldr	r3, [r3, #0]
   d6682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6684:	9301      	str	r3, [sp, #4]
   d6686:	bd08      	pop	{r3, pc}
   d6688:	00030228 	.word	0x00030228

000d668c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d668c:	b508      	push	{r3, lr}
   d668e:	4b02      	ldr	r3, [pc, #8]	; (d6698 <HAL_I2C_Init+0xc>)
   d6690:	681b      	ldr	r3, [r3, #0]
   d6692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6694:	9301      	str	r3, [sp, #4]
   d6696:	bd08      	pop	{r3, pc}
   d6698:	00030228 	.word	0x00030228

000d669c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d669c:	b508      	push	{r3, lr}
   d669e:	4b02      	ldr	r3, [pc, #8]	; (d66a8 <inet_inet_ntop+0xc>)
   d66a0:	681b      	ldr	r3, [r3, #0]
   d66a2:	695b      	ldr	r3, [r3, #20]
   d66a4:	9301      	str	r3, [sp, #4]
   d66a6:	bd08      	pop	{r3, pc}
   d66a8:	00030264 	.word	0x00030264

000d66ac <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d66ac:	b508      	push	{r3, lr}
   d66ae:	4b02      	ldr	r3, [pc, #8]	; (d66b8 <netdb_freeaddrinfo+0xc>)
   d66b0:	681b      	ldr	r3, [r3, #0]
   d66b2:	689b      	ldr	r3, [r3, #8]
   d66b4:	9301      	str	r3, [sp, #4]
   d66b6:	bd08      	pop	{r3, pc}
   d66b8:	00030268 	.word	0x00030268

000d66bc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d66bc:	b508      	push	{r3, lr}
   d66be:	4b02      	ldr	r3, [pc, #8]	; (d66c8 <netdb_getaddrinfo+0xc>)
   d66c0:	681b      	ldr	r3, [r3, #0]
   d66c2:	68db      	ldr	r3, [r3, #12]
   d66c4:	9301      	str	r3, [sp, #4]
   d66c6:	bd08      	pop	{r3, pc}
   d66c8:	00030268 	.word	0x00030268

000d66cc <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d66cc:	b508      	push	{r3, lr}
   d66ce:	4b02      	ldr	r3, [pc, #8]	; (d66d8 <HAL_SPI_Begin+0xc>)
   d66d0:	681b      	ldr	r3, [r3, #0]
   d66d2:	681b      	ldr	r3, [r3, #0]
   d66d4:	9301      	str	r3, [sp, #4]
   d66d6:	bd08      	pop	{r3, pc}
   d66d8:	00030230 	.word	0x00030230

000d66dc <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d66dc:	b508      	push	{r3, lr}
   d66de:	4b02      	ldr	r3, [pc, #8]	; (d66e8 <HAL_SPI_Send_Receive_Data+0xc>)
   d66e0:	681b      	ldr	r3, [r3, #0]
   d66e2:	695b      	ldr	r3, [r3, #20]
   d66e4:	9301      	str	r3, [sp, #4]
   d66e6:	bd08      	pop	{r3, pc}
   d66e8:	00030230 	.word	0x00030230

000d66ec <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d66ec:	b508      	push	{r3, lr}
   d66ee:	4b02      	ldr	r3, [pc, #8]	; (d66f8 <HAL_SPI_Init+0xc>)
   d66f0:	681b      	ldr	r3, [r3, #0]
   d66f2:	69db      	ldr	r3, [r3, #28]
   d66f4:	9301      	str	r3, [sp, #4]
   d66f6:	bd08      	pop	{r3, pc}
   d66f8:	00030230 	.word	0x00030230

000d66fc <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d66fc:	b508      	push	{r3, lr}
   d66fe:	4b02      	ldr	r3, [pc, #8]	; (d6708 <HAL_SPI_Is_Enabled+0xc>)
   d6700:	681b      	ldr	r3, [r3, #0]
   d6702:	6a1b      	ldr	r3, [r3, #32]
   d6704:	9301      	str	r3, [sp, #4]
   d6706:	bd08      	pop	{r3, pc}
   d6708:	00030230 	.word	0x00030230

000d670c <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d670c:	b508      	push	{r3, lr}
   d670e:	4b02      	ldr	r3, [pc, #8]	; (d6718 <HAL_SPI_Info+0xc>)
   d6710:	681b      	ldr	r3, [r3, #0]
   d6712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6714:	9301      	str	r3, [sp, #4]
   d6716:	bd08      	pop	{r3, pc}
   d6718:	00030230 	.word	0x00030230

000d671c <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d671c:	b508      	push	{r3, lr}
   d671e:	4b02      	ldr	r3, [pc, #8]	; (d6728 <HAL_SPI_DMA_Transfer+0xc>)
   d6720:	681b      	ldr	r3, [r3, #0]
   d6722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6724:	9301      	str	r3, [sp, #4]
   d6726:	bd08      	pop	{r3, pc}
   d6728:	00030230 	.word	0x00030230

000d672c <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d672c:	b508      	push	{r3, lr}
   d672e:	4b02      	ldr	r3, [pc, #8]	; (d6738 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d6730:	681b      	ldr	r3, [r3, #0]
   d6732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6734:	9301      	str	r3, [sp, #4]
   d6736:	bd08      	pop	{r3, pc}
   d6738:	00030230 	.word	0x00030230

000d673c <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d673c:	b508      	push	{r3, lr}
   d673e:	4b02      	ldr	r3, [pc, #8]	; (d6748 <HAL_SPI_Set_Settings+0xc>)
   d6740:	681b      	ldr	r3, [r3, #0]
   d6742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6744:	9301      	str	r3, [sp, #4]
   d6746:	bd08      	pop	{r3, pc}
   d6748:	00030230 	.word	0x00030230

000d674c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d674c:	b508      	push	{r3, lr}
   d674e:	4b02      	ldr	r3, [pc, #8]	; (d6758 <HAL_USART_Init+0xc>)
   d6750:	681b      	ldr	r3, [r3, #0]
   d6752:	681b      	ldr	r3, [r3, #0]
   d6754:	9301      	str	r3, [sp, #4]
   d6756:	bd08      	pop	{r3, pc}
   d6758:	0003023c 	.word	0x0003023c

000d675c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d675c:	b508      	push	{r3, lr}
   d675e:	4b02      	ldr	r3, [pc, #8]	; (d6768 <HAL_USART_Write_Data+0xc>)
   d6760:	681b      	ldr	r3, [r3, #0]
   d6762:	68db      	ldr	r3, [r3, #12]
   d6764:	9301      	str	r3, [sp, #4]
   d6766:	bd08      	pop	{r3, pc}
   d6768:	0003023c 	.word	0x0003023c

000d676c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d676c:	b508      	push	{r3, lr}
   d676e:	4b02      	ldr	r3, [pc, #8]	; (d6778 <HAL_USART_Available_Data+0xc>)
   d6770:	681b      	ldr	r3, [r3, #0]
   d6772:	691b      	ldr	r3, [r3, #16]
   d6774:	9301      	str	r3, [sp, #4]
   d6776:	bd08      	pop	{r3, pc}
   d6778:	0003023c 	.word	0x0003023c

000d677c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d677c:	b508      	push	{r3, lr}
   d677e:	4b02      	ldr	r3, [pc, #8]	; (d6788 <HAL_USART_Read_Data+0xc>)
   d6780:	681b      	ldr	r3, [r3, #0]
   d6782:	695b      	ldr	r3, [r3, #20]
   d6784:	9301      	str	r3, [sp, #4]
   d6786:	bd08      	pop	{r3, pc}
   d6788:	0003023c 	.word	0x0003023c

000d678c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d678c:	b508      	push	{r3, lr}
   d678e:	4b02      	ldr	r3, [pc, #8]	; (d6798 <HAL_USART_Peek_Data+0xc>)
   d6790:	681b      	ldr	r3, [r3, #0]
   d6792:	699b      	ldr	r3, [r3, #24]
   d6794:	9301      	str	r3, [sp, #4]
   d6796:	bd08      	pop	{r3, pc}
   d6798:	0003023c 	.word	0x0003023c

000d679c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d679c:	b508      	push	{r3, lr}
   d679e:	4b02      	ldr	r3, [pc, #8]	; (d67a8 <HAL_USART_Flush_Data+0xc>)
   d67a0:	681b      	ldr	r3, [r3, #0]
   d67a2:	69db      	ldr	r3, [r3, #28]
   d67a4:	9301      	str	r3, [sp, #4]
   d67a6:	bd08      	pop	{r3, pc}
   d67a8:	0003023c 	.word	0x0003023c

000d67ac <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d67ac:	b508      	push	{r3, lr}
   d67ae:	4b02      	ldr	r3, [pc, #8]	; (d67b8 <HAL_USART_Is_Enabled+0xc>)
   d67b0:	681b      	ldr	r3, [r3, #0]
   d67b2:	6a1b      	ldr	r3, [r3, #32]
   d67b4:	9301      	str	r3, [sp, #4]
   d67b6:	bd08      	pop	{r3, pc}
   d67b8:	0003023c 	.word	0x0003023c

000d67bc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d67bc:	b508      	push	{r3, lr}
   d67be:	4b02      	ldr	r3, [pc, #8]	; (d67c8 <HAL_USART_Available_Data_For_Write+0xc>)
   d67c0:	681b      	ldr	r3, [r3, #0]
   d67c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d67c4:	9301      	str	r3, [sp, #4]
   d67c6:	bd08      	pop	{r3, pc}
   d67c8:	0003023c 	.word	0x0003023c

000d67cc <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d67cc:	b508      	push	{r3, lr}
   d67ce:	4b02      	ldr	r3, [pc, #8]	; (d67d8 <HAL_USART_BeginConfig+0xc>)
   d67d0:	681b      	ldr	r3, [r3, #0]
   d67d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d67d4:	9301      	str	r3, [sp, #4]
   d67d6:	bd08      	pop	{r3, pc}
   d67d8:	0003023c 	.word	0x0003023c

000d67dc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d67dc:	b508      	push	{r3, lr}
   d67de:	4b02      	ldr	r3, [pc, #8]	; (d67e8 <HAL_USB_USART_Init+0xc>)
   d67e0:	681b      	ldr	r3, [r3, #0]
   d67e2:	681b      	ldr	r3, [r3, #0]
   d67e4:	9301      	str	r3, [sp, #4]
   d67e6:	bd08      	pop	{r3, pc}
   d67e8:	0003024c 	.word	0x0003024c

000d67ec <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d67ec:	b508      	push	{r3, lr}
   d67ee:	4b02      	ldr	r3, [pc, #8]	; (d67f8 <HAL_USB_USART_Begin+0xc>)
   d67f0:	681b      	ldr	r3, [r3, #0]
   d67f2:	685b      	ldr	r3, [r3, #4]
   d67f4:	9301      	str	r3, [sp, #4]
   d67f6:	bd08      	pop	{r3, pc}
   d67f8:	0003024c 	.word	0x0003024c

000d67fc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d67fc:	b508      	push	{r3, lr}
   d67fe:	4b02      	ldr	r3, [pc, #8]	; (d6808 <HAL_USB_USART_Available_Data+0xc>)
   d6800:	681b      	ldr	r3, [r3, #0]
   d6802:	691b      	ldr	r3, [r3, #16]
   d6804:	9301      	str	r3, [sp, #4]
   d6806:	bd08      	pop	{r3, pc}
   d6808:	0003024c 	.word	0x0003024c

000d680c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d680c:	b508      	push	{r3, lr}
   d680e:	4b02      	ldr	r3, [pc, #8]	; (d6818 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6810:	681b      	ldr	r3, [r3, #0]
   d6812:	695b      	ldr	r3, [r3, #20]
   d6814:	9301      	str	r3, [sp, #4]
   d6816:	bd08      	pop	{r3, pc}
   d6818:	0003024c 	.word	0x0003024c

000d681c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d681c:	b508      	push	{r3, lr}
   d681e:	4b02      	ldr	r3, [pc, #8]	; (d6828 <HAL_USB_USART_Receive_Data+0xc>)
   d6820:	681b      	ldr	r3, [r3, #0]
   d6822:	699b      	ldr	r3, [r3, #24]
   d6824:	9301      	str	r3, [sp, #4]
   d6826:	bd08      	pop	{r3, pc}
   d6828:	0003024c 	.word	0x0003024c

000d682c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d682c:	b508      	push	{r3, lr}
   d682e:	4b02      	ldr	r3, [pc, #8]	; (d6838 <HAL_USB_USART_Send_Data+0xc>)
   d6830:	681b      	ldr	r3, [r3, #0]
   d6832:	69db      	ldr	r3, [r3, #28]
   d6834:	9301      	str	r3, [sp, #4]
   d6836:	bd08      	pop	{r3, pc}
   d6838:	0003024c 	.word	0x0003024c

000d683c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d683c:	b508      	push	{r3, lr}
   d683e:	4b02      	ldr	r3, [pc, #8]	; (d6848 <HAL_USB_USART_Flush_Data+0xc>)
   d6840:	681b      	ldr	r3, [r3, #0]
   d6842:	6a1b      	ldr	r3, [r3, #32]
   d6844:	9301      	str	r3, [sp, #4]
   d6846:	bd08      	pop	{r3, pc}
   d6848:	0003024c 	.word	0x0003024c

000d684c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d684c:	b508      	push	{r3, lr}
   d684e:	4b02      	ldr	r3, [pc, #8]	; (d6858 <panic_+0xc>)
   d6850:	681b      	ldr	r3, [r3, #0]
   d6852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6854:	9301      	str	r3, [sp, #4]
   d6856:	bd08      	pop	{r3, pc}
   d6858:	00030260 	.word	0x00030260

000d685c <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d685c:	b508      	push	{r3, lr}
   d685e:	4b02      	ldr	r3, [pc, #8]	; (d6868 <system_mode+0xc>)
   d6860:	681b      	ldr	r3, [r3, #0]
   d6862:	681b      	ldr	r3, [r3, #0]
   d6864:	9301      	str	r3, [sp, #4]
   d6866:	bd08      	pop	{r3, pc}
   d6868:	00030220 	.word	0x00030220

000d686c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d686c:	b508      	push	{r3, lr}
   d686e:	4b02      	ldr	r3, [pc, #8]	; (d6878 <set_system_mode+0xc>)
   d6870:	681b      	ldr	r3, [r3, #0]
   d6872:	685b      	ldr	r3, [r3, #4]
   d6874:	9301      	str	r3, [sp, #4]
   d6876:	bd08      	pop	{r3, pc}
   d6878:	00030220 	.word	0x00030220

000d687c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d687c:	b508      	push	{r3, lr}
   d687e:	4b02      	ldr	r3, [pc, #8]	; (d6888 <system_delay_ms+0xc>)
   d6880:	681b      	ldr	r3, [r3, #0]
   d6882:	695b      	ldr	r3, [r3, #20]
   d6884:	9301      	str	r3, [sp, #4]
   d6886:	bd08      	pop	{r3, pc}
   d6888:	00030220 	.word	0x00030220

000d688c <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d688c:	b508      	push	{r3, lr}
   d688e:	4b02      	ldr	r3, [pc, #8]	; (d6898 <system_thread_get_state+0xc>)
   d6890:	681b      	ldr	r3, [r3, #0]
   d6892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6894:	9301      	str	r3, [sp, #4]
   d6896:	bd08      	pop	{r3, pc}
   d6898:	00030220 	.word	0x00030220

000d689c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d689c:	b508      	push	{r3, lr}
   d689e:	4b03      	ldr	r3, [pc, #12]	; (d68ac <system_ctrl_set_app_request_handler+0x10>)
   d68a0:	681b      	ldr	r3, [r3, #0]
   d68a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d68a6:	9301      	str	r3, [sp, #4]
   d68a8:	bd08      	pop	{r3, pc}
   d68aa:	0000      	.short	0x0000
   d68ac:	00030220 	.word	0x00030220

000d68b0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d68b0:	b508      	push	{r3, lr}
   d68b2:	4b03      	ldr	r3, [pc, #12]	; (d68c0 <system_ctrl_set_result+0x10>)
   d68b4:	681b      	ldr	r3, [r3, #0]
   d68b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d68ba:	9301      	str	r3, [sp, #4]
   d68bc:	bd08      	pop	{r3, pc}
   d68be:	0000      	.short	0x0000
   d68c0:	00030220 	.word	0x00030220

000d68c4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d68c4:	b508      	push	{r3, lr}
   d68c6:	4b02      	ldr	r3, [pc, #8]	; (d68d0 <spark_process+0xc>)
   d68c8:	681b      	ldr	r3, [r3, #0]
   d68ca:	689b      	ldr	r3, [r3, #8]
   d68cc:	9301      	str	r3, [sp, #4]
   d68ce:	bd08      	pop	{r3, pc}
   d68d0:	00030244 	.word	0x00030244

000d68d4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d68d4:	b508      	push	{r3, lr}
   d68d6:	4b02      	ldr	r3, [pc, #8]	; (d68e0 <spark_cloud_flag_connected+0xc>)
   d68d8:	681b      	ldr	r3, [r3, #0]
   d68da:	695b      	ldr	r3, [r3, #20]
   d68dc:	9301      	str	r3, [sp, #4]
   d68de:	bd08      	pop	{r3, pc}
   d68e0:	00030244 	.word	0x00030244

000d68e4 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d68e4:	b508      	push	{r3, lr}
   d68e6:	4b02      	ldr	r3, [pc, #8]	; (d68f0 <spark_sync_time_pending+0xc>)
   d68e8:	681b      	ldr	r3, [r3, #0]
   d68ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d68ec:	9301      	str	r3, [sp, #4]
   d68ee:	bd08      	pop	{r3, pc}
   d68f0:	00030244 	.word	0x00030244

000d68f4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d68f4:	b508      	push	{r3, lr}
   d68f6:	4b02      	ldr	r3, [pc, #8]	; (d6900 <spark_set_random_seed_from_cloud_handler+0xc>)
   d68f8:	681b      	ldr	r3, [r3, #0]
   d68fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d68fc:	9301      	str	r3, [sp, #4]
   d68fe:	bd08      	pop	{r3, pc}
   d6900:	00030244 	.word	0x00030244

000d6904 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6904:	b508      	push	{r3, lr}
   d6906:	4b02      	ldr	r3, [pc, #8]	; (d6910 <network_connect+0xc>)
   d6908:	681b      	ldr	r3, [r3, #0]
   d690a:	685b      	ldr	r3, [r3, #4]
   d690c:	9301      	str	r3, [sp, #4]
   d690e:	bd08      	pop	{r3, pc}
   d6910:	00030240 	.word	0x00030240

000d6914 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6914:	b508      	push	{r3, lr}
   d6916:	4b02      	ldr	r3, [pc, #8]	; (d6920 <network_connecting+0xc>)
   d6918:	681b      	ldr	r3, [r3, #0]
   d691a:	689b      	ldr	r3, [r3, #8]
   d691c:	9301      	str	r3, [sp, #4]
   d691e:	bd08      	pop	{r3, pc}
   d6920:	00030240 	.word	0x00030240

000d6924 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6924:	b508      	push	{r3, lr}
   d6926:	4b02      	ldr	r3, [pc, #8]	; (d6930 <network_disconnect+0xc>)
   d6928:	681b      	ldr	r3, [r3, #0]
   d692a:	68db      	ldr	r3, [r3, #12]
   d692c:	9301      	str	r3, [sp, #4]
   d692e:	bd08      	pop	{r3, pc}
   d6930:	00030240 	.word	0x00030240

000d6934 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6934:	b508      	push	{r3, lr}
   d6936:	4b02      	ldr	r3, [pc, #8]	; (d6940 <network_ready+0xc>)
   d6938:	681b      	ldr	r3, [r3, #0]
   d693a:	691b      	ldr	r3, [r3, #16]
   d693c:	9301      	str	r3, [sp, #4]
   d693e:	bd08      	pop	{r3, pc}
   d6940:	00030240 	.word	0x00030240

000d6944 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6944:	b508      	push	{r3, lr}
   d6946:	4b02      	ldr	r3, [pc, #8]	; (d6950 <network_on+0xc>)
   d6948:	681b      	ldr	r3, [r3, #0]
   d694a:	695b      	ldr	r3, [r3, #20]
   d694c:	9301      	str	r3, [sp, #4]
   d694e:	bd08      	pop	{r3, pc}
   d6950:	00030240 	.word	0x00030240

000d6954 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6954:	b508      	push	{r3, lr}
   d6956:	4b02      	ldr	r3, [pc, #8]	; (d6960 <network_off+0xc>)
   d6958:	681b      	ldr	r3, [r3, #0]
   d695a:	699b      	ldr	r3, [r3, #24]
   d695c:	9301      	str	r3, [sp, #4]
   d695e:	bd08      	pop	{r3, pc}
   d6960:	00030240 	.word	0x00030240

000d6964 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6964:	b508      	push	{r3, lr}
   d6966:	4b02      	ldr	r3, [pc, #8]	; (d6970 <network_listen+0xc>)
   d6968:	681b      	ldr	r3, [r3, #0]
   d696a:	69db      	ldr	r3, [r3, #28]
   d696c:	9301      	str	r3, [sp, #4]
   d696e:	bd08      	pop	{r3, pc}
   d6970:	00030240 	.word	0x00030240

000d6974 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6974:	b508      	push	{r3, lr}
   d6976:	4b02      	ldr	r3, [pc, #8]	; (d6980 <network_listening+0xc>)
   d6978:	681b      	ldr	r3, [r3, #0]
   d697a:	6a1b      	ldr	r3, [r3, #32]
   d697c:	9301      	str	r3, [sp, #4]
   d697e:	bd08      	pop	{r3, pc}
   d6980:	00030240 	.word	0x00030240

000d6984 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6984:	b508      	push	{r3, lr}
   d6986:	4b02      	ldr	r3, [pc, #8]	; (d6990 <network_set_listen_timeout+0xc>)
   d6988:	681b      	ldr	r3, [r3, #0]
   d698a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d698c:	9301      	str	r3, [sp, #4]
   d698e:	bd08      	pop	{r3, pc}
   d6990:	00030240 	.word	0x00030240

000d6994 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6994:	b508      	push	{r3, lr}
   d6996:	4b02      	ldr	r3, [pc, #8]	; (d69a0 <network_get_listen_timeout+0xc>)
   d6998:	681b      	ldr	r3, [r3, #0]
   d699a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d699c:	9301      	str	r3, [sp, #4]
   d699e:	bd08      	pop	{r3, pc}
   d69a0:	00030240 	.word	0x00030240

000d69a4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d69a4:	b508      	push	{r3, lr}
   d69a6:	4b02      	ldr	r3, [pc, #8]	; (d69b0 <malloc+0xc>)
   d69a8:	681b      	ldr	r3, [r3, #0]
   d69aa:	681b      	ldr	r3, [r3, #0]
   d69ac:	9301      	str	r3, [sp, #4]
   d69ae:	bd08      	pop	{r3, pc}
   d69b0:	0003021c 	.word	0x0003021c

000d69b4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d69b4:	b508      	push	{r3, lr}
   d69b6:	4b02      	ldr	r3, [pc, #8]	; (d69c0 <free+0xc>)
   d69b8:	681b      	ldr	r3, [r3, #0]
   d69ba:	685b      	ldr	r3, [r3, #4]
   d69bc:	9301      	str	r3, [sp, #4]
   d69be:	bd08      	pop	{r3, pc}
   d69c0:	0003021c 	.word	0x0003021c

000d69c4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d69c4:	b508      	push	{r3, lr}
   d69c6:	4b02      	ldr	r3, [pc, #8]	; (d69d0 <vsnprintf+0xc>)
   d69c8:	681b      	ldr	r3, [r3, #0]
   d69ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d69cc:	9301      	str	r3, [sp, #4]
   d69ce:	bd08      	pop	{r3, pc}
   d69d0:	0003021c 	.word	0x0003021c

000d69d4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d69d4:	2100      	movs	r1, #0
   d69d6:	f7ff bf51 	b.w	d687c <system_delay_ms>

000d69da <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d69da:	2200      	movs	r2, #0
   d69dc:	4611      	mov	r1, r2
   d69de:	6840      	ldr	r0, [r0, #4]
   d69e0:	f7ff bfa8 	b.w	d6934 <network_ready>

000d69e4 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d69e4:	2200      	movs	r2, #0
   d69e6:	4611      	mov	r1, r2
   d69e8:	6840      	ldr	r0, [r0, #4]
   d69ea:	f7ff bfc3 	b.w	d6974 <network_listening>

000d69ee <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d69ee:	2200      	movs	r2, #0
   d69f0:	4611      	mov	r1, r2
   d69f2:	6840      	ldr	r0, [r0, #4]
   d69f4:	f7ff bfce 	b.w	d6994 <network_get_listen_timeout>

000d69f8 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d69f8:	2200      	movs	r2, #0
   d69fa:	6840      	ldr	r0, [r0, #4]
   d69fc:	f7ff bfc2 	b.w	d6984 <network_set_listen_timeout>

000d6a00 <_ZN5spark13CellularClass6listenEb>:
    void clearCredentials() {
        cellular_credentials_clear(nullptr);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6a00:	2200      	movs	r2, #0
   d6a02:	f081 0101 	eor.w	r1, r1, #1
   d6a06:	6840      	ldr	r0, [r0, #4]
   d6a08:	f7ff bfac 	b.w	d6964 <network_listen>

000d6a0c <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d6a0c:	2300      	movs	r3, #0
   d6a0e:	461a      	mov	r2, r3
   d6a10:	4619      	mov	r1, r3
   d6a12:	6840      	ldr	r0, [r0, #4]
   d6a14:	f7ff bf9e 	b.w	d6954 <network_off>

000d6a18 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d6a18:	2300      	movs	r3, #0
   d6a1a:	461a      	mov	r2, r3
   d6a1c:	4619      	mov	r1, r3
   d6a1e:	6840      	ldr	r0, [r0, #4]
   d6a20:	f7ff bf90 	b.w	d6944 <network_on>

000d6a24 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6a24:	2200      	movs	r2, #0
   d6a26:	4611      	mov	r1, r2
   d6a28:	6840      	ldr	r0, [r0, #4]
   d6a2a:	f7ff bf73 	b.w	d6914 <network_connecting>

000d6a2e <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6a2e:	2200      	movs	r2, #0
   d6a30:	2102      	movs	r1, #2
   d6a32:	6840      	ldr	r0, [r0, #4]
   d6a34:	f7ff bf76 	b.w	d6924 <network_disconnect>

000d6a38 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6a38:	2300      	movs	r3, #0
   d6a3a:	461a      	mov	r2, r3
   d6a3c:	6840      	ldr	r0, [r0, #4]
   d6a3e:	f7ff bf61 	b.w	d6904 <network_connect>
	...

000d6a44 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d6a44:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d6a46:	4d0c      	ldr	r5, [pc, #48]	; (d6a78 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
   d6a48:	2428      	movs	r4, #40	; 0x28
   d6a4a:	4622      	mov	r2, r4
   d6a4c:	2100      	movs	r1, #0
   d6a4e:	4628      	mov	r0, r5
   d6a50:	f001 fddc 	bl	d860c <memset>
        cid = -1;
   d6a54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d6a58:	606b      	str	r3, [r5, #4]
        size = sizeof(*this);
   d6a5a:	802c      	strh	r4, [r5, #0]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6a5c:	4d07      	ldr	r5, [pc, #28]	; (d6a7c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
   d6a5e:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d6a60:	4628      	mov	r0, r5
   d6a62:	606b      	str	r3, [r5, #4]
   d6a64:	4b06      	ldr	r3, [pc, #24]	; (d6a80 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
   d6a66:	f840 3b08 	str.w	r3, [r0], #8
    char iccid[21];
    char imei[16];

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
   d6a6a:	4622      	mov	r2, r4
   d6a6c:	2100      	movs	r1, #0
   d6a6e:	f001 fdcd 	bl	d860c <memset>
        size = sizeof(*this);
   d6a72:	812c      	strh	r4, [r5, #8]
   d6a74:	bd38      	pop	{r3, r4, r5, pc}
   d6a76:	bf00      	nop
   d6a78:	2003e4b0 	.word	0x2003e4b0
   d6a7c:	2003e480 	.word	0x2003e480
   d6a80:	000d88b0 	.word	0x000d88b0

000d6a84 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6a84:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6a86:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6a88:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6a8a:	b113      	cbz	r3, d6a92 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6a8c:	2203      	movs	r2, #3
   d6a8e:	4601      	mov	r1, r0
   d6a90:	4798      	blx	r3
    }
   d6a92:	4620      	mov	r0, r4
   d6a94:	bd10      	pop	{r4, pc}

000d6a96 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6a96:	2200      	movs	r2, #0
   d6a98:	4611      	mov	r1, r2
   d6a9a:	6840      	ldr	r0, [r0, #4]
   d6a9c:	f7ff bf6a 	b.w	d6974 <network_listening>

000d6aa0 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6aa0:	2200      	movs	r2, #0
   d6aa2:	4611      	mov	r1, r2
   d6aa4:	6840      	ldr	r0, [r0, #4]
   d6aa6:	f7ff bf75 	b.w	d6994 <network_get_listen_timeout>

000d6aaa <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6aaa:	2200      	movs	r2, #0
   d6aac:	6840      	ldr	r0, [r0, #4]
   d6aae:	f7ff bf69 	b.w	d6984 <network_set_listen_timeout>

000d6ab2 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6ab2:	2200      	movs	r2, #0
   d6ab4:	f081 0101 	eor.w	r1, r1, #1
   d6ab8:	6840      	ldr	r0, [r0, #4]
   d6aba:	f7ff bf53 	b.w	d6964 <network_listen>

000d6abe <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6abe:	2300      	movs	r3, #0
   d6ac0:	461a      	mov	r2, r3
   d6ac2:	4619      	mov	r1, r3
   d6ac4:	6840      	ldr	r0, [r0, #4]
   d6ac6:	f7ff bf45 	b.w	d6954 <network_off>

000d6aca <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6aca:	2300      	movs	r3, #0
   d6acc:	461a      	mov	r2, r3
   d6ace:	4619      	mov	r1, r3
   d6ad0:	6840      	ldr	r0, [r0, #4]
   d6ad2:	f7ff bf37 	b.w	d6944 <network_on>

000d6ad6 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6ad6:	2200      	movs	r2, #0
   d6ad8:	4611      	mov	r1, r2
   d6ada:	6840      	ldr	r0, [r0, #4]
   d6adc:	f7ff bf2a 	b.w	d6934 <network_ready>

000d6ae0 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6ae0:	2200      	movs	r2, #0
   d6ae2:	4611      	mov	r1, r2
   d6ae4:	6840      	ldr	r0, [r0, #4]
   d6ae6:	f7ff bf15 	b.w	d6914 <network_connecting>

000d6aea <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6aea:	2200      	movs	r2, #0
   d6aec:	2102      	movs	r1, #2
   d6aee:	6840      	ldr	r0, [r0, #4]
   d6af0:	f7ff bf18 	b.w	d6924 <network_disconnect>

000d6af4 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6af4:	2300      	movs	r3, #0
   d6af6:	461a      	mov	r2, r3
   d6af8:	6840      	ldr	r0, [r0, #4]
   d6afa:	f7ff bf03 	b.w	d6904 <network_connect>
	...

000d6b00 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d6b00:	4b02      	ldr	r3, [pc, #8]	; (d6b0c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6b02:	2203      	movs	r2, #3
   d6b04:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6b06:	4a02      	ldr	r2, [pc, #8]	; (d6b10 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6b08:	601a      	str	r2, [r3, #0]
   d6b0a:	4770      	bx	lr
   d6b0c:	2003e4d8 	.word	0x2003e4d8
   d6b10:	000d88e4 	.word	0x000d88e4

000d6b14 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d6b14:	4770      	bx	lr

000d6b16 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b18:	4606      	mov	r6, r0
   d6b1a:	4615      	mov	r5, r2
   d6b1c:	460c      	mov	r4, r1
   d6b1e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6b20:	42bc      	cmp	r4, r7
   d6b22:	d006      	beq.n	d6b32 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6b24:	6833      	ldr	r3, [r6, #0]
   d6b26:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6b2a:	689b      	ldr	r3, [r3, #8]
   d6b2c:	4630      	mov	r0, r6
   d6b2e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6b30:	e7f6      	b.n	d6b20 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6b32:	4628      	mov	r0, r5
   d6b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6b36 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6b36:	2200      	movs	r2, #0
   d6b38:	7c00      	ldrb	r0, [r0, #16]
   d6b3a:	f7ff bd77 	b.w	d662c <HAL_I2C_Write_Data>

000d6b3e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6b3e:	2100      	movs	r1, #0
   d6b40:	7c00      	ldrb	r0, [r0, #16]
   d6b42:	f7ff bd7b 	b.w	d663c <HAL_I2C_Available_Data>

000d6b46 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6b46:	2100      	movs	r1, #0
   d6b48:	7c00      	ldrb	r0, [r0, #16]
   d6b4a:	f7ff bd7f 	b.w	d664c <HAL_I2C_Read_Data>

000d6b4e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6b4e:	2100      	movs	r1, #0
   d6b50:	7c00      	ldrb	r0, [r0, #16]
   d6b52:	f7ff bd83 	b.w	d665c <HAL_I2C_Peek_Data>

000d6b56 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6b56:	2100      	movs	r1, #0
   d6b58:	7c00      	ldrb	r0, [r0, #16]
   d6b5a:	f7ff bd87 	b.w	d666c <HAL_I2C_Flush_Data>

000d6b5e <_ZN7TwoWireD0Ev>:
   d6b5e:	b510      	push	{r4, lr}
   d6b60:	4604      	mov	r4, r0
   d6b62:	f7fd fa9a 	bl	d409a <_ZdlPv>
   d6b66:	4620      	mov	r0, r4
   d6b68:	bd10      	pop	{r4, pc}
	...

000d6b6c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6b6c:	b510      	push	{r4, lr}
   d6b6e:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6b70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6b74:	4608      	mov	r0, r1
   d6b76:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6b78:	2100      	movs	r1, #0
   d6b7a:	4b04      	ldr	r3, [pc, #16]	; (d6b8c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d6b7c:	7420      	strb	r0, [r4, #16]
   d6b7e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6b80:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d6b82:	f7ff fd83 	bl	d668c <HAL_I2C_Init>

}
   d6b86:	4620      	mov	r0, r4
   d6b88:	bd10      	pop	{r4, pc}
   d6b8a:	bf00      	nop
   d6b8c:	000d8918 	.word	0x000d8918

000d6b90 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6b90:	2300      	movs	r3, #0
   d6b92:	461a      	mov	r2, r3
   d6b94:	4619      	mov	r1, r3
   d6b96:	7c00      	ldrb	r0, [r0, #16]
   d6b98:	f7ff bd28 	b.w	d65ec <HAL_I2C_Begin>

000d6b9c <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d6b9c:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d6b9e:	2400      	movs	r4, #0
   d6ba0:	7c00      	ldrb	r0, [r0, #16]
   d6ba2:	9400      	str	r4, [sp, #0]
   d6ba4:	f7ff fd2a 	bl	d65fc <HAL_I2C_Request_Data>
  return result;
}
   d6ba8:	b2c0      	uxtb	r0, r0
   d6baa:	b002      	add	sp, #8
   d6bac:	bd10      	pop	{r4, pc}

000d6bae <_ZN7TwoWire11requestFromEii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d6bae:	2301      	movs	r3, #1
   d6bb0:	b2d2      	uxtb	r2, r2
   d6bb2:	b2c9      	uxtb	r1, r1
   d6bb4:	f7ff bff2 	b.w	d6b9c <_ZN7TwoWire11requestFromEhhh>

000d6bb8 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d6bb8:	2200      	movs	r2, #0
   d6bba:	7c00      	ldrb	r0, [r0, #16]
   d6bbc:	f7ff bd26 	b.w	d660c <HAL_I2C_Begin_Transmission>

000d6bc0 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d6bc0:	b2c9      	uxtb	r1, r1
   d6bc2:	f7ff bff9 	b.w	d6bb8 <_ZN7TwoWire17beginTransmissionEh>

000d6bc6 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d6bc6:	2200      	movs	r2, #0
   d6bc8:	7c00      	ldrb	r0, [r0, #16]
   d6bca:	f7ff bd27 	b.w	d661c <HAL_I2C_End_Transmission>

000d6bce <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d6bce:	2101      	movs	r1, #1
   d6bd0:	f7ff bff9 	b.w	d6bc6 <_ZN7TwoWire15endTransmissionEh>

000d6bd4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6bd4:	2100      	movs	r1, #0
   d6bd6:	7c00      	ldrb	r0, [r0, #16]
   d6bd8:	f7ff bd50 	b.w	d667c <HAL_I2C_Is_Enabled>

000d6bdc <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d6bdc:	f7ff bcfe 	b.w	d65dc <HAL_Interrupts_Disable_All>

000d6be0 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d6be0:	f7ff bcf4 	b.w	d65cc <HAL_Interrupts_Enable_All>

000d6be4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6be4:	4770      	bx	lr

000d6be6 <_ZN9IPAddressD0Ev>:
   d6be6:	b510      	push	{r4, lr}
   d6be8:	4604      	mov	r4, r0
   d6bea:	f7fd fa56 	bl	d409a <_ZdlPv>
   d6bee:	4620      	mov	r0, r4
   d6bf0:	bd10      	pop	{r4, pc}

000d6bf2 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6bf2:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d6bf4:	7d03      	ldrb	r3, [r0, #20]
   d6bf6:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6bf8:	b08d      	sub	sp, #52	; 0x34
   d6bfa:	460e      	mov	r6, r1
   d6bfc:	f100 0704 	add.w	r7, r0, #4
   d6c00:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d6c04:	d002      	beq.n	d6c0c <_ZNK9IPAddress7printToER5Print+0x1a>
   d6c06:	f100 0508 	add.w	r5, r0, #8
   d6c0a:	e018      	b.n	d6c3e <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6c0c:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6c0e:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6c10:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6c14:	232f      	movs	r3, #47	; 0x2f
   d6c16:	462a      	mov	r2, r5
   d6c18:	200a      	movs	r0, #10
   d6c1a:	f7ff fd3f 	bl	d669c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6c1e:	4628      	mov	r0, r5
   d6c20:	f001 fd24 	bl	d866c <strlen>
   d6c24:	6833      	ldr	r3, [r6, #0]
   d6c26:	4602      	mov	r2, r0
   d6c28:	68db      	ldr	r3, [r3, #12]
   d6c2a:	4629      	mov	r1, r5
   d6c2c:	4630      	mov	r0, r6
   d6c2e:	4798      	blx	r3
   d6c30:	e00f      	b.n	d6c52 <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6c32:	b124      	cbz	r4, d6c3e <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6c34:	212e      	movs	r1, #46	; 0x2e
   d6c36:	4630      	mov	r0, r6
   d6c38:	f000 f982 	bl	d6f40 <_ZN5Print5printEc>
   d6c3c:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d6c3e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6c42:	220a      	movs	r2, #10
   d6c44:	4630      	mov	r0, r6
   d6c46:	f000 f9c7 	bl	d6fd8 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6c4a:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6c4c:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6c4e:	d1f0      	bne.n	d6c32 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6c50:	4620      	mov	r0, r4
    }
    return n;
}
   d6c52:	b00d      	add	sp, #52	; 0x34
   d6c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6c58 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d6c58:	b510      	push	{r4, lr}
   d6c5a:	4b05      	ldr	r3, [pc, #20]	; (d6c70 <_ZN9IPAddressC1Ev+0x18>)
   d6c5c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6c5e:	2211      	movs	r2, #17
   d6c60:	f840 3b04 	str.w	r3, [r0], #4
   d6c64:	2100      	movs	r1, #0
   d6c66:	f001 fcd1 	bl	d860c <memset>
{
    clear();
}
   d6c6a:	4620      	mov	r0, r4
   d6c6c:	bd10      	pop	{r4, pc}
   d6c6e:	bf00      	nop
   d6c70:	000d8940 	.word	0x000d8940

000d6c74 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6c74:	4603      	mov	r3, r0
   d6c76:	4a07      	ldr	r2, [pc, #28]	; (d6c94 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6c78:	b510      	push	{r4, lr}
   d6c7a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6c7e:	f101 0210 	add.w	r2, r1, #16
   d6c82:	f851 4b04 	ldr.w	r4, [r1], #4
   d6c86:	f843 4b04 	str.w	r4, [r3], #4
   d6c8a:	4291      	cmp	r1, r2
   d6c8c:	d1f9      	bne.n	d6c82 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6c8e:	780a      	ldrb	r2, [r1, #0]
   d6c90:	701a      	strb	r2, [r3, #0]
}
   d6c92:	bd10      	pop	{r4, pc}
   d6c94:	000d8940 	.word	0x000d8940

000d6c98 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6c98:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6c9a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6c9e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6ca2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6ca6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6caa:	2304      	movs	r3, #4
   d6cac:	6041      	str	r1, [r0, #4]
   d6cae:	7503      	strb	r3, [r0, #20]
   d6cb0:	bd10      	pop	{r4, pc}

000d6cb2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6cb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6cb4:	780d      	ldrb	r5, [r1, #0]
   d6cb6:	788b      	ldrb	r3, [r1, #2]
   d6cb8:	784a      	ldrb	r2, [r1, #1]
   d6cba:	78c9      	ldrb	r1, [r1, #3]
   d6cbc:	9100      	str	r1, [sp, #0]
   d6cbe:	4629      	mov	r1, r5
   d6cc0:	f7ff ffea 	bl	d6c98 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6cc4:	b003      	add	sp, #12
   d6cc6:	bd30      	pop	{r4, r5, pc}

000d6cc8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6cc8:	4b01      	ldr	r3, [pc, #4]	; (d6cd0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6cca:	4a02      	ldr	r2, [pc, #8]	; (d6cd4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6ccc:	601a      	str	r2, [r3, #0]
   d6cce:	4770      	bx	lr
   d6cd0:	2003e4e0 	.word	0x2003e4e0
   d6cd4:	000d8a02 	.word	0x000d8a02

000d6cd8 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6cd8:	2200      	movs	r2, #0
   d6cda:	4611      	mov	r1, r2
   d6cdc:	6840      	ldr	r0, [r0, #4]
   d6cde:	f7ff be49 	b.w	d6974 <network_listening>

000d6ce2 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6ce2:	2200      	movs	r2, #0
   d6ce4:	4611      	mov	r1, r2
   d6ce6:	6840      	ldr	r0, [r0, #4]
   d6ce8:	f7ff be54 	b.w	d6994 <network_get_listen_timeout>

000d6cec <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6cec:	2200      	movs	r2, #0
   d6cee:	6840      	ldr	r0, [r0, #4]
   d6cf0:	f7ff be48 	b.w	d6984 <network_set_listen_timeout>

000d6cf4 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6cf4:	2200      	movs	r2, #0
   d6cf6:	f081 0101 	eor.w	r1, r1, #1
   d6cfa:	6840      	ldr	r0, [r0, #4]
   d6cfc:	f7ff be32 	b.w	d6964 <network_listen>

000d6d00 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6d00:	2300      	movs	r3, #0
   d6d02:	461a      	mov	r2, r3
   d6d04:	4619      	mov	r1, r3
   d6d06:	6840      	ldr	r0, [r0, #4]
   d6d08:	f7ff be24 	b.w	d6954 <network_off>

000d6d0c <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6d0c:	2300      	movs	r3, #0
   d6d0e:	461a      	mov	r2, r3
   d6d10:	4619      	mov	r1, r3
   d6d12:	6840      	ldr	r0, [r0, #4]
   d6d14:	f7ff be16 	b.w	d6944 <network_on>

000d6d18 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6d18:	2200      	movs	r2, #0
   d6d1a:	4611      	mov	r1, r2
   d6d1c:	6840      	ldr	r0, [r0, #4]
   d6d1e:	f7ff be09 	b.w	d6934 <network_ready>

000d6d22 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6d22:	2200      	movs	r2, #0
   d6d24:	4611      	mov	r1, r2
   d6d26:	6840      	ldr	r0, [r0, #4]
   d6d28:	f7ff bdf4 	b.w	d6914 <network_connecting>

000d6d2c <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6d2c:	2200      	movs	r2, #0
   d6d2e:	2102      	movs	r1, #2
   d6d30:	6840      	ldr	r0, [r0, #4]
   d6d32:	f7ff bdf7 	b.w	d6924 <network_disconnect>

000d6d36 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6d36:	2300      	movs	r3, #0
   d6d38:	461a      	mov	r2, r3
   d6d3a:	6840      	ldr	r0, [r0, #4]
   d6d3c:	f7ff bde2 	b.w	d6904 <network_connect>

000d6d40 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6d40:	b110      	cbz	r0, d6d48 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d6d42:	6803      	ldr	r3, [r0, #0]
   d6d44:	685b      	ldr	r3, [r3, #4]
   d6d46:	4718      	bx	r3
   d6d48:	4770      	bx	lr

000d6d4a <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d6d4a:	b538      	push	{r3, r4, r5, lr}
   d6d4c:	4604      	mov	r4, r0
   d6d4e:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d6d50:	b1d0      	cbz	r0, d6d88 <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d6d52:	f7ff fbab 	bl	d64ac <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d6d56:	b9b8      	cbnz	r0, d6d88 <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d6d58:	7c23      	ldrb	r3, [r4, #16]
   d6d5a:	b91b      	cbnz	r3, d6d64 <_ZN6Thread7disposeEv+0x1a>
   d6d5c:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d6d5e:	b108      	cbz	r0, d6d64 <_ZN6Thread7disposeEv+0x1a>
   d6d60:	f7ff fbb4 	bl	d64cc <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d6d64:	6865      	ldr	r5, [r4, #4]
   d6d66:	b155      	cbz	r5, d6d7e <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6d68:	68ab      	ldr	r3, [r5, #8]
   d6d6a:	b11b      	cbz	r3, d6d74 <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6d6c:	2203      	movs	r2, #3
   d6d6e:	4629      	mov	r1, r5
   d6d70:	4628      	mov	r0, r5
   d6d72:	4798      	blx	r3
            delete wrapper;
   d6d74:	4628      	mov	r0, r5
   d6d76:	f7fd f990 	bl	d409a <_ZdlPv>
            wrapper = NULL;
   d6d7a:	2300      	movs	r3, #0
   d6d7c:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d6d7e:	6820      	ldr	r0, [r4, #0]
   d6d80:	f7ff fbac 	bl	d64dc <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d6d84:	2300      	movs	r3, #0
   d6d86:	6023      	str	r3, [r4, #0]
   d6d88:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6d8c <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6d8c:	b538      	push	{r3, r4, r5, lr}
   d6d8e:	4b0b      	ldr	r3, [pc, #44]	; (d6dbc <_ZN5spark9MeshClassD1Ev+0x30>)
   d6d90:	6003      	str	r3, [r0, #0]
   d6d92:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6d94:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d6d98:	b108      	cbz	r0, d6d9e <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6d9a:	f7fd f980 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6d9e:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d6da2:	b12d      	cbz	r5, d6db0 <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d6da4:	4628      	mov	r0, r5
   d6da6:	f7ff ffd0 	bl	d6d4a <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6daa:	4628      	mov	r0, r5
   d6dac:	f7fd f975 	bl	d409a <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6db0:	68a0      	ldr	r0, [r4, #8]
   d6db2:	b108      	cbz	r0, d6db8 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d6db4:	f7ff ffc4 	bl	d6d40 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d6db8:	4620      	mov	r0, r4
   d6dba:	bd38      	pop	{r3, r4, r5, pc}
   d6dbc:	000d8a34 	.word	0x000d8a34

000d6dc0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6dc0:	b538      	push	{r3, r4, r5, lr}
   d6dc2:	4c0d      	ldr	r4, [pc, #52]	; (d6df8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d6dc4:	4b0d      	ldr	r3, [pc, #52]	; (d6dfc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d6dc6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6dc8:	2500      	movs	r5, #0
   d6dca:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6dcc:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6dd0:	6063      	str	r3, [r4, #4]
   d6dd2:	60a5      	str	r5, [r4, #8]
   d6dd4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6dd8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6ddc:	f7ff fb9e 	bl	d651c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6de0:	4b07      	ldr	r3, [pc, #28]	; (d6e00 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d6de2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d6de6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6de8:	4620      	mov	r0, r4
   d6dea:	4a06      	ldr	r2, [pc, #24]	; (d6e04 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d6dec:	4906      	ldr	r1, [pc, #24]	; (d6e08 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d6dee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6df2:	f000 bd59 	b.w	d78a8 <__aeabi_atexit>
   d6df6:	bf00      	nop
   d6df8:	2003e4e4 	.word	0x2003e4e4
   d6dfc:	000d8a68 	.word	0x000d8a68
   d6e00:	000d8a34 	.word	0x000d8a34
   d6e04:	2003df38 	.word	0x2003df38
   d6e08:	000d6d8d 	.word	0x000d6d8d

000d6e0c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6e0c:	2300      	movs	r3, #0
   d6e0e:	461a      	mov	r2, r3
   d6e10:	6840      	ldr	r0, [r0, #4]
   d6e12:	f7ff bd77 	b.w	d6904 <network_connect>

000d6e16 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6e16:	2200      	movs	r2, #0
   d6e18:	2102      	movs	r1, #2
   d6e1a:	6840      	ldr	r0, [r0, #4]
   d6e1c:	f7ff bd82 	b.w	d6924 <network_disconnect>

000d6e20 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6e20:	2200      	movs	r2, #0
   d6e22:	4611      	mov	r1, r2
   d6e24:	6840      	ldr	r0, [r0, #4]
   d6e26:	f7ff bd75 	b.w	d6914 <network_connecting>

000d6e2a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6e2a:	2200      	movs	r2, #0
   d6e2c:	4611      	mov	r1, r2
   d6e2e:	6840      	ldr	r0, [r0, #4]
   d6e30:	f7ff bd80 	b.w	d6934 <network_ready>

000d6e34 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6e34:	2300      	movs	r3, #0
   d6e36:	461a      	mov	r2, r3
   d6e38:	4619      	mov	r1, r3
   d6e3a:	6840      	ldr	r0, [r0, #4]
   d6e3c:	f7ff bd82 	b.w	d6944 <network_on>

000d6e40 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6e40:	2300      	movs	r3, #0
   d6e42:	461a      	mov	r2, r3
   d6e44:	4619      	mov	r1, r3
   d6e46:	6840      	ldr	r0, [r0, #4]
   d6e48:	f7ff bd84 	b.w	d6954 <network_off>

000d6e4c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6e4c:	2200      	movs	r2, #0
   d6e4e:	f081 0101 	eor.w	r1, r1, #1
   d6e52:	6840      	ldr	r0, [r0, #4]
   d6e54:	f7ff bd86 	b.w	d6964 <network_listen>

000d6e58 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6e58:	2200      	movs	r2, #0
   d6e5a:	6840      	ldr	r0, [r0, #4]
   d6e5c:	f7ff bd92 	b.w	d6984 <network_set_listen_timeout>

000d6e60 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6e60:	2200      	movs	r2, #0
   d6e62:	4611      	mov	r1, r2
   d6e64:	6840      	ldr	r0, [r0, #4]
   d6e66:	f7ff bd95 	b.w	d6994 <network_get_listen_timeout>

000d6e6a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6e6a:	2200      	movs	r2, #0
   d6e6c:	4611      	mov	r1, r2
   d6e6e:	6840      	ldr	r0, [r0, #4]
   d6e70:	f7ff bd80 	b.w	d6974 <network_listening>

000d6e74 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6e74:	b570      	push	{r4, r5, r6, lr}
   d6e76:	b08c      	sub	sp, #48	; 0x30
   d6e78:	4614      	mov	r4, r2
   d6e7a:	4606      	mov	r6, r0
    IPAddress addr;
   d6e7c:	f7ff feec 	bl	d6c58 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6e80:	ab0c      	add	r3, sp, #48	; 0x30
   d6e82:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d6e84:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6e86:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d6e8a:	4620      	mov	r0, r4
   d6e8c:	f7ff fc16 	bl	d66bc <netdb_getaddrinfo>
    if (!r && ai) {
   d6e90:	4601      	mov	r1, r0
   d6e92:	bb58      	cbnz	r0, d6eec <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d6e94:	9b00      	ldr	r3, [sp, #0]
   d6e96:	b34b      	cbz	r3, d6eec <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d6e98:	685a      	ldr	r2, [r3, #4]
   d6e9a:	2a02      	cmp	r2, #2
   d6e9c:	d00e      	beq.n	d6ebc <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d6e9e:	2a0a      	cmp	r2, #10
   d6ea0:	d124      	bne.n	d6eec <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d6ea2:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d6ea4:	2211      	movs	r2, #17
   d6ea6:	a801      	add	r0, sp, #4
   d6ea8:	f001 fbb0 	bl	d860c <memset>
                a.v = 6;
   d6eac:	2306      	movs	r3, #6
   d6eae:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6eb2:	ad01      	add	r5, sp, #4
   d6eb4:	f104 0308 	add.w	r3, r4, #8
   d6eb8:	3418      	adds	r4, #24
   d6eba:	e005      	b.n	d6ec8 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6ebc:	6959      	ldr	r1, [r3, #20]
   d6ebe:	4630      	mov	r0, r6
   d6ec0:	3104      	adds	r1, #4
   d6ec2:	f7ff fef6 	bl	d6cb2 <_ZN9IPAddressaSEPKh>
                break;
   d6ec6:	e011      	b.n	d6eec <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6ec8:	6818      	ldr	r0, [r3, #0]
   d6eca:	6859      	ldr	r1, [r3, #4]
   d6ecc:	462a      	mov	r2, r5
   d6ece:	c203      	stmia	r2!, {r0, r1}
   d6ed0:	3308      	adds	r3, #8
   d6ed2:	42a3      	cmp	r3, r4
   d6ed4:	4615      	mov	r5, r2
   d6ed6:	d1f7      	bne.n	d6ec8 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d6ed8:	a901      	add	r1, sp, #4
   d6eda:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6edc:	ad07      	add	r5, sp, #28
   d6ede:	f7ff fec9 	bl	d6c74 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6ee4:	1d34      	adds	r4, r6, #4
   d6ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6ee8:	682b      	ldr	r3, [r5, #0]
   d6eea:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d6eec:	9800      	ldr	r0, [sp, #0]
   d6eee:	f7ff fbdd 	bl	d66ac <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6ef2:	4630      	mov	r0, r6
   d6ef4:	b00c      	add	sp, #48	; 0x30
   d6ef6:	bd70      	pop	{r4, r5, r6, pc}

000d6ef8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6ef8:	4b02      	ldr	r3, [pc, #8]	; (d6f04 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6efa:	4a03      	ldr	r2, [pc, #12]	; (d6f08 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6efc:	601a      	str	r2, [r3, #0]
   d6efe:	2200      	movs	r2, #0
   d6f00:	605a      	str	r2, [r3, #4]
   d6f02:	4770      	bx	lr
   d6f04:	2003e6b4 	.word	0x2003e6b4
   d6f08:	000d8a68 	.word	0x000d8a68

000d6f0c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f0e:	4606      	mov	r6, r0
   d6f10:	460d      	mov	r5, r1
   d6f12:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6f14:	2400      	movs	r4, #0
  while (size--) {
   d6f16:	42bd      	cmp	r5, r7
   d6f18:	d00c      	beq.n	d6f34 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6f1a:	6833      	ldr	r3, [r6, #0]
   d6f1c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6f20:	689b      	ldr	r3, [r3, #8]
   d6f22:	4630      	mov	r0, r6
   d6f24:	4798      	blx	r3
     if (chunk>=0)
   d6f26:	2800      	cmp	r0, #0
   d6f28:	db01      	blt.n	d6f2e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6f2a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6f2c:	e7f3      	b.n	d6f16 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6f2e:	2c00      	cmp	r4, #0
   d6f30:	bf08      	it	eq
   d6f32:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6f34:	4620      	mov	r0, r4
   d6f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6f38 <_ZN5Print5printEPKc>:
   d6f38:	b508      	push	{r3, lr}
   d6f3a:	f7fe fe11 	bl	d5b60 <_ZN5Print5writeEPKc>
   d6f3e:	bd08      	pop	{r3, pc}

000d6f40 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6f40:	6803      	ldr	r3, [r0, #0]
   d6f42:	689b      	ldr	r3, [r3, #8]
   d6f44:	4718      	bx	r3

000d6f46 <_ZN5Print5printEPK19__FlashStringHelper>:
 {
   return x.printTo(*this);
 }

size_t Print::print(const __FlashStringHelper* str)
{
   d6f46:	b508      	push	{r3, lr}
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6f48:	f7fe fe0a 	bl	d5b60 <_ZN5Print5writeEPKc>
 }

size_t Print::print(const __FlashStringHelper* str)
{
  return print(reinterpret_cast<const char*>(str));
}
   d6f4c:	bd08      	pop	{r3, pc}

000d6f4e <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
   d6f4e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6f50:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6f52:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6f54:	f7ff fff4 	bl	d6f40 <_ZN5Print5printEc>
  n += print('\n');
   d6f58:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6f5a:	4604      	mov	r4, r0
  n += print('\n');
   d6f5c:	4628      	mov	r0, r5
   d6f5e:	f7ff ffef 	bl	d6f40 <_ZN5Print5printEc>
  return n;
}
   d6f62:	4420      	add	r0, r4
   d6f64:	bd38      	pop	{r3, r4, r5, pc}

000d6f66 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6f66:	b538      	push	{r3, r4, r5, lr}
   d6f68:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6f6a:	f7fe fdf9 	bl	d5b60 <_ZN5Print5writeEPKc>
   d6f6e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d6f70:	4628      	mov	r0, r5
   d6f72:	f7ff ffec 	bl	d6f4e <_ZN5Print7printlnEv>
  return n;
}
   d6f76:	4420      	add	r0, r4
   d6f78:	bd38      	pop	{r3, r4, r5, pc}

000d6f7a <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d6f7a:	f7ff bff4 	b.w	d6f66 <_ZN5Print7printlnEPKc>

000d6f7e <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6f7e:	b530      	push	{r4, r5, lr}
   d6f80:	b08b      	sub	sp, #44	; 0x2c
   d6f82:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6f84:	2100      	movs	r1, #0
   d6f86:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6f8a:	2a01      	cmp	r2, #1
   d6f8c:	bf98      	it	ls
   d6f8e:	220a      	movls	r2, #10
   d6f90:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d6f94:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d6f98:	fb05 3312 	mls	r3, r5, r2, r3
   d6f9c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6fa0:	2b09      	cmp	r3, #9
   d6fa2:	bf94      	ite	ls
   d6fa4:	3330      	addls	r3, #48	; 0x30
   d6fa6:	3337      	addhi	r3, #55	; 0x37
   d6fa8:	b2db      	uxtb	r3, r3
   d6faa:	4621      	mov	r1, r4
   d6fac:	f804 3901 	strb.w	r3, [r4], #-1
   d6fb0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6fb2:	2d00      	cmp	r5, #0
   d6fb4:	d1ee      	bne.n	d6f94 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6fb6:	f7fe fdd3 	bl	d5b60 <_ZN5Print5writeEPKc>
}
   d6fba:	b00b      	add	sp, #44	; 0x2c
   d6fbc:	bd30      	pop	{r4, r5, pc}

000d6fbe <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d6fbe:	b410      	push	{r4}
  if (base == 0) return write(n);
   d6fc0:	b92a      	cbnz	r2, d6fce <_ZN5Print5printEmi+0x10>
   d6fc2:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d6fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d6fc8:	689b      	ldr	r3, [r3, #8]
   d6fca:	b2c9      	uxtb	r1, r1
   d6fcc:	4718      	bx	r3
  else return printNumber(n, base);
   d6fce:	b2d2      	uxtb	r2, r2
}
   d6fd0:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d6fd4:	f7ff bfd3 	b.w	d6f7e <_ZN5Print11printNumberEmh>

000d6fd8 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d6fd8:	f7ff bff1 	b.w	d6fbe <_ZN5Print5printEmi>

000d6fdc <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
   d6fdc:	b538      	push	{r3, r4, r5, lr}
   d6fde:	4605      	mov	r5, r0
  size_t n = print(num, base);
   d6fe0:	f7ff ffed 	bl	d6fbe <_ZN5Print5printEmi>
   d6fe4:	4604      	mov	r4, r0
  n += println();
   d6fe6:	4628      	mov	r0, r5
   d6fe8:	f7ff ffb1 	bl	d6f4e <_ZN5Print7printlnEv>
  return n;
}
   d6fec:	4420      	add	r0, r4
   d6fee:	bd38      	pop	{r3, r4, r5, pc}

000d6ff0 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d6ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6ff4:	4607      	mov	r7, r0
   d6ff6:	460e      	mov	r6, r1
  if (base == 0) {
   d6ff8:	4615      	mov	r5, r2
   d6ffa:	b92a      	cbnz	r2, d7008 <_ZN5Print5printEli+0x18>
    return write(n);
   d6ffc:	6803      	ldr	r3, [r0, #0]
   d6ffe:	b2c9      	uxtb	r1, r1
   d7000:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d7002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d7006:	4718      	bx	r3
  } else if (base == 10) {
   d7008:	2a0a      	cmp	r2, #10
   d700a:	d102      	bne.n	d7012 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d700c:	2900      	cmp	r1, #0
   d700e:	da01      	bge.n	d7014 <_ZN5Print5printEli+0x24>
   d7010:	e004      	b.n	d701c <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d7012:	b2d2      	uxtb	r2, r2
  }
}
   d7014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d7018:	f7ff bfb1 	b.w	d6f7e <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d701c:	212d      	movs	r1, #45	; 0x2d
   d701e:	f7ff ff8f 	bl	d6f40 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d7022:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d7024:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d7026:	4271      	negs	r1, r6
   d7028:	4638      	mov	r0, r7
   d702a:	f7ff ffa8 	bl	d6f7e <_ZN5Print11printNumberEmh>
   d702e:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d7030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7034 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d7034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7038:	ec57 6b10 	vmov	r6, r7, d0
   d703c:	4682      	mov	sl, r0
   d703e:	460d      	mov	r5, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d7040:	ee10 2a10 	vmov	r2, s0
   d7044:	463b      	mov	r3, r7
   d7046:	ee10 0a10 	vmov	r0, s0
   d704a:	4639      	mov	r1, r7
   d704c:	f001 f9cc 	bl	d83e8 <__aeabi_dcmpun>
   d7050:	b108      	cbz	r0, d7056 <_ZN5Print10printFloatEdh+0x22>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7052:	4948      	ldr	r1, [pc, #288]	; (d7174 <_ZN5Print10printFloatEdh+0x140>)
   d7054:	e012      	b.n	d707c <_ZN5Print10printFloatEdh+0x48>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d7056:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   d705a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d705e:	4b46      	ldr	r3, [pc, #280]	; (d7178 <_ZN5Print10printFloatEdh+0x144>)
   d7060:	4630      	mov	r0, r6
   d7062:	4649      	mov	r1, r9
   d7064:	f001 f9c0 	bl	d83e8 <__aeabi_dcmpun>
   d7068:	b968      	cbnz	r0, d7086 <_ZN5Print10printFloatEdh+0x52>
   d706a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d706e:	4b42      	ldr	r3, [pc, #264]	; (d7178 <_ZN5Print10printFloatEdh+0x144>)
   d7070:	4630      	mov	r0, r6
   d7072:	4649      	mov	r1, r9
   d7074:	f001 f99a 	bl	d83ac <__aeabi_dcmple>
   d7078:	b928      	cbnz	r0, d7086 <_ZN5Print10printFloatEdh+0x52>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d707a:	4940      	ldr	r1, [pc, #256]	; (d717c <_ZN5Print10printFloatEdh+0x148>)
   d707c:	4650      	mov	r0, sl
   d707e:	f7fe fd6f 	bl	d5b60 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
   d7082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d7086:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d708a:	4b3d      	ldr	r3, [pc, #244]	; (d7180 <_ZN5Print10printFloatEdh+0x14c>)
   d708c:	4630      	mov	r0, r6
   d708e:	4639      	mov	r1, r7
   d7090:	f001 f9a0 	bl	d83d4 <__aeabi_dcmpgt>
   d7094:	b108      	cbz	r0, d709a <_ZN5Print10printFloatEdh+0x66>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7096:	493b      	ldr	r1, [pc, #236]	; (d7184 <_ZN5Print10printFloatEdh+0x150>)
   d7098:	e7f0      	b.n	d707c <_ZN5Print10printFloatEdh+0x48>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d709a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d709e:	4b3a      	ldr	r3, [pc, #232]	; (d7188 <_ZN5Print10printFloatEdh+0x154>)
   d70a0:	4630      	mov	r0, r6
   d70a2:	4639      	mov	r1, r7
   d70a4:	f001 f978 	bl	d8398 <__aeabi_dcmplt>
   d70a8:	2800      	cmp	r0, #0
   d70aa:	d1f4      	bne.n	d7096 <_ZN5Print10printFloatEdh+0x62>

  // Handle negative numbers
  if (number < 0.0)
   d70ac:	2200      	movs	r2, #0
   d70ae:	2300      	movs	r3, #0
   d70b0:	4630      	mov	r0, r6
   d70b2:	4639      	mov	r1, r7
   d70b4:	f001 f970 	bl	d8398 <__aeabi_dcmplt>
   d70b8:	b140      	cbz	r0, d70cc <_ZN5Print10printFloatEdh+0x98>
  {
     n += print('-');
   d70ba:	212d      	movs	r1, #45	; 0x2d
   d70bc:	4650      	mov	r0, sl
   d70be:	f7ff ff3f 	bl	d6f40 <_ZN5Print5printEc>
     number = -number;
   d70c2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
   d70c6:	4604      	mov	r4, r0
     number = -number;
   d70c8:	461f      	mov	r7, r3
   d70ca:	e000      	b.n	d70ce <_ZN5Print10printFloatEdh+0x9a>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d70cc:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d70ce:	492f      	ldr	r1, [pc, #188]	; (d718c <_ZN5Print10printFloatEdh+0x158>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
   d70d0:	f04f 0800 	mov.w	r8, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
   d70d4:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
   d70d6:	fa5f f388 	uxtb.w	r3, r8
   d70da:	429d      	cmp	r5, r3
   d70dc:	d906      	bls.n	d70ec <_ZN5Print10printFloatEdh+0xb8>
    rounding /= 10.0;
   d70de:	2200      	movs	r2, #0
   d70e0:	4b2b      	ldr	r3, [pc, #172]	; (d7190 <_ZN5Print10printFloatEdh+0x15c>)
   d70e2:	f001 f811 	bl	d8108 <__aeabi_ddiv>
   d70e6:	f108 0801 	add.w	r8, r8, #1
   d70ea:	e7f4      	b.n	d70d6 <_ZN5Print10printFloatEdh+0xa2>

  number += rounding;
   d70ec:	4632      	mov	r2, r6
   d70ee:	463b      	mov	r3, r7
   d70f0:	f000 fd2e 	bl	d7b50 <__adddf3>
   d70f4:	460f      	mov	r7, r1
   d70f6:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d70f8:	f001 f9b4 	bl	d8464 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d70fc:	220a      	movs	r2, #10
   d70fe:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
   d7100:	4680      	mov	r8, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d7102:	4650      	mov	r0, sl
   d7104:	f7ff ff3b 	bl	d6f7e <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d7108:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
   d710a:	b37d      	cbz	r5, d716c <_ZN5Print10printFloatEdh+0x138>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
   d710c:	4640      	mov	r0, r8
   d710e:	f000 fe5b 	bl	d7dc8 <__aeabi_ui2d>
   d7112:	4602      	mov	r2, r0
   d7114:	460b      	mov	r3, r1
   d7116:	4630      	mov	r0, r6
   d7118:	4639      	mov	r1, r7
   d711a:	f000 fd17 	bl	d7b4c <__aeabi_dsub>
   d711e:	4606      	mov	r6, r0
   d7120:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7122:	4650      	mov	r0, sl
   d7124:	491b      	ldr	r1, [pc, #108]	; (d7194 <_ZN5Print10printFloatEdh+0x160>)
   d7126:	f7fe fd1b 	bl	d5b60 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
   d712a:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
   d712c:	4b18      	ldr	r3, [pc, #96]	; (d7190 <_ZN5Print10printFloatEdh+0x15c>)
   d712e:	2200      	movs	r2, #0
   d7130:	4630      	mov	r0, r6
   d7132:	4639      	mov	r1, r7
   d7134:	f000 febe 	bl	d7eb4 <__aeabi_dmul>
   d7138:	460f      	mov	r7, r1
   d713a:	4606      	mov	r6, r0
    int toPrint = int(remainder);
   d713c:	f001 f96a 	bl	d8414 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d7140:	220a      	movs	r2, #10
   d7142:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
   d7144:	4680      	mov	r8, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d7146:	4650      	mov	r0, sl
   d7148:	f7ff ff52 	bl	d6ff0 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
   d714c:	4404      	add	r4, r0
    remainder -= toPrint;
   d714e:	4640      	mov	r0, r8
   d7150:	f000 fe4a 	bl	d7de8 <__aeabi_i2d>
   d7154:	4602      	mov	r2, r0
   d7156:	460b      	mov	r3, r1
   d7158:	4630      	mov	r0, r6
   d715a:	4639      	mov	r1, r7
   d715c:	f000 fcf6 	bl	d7b4c <__aeabi_dsub>
   d7160:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d7162:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
   d7166:	4606      	mov	r6, r0
   d7168:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
   d716a:	d1df      	bne.n	d712c <_ZN5Print10printFloatEdh+0xf8>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
   d716c:	4620      	mov	r0, r4
   d716e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7172:	bf00      	nop
   d7174:	000d8a94 	.word	0x000d8a94
   d7178:	7fefffff 	.word	0x7fefffff
   d717c:	000d8a9c 	.word	0x000d8a9c
   d7180:	41efffff 	.word	0x41efffff
   d7184:	000d8a98 	.word	0x000d8a98
   d7188:	c1efffff 	.word	0xc1efffff
   d718c:	3fe00000 	.word	0x3fe00000
   d7190:	40240000 	.word	0x40240000
   d7194:	000d885a 	.word	0x000d885a

000d7198 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   d7198:	b2c9      	uxtb	r1, r1
   d719a:	f7ff bf4b 	b.w	d7034 <_ZN5Print10printFloatEdh>

000d719e <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d719e:	b40c      	push	{r2, r3}
   d71a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d71a4:	b087      	sub	sp, #28
   d71a6:	af00      	add	r7, sp, #0
   d71a8:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d71ac:	4605      	mov	r5, r0
   d71ae:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d71b2:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d71b4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d71b6:	4623      	mov	r3, r4
   d71b8:	464a      	mov	r2, r9
   d71ba:	2114      	movs	r1, #20
   d71bc:	1d38      	adds	r0, r7, #4
   d71be:	f7ff fc01 	bl	d69c4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d71c2:	2813      	cmp	r0, #19
   d71c4:	d805      	bhi.n	d71d2 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d71c6:	1d39      	adds	r1, r7, #4
   d71c8:	4628      	mov	r0, r5
   d71ca:	f7fe fcc9 	bl	d5b60 <_ZN5Print5writeEPKc>
   d71ce:	4604      	mov	r4, r0
   d71d0:	e013      	b.n	d71fa <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d71d2:	f100 0308 	add.w	r3, r0, #8
   d71d6:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d71da:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d71dc:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d71e0:	1c41      	adds	r1, r0, #1
   d71e2:	4623      	mov	r3, r4
   d71e4:	464a      	mov	r2, r9
   d71e6:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d71e8:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d71ea:	f7ff fbeb 	bl	d69c4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d71ee:	4669      	mov	r1, sp
   d71f0:	4628      	mov	r0, r5
   d71f2:	f7fe fcb5 	bl	d5b60 <_ZN5Print5writeEPKc>
   d71f6:	4604      	mov	r4, r0
   d71f8:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d71fa:	b11e      	cbz	r6, d7204 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d71fc:	4628      	mov	r0, r5
   d71fe:	f7ff fea6 	bl	d6f4e <_ZN5Print7printlnEv>
   d7202:	4404      	add	r4, r0
    return n;
}
   d7204:	4620      	mov	r0, r4
   d7206:	371c      	adds	r7, #28
   d7208:	46bd      	mov	sp, r7
   d720a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d720e:	b002      	add	sp, #8
   d7210:	4770      	bx	lr

000d7212 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7212:	b510      	push	{r4, lr}
   d7214:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7216:	f7ff fc35 	bl	d6a84 <_ZNSt14_Function_baseD1Ev>
   d721a:	4620      	mov	r0, r4
   d721c:	bd10      	pop	{r4, pc}
	...

000d7220 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7220:	4803      	ldr	r0, [pc, #12]	; (d7230 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7222:	4a04      	ldr	r2, [pc, #16]	; (d7234 <_GLOBAL__sub_I_RGB+0x14>)
   d7224:	4904      	ldr	r1, [pc, #16]	; (d7238 <_GLOBAL__sub_I_RGB+0x18>)
   d7226:	2300      	movs	r3, #0
   d7228:	6083      	str	r3, [r0, #8]
   d722a:	f000 bb3d 	b.w	d78a8 <__aeabi_atexit>
   d722e:	bf00      	nop
   d7230:	2003e6bc 	.word	0x2003e6bc
   d7234:	2003df38 	.word	0x2003df38
   d7238:	000d7213 	.word	0x000d7213

000d723c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d723c:	4770      	bx	lr

000d723e <_ZN8SPIClassD0Ev>:
   d723e:	b510      	push	{r4, lr}
   d7240:	4604      	mov	r4, r0
   d7242:	f7fc ff2a 	bl	d409a <_ZdlPv>
   d7246:	4620      	mov	r0, r4
   d7248:	bd10      	pop	{r4, pc}
	...

000d724c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d724c:	b570      	push	{r4, r5, r6, lr}
   d724e:	4b08      	ldr	r3, [pc, #32]	; (d7270 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d7250:	6003      	str	r3, [r0, #0]
   d7252:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d7254:	2500      	movs	r5, #0
   d7256:	460e      	mov	r6, r1
   d7258:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d725c:	f7ff f946 	bl	d64ec <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d7260:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d7262:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d7264:	f7ff fa42 	bl	d66ec <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d7268:	60a5      	str	r5, [r4, #8]
}
   d726a:	4620      	mov	r0, r4
   d726c:	bd70      	pop	{r4, r5, r6, pc}
   d726e:	bf00      	nop
   d7270:	000d8aa8 	.word	0x000d8aa8

000d7274 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d7274:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d7278:	7900      	ldrb	r0, [r0, #4]
   d727a:	f7ff ba27 	b.w	d66cc <HAL_SPI_Begin>

000d727e <_ZN8SPIClass14endTransactionEv>:
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
    void unlock() { os_mutex_unlock(handle_); }
   d727e:	68c0      	ldr	r0, [r0, #12]
   d7280:	f7ff b944 	b.w	d650c <os_mutex_unlock>

000d7284 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d7284:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
   d7286:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d7288:	6018      	str	r0, [r3, #0]
   d728a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
   d728c:	6818      	ldr	r0, [r3, #0]
   d728e:	4288      	cmp	r0, r1
   d7290:	b2e5      	uxtb	r5, r4
   d7292:	d906      	bls.n	d72a2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d7294:	3401      	adds	r4, #1
   d7296:	2c08      	cmp	r4, #8
   d7298:	d002      	beq.n	d72a0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
   d729a:	0840      	lsrs	r0, r0, #1
   d729c:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
   d729e:	e7f5      	b.n	d728c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d72a0:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d72a2:	4b02      	ldr	r3, [pc, #8]	; (d72ac <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d72a4:	5d5b      	ldrb	r3, [r3, r5]
   d72a6:	7013      	strb	r3, [r2, #0]
   d72a8:	bd30      	pop	{r4, r5, pc}
   d72aa:	bf00      	nop
   d72ac:	000d8ab0 	.word	0x000d8ab0

000d72b0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
  lock();
  return 0;
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d72b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d72b4:	4680      	mov	r8, r0
   d72b6:	b08f      	sub	sp, #60	; 0x3c
            os_mutex_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
   d72b8:	68c0      	ldr	r0, [r0, #12]
   d72ba:	460f      	mov	r7, r1
   d72bc:	f7ff f91e 	bl	d64fc <os_mutex_lock>
  lock();
  // Get Current SPISettings
  hal_spi_info_t info;
  querySpiInfo(_spi, &info);
   d72c0:	f898 4004 	ldrb.w	r4, [r8, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   d72c4:	2214      	movs	r2, #20
   d72c6:	2100      	movs	r1, #0
   d72c8:	a809      	add	r0, sp, #36	; 0x24
   d72ca:	f001 f99f 	bl	d860c <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   d72ce:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   d72d0:	4620      	mov	r0, r4
   d72d2:	2200      	movs	r2, #0
   d72d4:	a909      	add	r1, sp, #36	; 0x24
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   d72d6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  HAL_SPI_Info(spi, info, nullptr);
   d72da:	f7ff fa17 	bl	d670c <HAL_SPI_Info>
}

static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
  if (!info->enabled || info->default_settings)
   d72de:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d72e2:	b14c      	cbz	r4, d72f8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
   d72e4:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d72e8:	b92d      	cbnz	r5, d72f6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d72ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   d72ec:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d72f0:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d72f4:	e003      	b.n	d72fe <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d72f6:	2400      	movs	r4, #0
   d72f8:	46a1      	mov	r9, r4
   d72fa:	4626      	mov	r6, r4
   d72fc:	2501      	movs	r5, #1
   d72fe:	793b      	ldrb	r3, [r7, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d7300:	b10d      	cbz	r5, d7306 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
   d7302:	2b00      	cmp	r3, #0
   d7304:	d140      	bne.n	d7388 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
      return true;

    if (default_ == other.default_ &&
   d7306:	429d      	cmp	r5, r3
   d7308:	d10b      	bne.n	d7322 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
   d730a:	68ba      	ldr	r2, [r7, #8]
   d730c:	42b2      	cmp	r2, r6
   d730e:	d108      	bne.n	d7322 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d7310:	f88d 9020 	strb.w	r9, [sp, #32]
   d7314:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d7318:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d731c:	89ba      	ldrh	r2, [r7, #12]
   d731e:	4291      	cmp	r1, r2
   d7320:	d032      	beq.n	d7388 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
  querySpiInfo(_spi, &info);
  particle::__SPISettings current = spiSettingsFromSpiInfo(&info);
  // If they differ, reconfigure SPI peripheral
  if (settings != current)
  {
    if (!settings.default_) {
   d7322:	bb23      	cbnz	r3, d736e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xbe>
      uint8_t divisor = 0;
   d7324:	f88d 300f 	strb.w	r3, [sp, #15]
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);
   d7328:	f10d 020f 	add.w	r2, sp, #15
   d732c:	ab04      	add	r3, sp, #16
   d732e:	68b9      	ldr	r1, [r7, #8]
   d7330:	980a      	ldr	r0, [sp, #40]	; 0x28
   d7332:	f7ff ffa7 	bl	d7284 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d7336:	793b      	ldrb	r3, [r7, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d7338:	b105      	cbz	r5, d733c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
   d733a:	bb13      	cbnz	r3, d7382 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d733c:	42ab      	cmp	r3, r5
   d733e:	d009      	beq.n	d7354 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>

      if (!(current <= settings && clock == current.clock_)) {
        HAL_SPI_Set_Settings(_spi, 0, divisor, settings.bitOrder_, settings.dataMode_, nullptr);
   d7340:	2100      	movs	r1, #0
   d7342:	7b3b      	ldrb	r3, [r7, #12]
   d7344:	9101      	str	r1, [sp, #4]
   d7346:	7b7c      	ldrb	r4, [r7, #13]
   d7348:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d734c:	f898 0004 	ldrb.w	r0, [r8, #4]
   d7350:	9400      	str	r4, [sp, #0]
   d7352:	e013      	b.n	d737c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xcc>
   d7354:	68bb      	ldr	r3, [r7, #8]
   d7356:	42b3      	cmp	r3, r6
   d7358:	d3f2      	bcc.n	d7340 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d735a:	f88d 9020 	strb.w	r9, [sp, #32]
   d735e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d7362:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d7366:	89bb      	ldrh	r3, [r7, #12]
   d7368:	429a      	cmp	r2, r3
   d736a:	d1e9      	bne.n	d7340 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
   d736c:	e009      	b.n	d7382 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      }
    } else {
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
   d736e:	2300      	movs	r3, #0
   d7370:	f898 0004 	ldrb.w	r0, [r8, #4]
   d7374:	9301      	str	r3, [sp, #4]
   d7376:	9300      	str	r3, [sp, #0]
   d7378:	461a      	mov	r2, r3
   d737a:	2101      	movs	r1, #1
   d737c:	f7ff f9de 	bl	d673c <HAL_SPI_Set_Settings>
   d7380:	e002      	b.n	d7388 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
    if (!settings.default_) {
      uint8_t divisor = 0;
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);

      if (!(current <= settings && clock == current.clock_)) {
   d7382:	9b04      	ldr	r3, [sp, #16]
   d7384:	42b3      	cmp	r3, r6
   d7386:	d1db      	bne.n	d7340 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
    }
  }

  return 0;
}
   d7388:	2000      	movs	r0, #0
   d738a:	b00f      	add	sp, #60	; 0x3c
   d738c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7390 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d7390:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   d7392:	7900      	ldrb	r0, [r0, #4]
   d7394:	f7ff f9a2 	bl	d66dc <HAL_SPI_Send_Receive_Data>
}
   d7398:	b2c0      	uxtb	r0, r0
   d739a:	bd08      	pop	{r3, pc}

000d739c <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d739c:	b530      	push	{r4, r5, lr}
   d739e:	b087      	sub	sp, #28
   d73a0:	4604      	mov	r4, r0
   d73a2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d73a4:	7900      	ldrb	r0, [r0, #4]
   d73a6:	9500      	str	r5, [sp, #0]
   d73a8:	f7ff f9b8 	bl	d671c <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
   d73ac:	b93d      	cbnz	r5, d73be <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d73ae:	a902      	add	r1, sp, #8
   d73b0:	7920      	ldrb	r0, [r4, #4]
   d73b2:	f7ff f9bb 	bl	d672c <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
   d73b6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d73ba:	07db      	lsls	r3, r3, #31
   d73bc:	d4f7      	bmi.n	d73ae <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
   d73be:	b007      	add	sp, #28
   d73c0:	bd30      	pop	{r4, r5, pc}

000d73c2 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d73c2:	7900      	ldrb	r0, [r0, #4]
   d73c4:	f7ff b99a 	b.w	d66fc <HAL_SPI_Is_Enabled>

000d73c8 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d73c8:	b510      	push	{r4, lr}
   d73ca:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d73cc:	f7ff f8c6 	bl	d655c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d73d0:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d73d2:	6823      	ldr	r3, [r4, #0]
   d73d4:	4620      	mov	r0, r4
   d73d6:	695b      	ldr	r3, [r3, #20]
   d73d8:	4798      	blx	r3
    if (c >= 0) return c;
   d73da:	2800      	cmp	r0, #0
   d73dc:	da08      	bge.n	d73f0 <_ZN6Stream9timedReadEv+0x28>
   d73de:	f7ff f8bd 	bl	d655c <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
   d73e2:	68e3      	ldr	r3, [r4, #12]
   d73e4:	1ac0      	subs	r0, r0, r3
   d73e6:	68a3      	ldr	r3, [r4, #8]
   d73e8:	4298      	cmp	r0, r3
   d73ea:	d3f2      	bcc.n	d73d2 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
   d73ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d73f0:	bd10      	pop	{r4, pc}

000d73f2 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   d73f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d73f6:	4680      	mov	r8, r0
   d73f8:	4689      	mov	r9, r1
   d73fa:	4616      	mov	r6, r2
  if (length < 1) return 0;
   d73fc:	b17b      	cbz	r3, d741e <_ZN6Stream14readBytesUntilEcPcj+0x2c>
   d73fe:	18d7      	adds	r7, r2, r3
   d7400:	4615      	mov	r5, r2
  size_t index = 0;
  while (index < length) {
   d7402:	42bd      	cmp	r5, r7
   d7404:	eba5 0406 	sub.w	r4, r5, r6
   d7408:	d00a      	beq.n	d7420 <_ZN6Stream14readBytesUntilEcPcj+0x2e>
    int c = timedRead();
   d740a:	4640      	mov	r0, r8
   d740c:	f7ff ffdc 	bl	d73c8 <_ZN6Stream9timedReadEv>
    if (c < 0 || c == terminator) break;
   d7410:	2800      	cmp	r0, #0
   d7412:	db05      	blt.n	d7420 <_ZN6Stream14readBytesUntilEcPcj+0x2e>
   d7414:	4548      	cmp	r0, r9
   d7416:	d003      	beq.n	d7420 <_ZN6Stream14readBytesUntilEcPcj+0x2e>
    *buffer++ = (char)c;
   d7418:	f805 0b01 	strb.w	r0, [r5], #1

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
   d741c:	e7f1      	b.n	d7402 <_ZN6Stream14readBytesUntilEcPcj+0x10>
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
   d741e:	461c      	mov	r4, r3
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
   d7420:	4620      	mov	r0, r4
   d7422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

000d7428 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d7428:	4b04      	ldr	r3, [pc, #16]	; (d743c <_GLOBAL__sub_I_System+0x14>)
   d742a:	2000      	movs	r0, #0
   d742c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7430:	7018      	strb	r0, [r3, #0]
   d7432:	8058      	strh	r0, [r3, #2]
   d7434:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7436:	f7ff ba19 	b.w	d686c <set_system_mode>
   d743a:	bf00      	nop
   d743c:	2003e6cc 	.word	0x2003e6cc

000d7440 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
   d7440:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d7442:	2000      	movs	r0, #0
   d7444:	f7ff fa4e 	bl	d68e4 <spark_sync_time_pending>
   d7448:	b128      	cbz	r0, d7456 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d744a:	f7ff fa43 	bl	d68d4 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
   d744e:	f080 0001 	eor.w	r0, r0, #1
   d7452:	b2c0      	uxtb	r0, r0
   d7454:	bd08      	pop	{r3, pc}
   d7456:	2001      	movs	r0, #1
    }
   d7458:	bd08      	pop	{r3, pc}

000d745a <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d745a:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d745c:	2000      	movs	r0, #0
   d745e:	f7ff f88d 	bl	d657c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d7462:	4604      	mov	r4, r0
   d7464:	b968      	cbnz	r0, d7482 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7466:	f7ff f9f9 	bl	d685c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d746a:	2801      	cmp	r0, #1
   d746c:	d10b      	bne.n	d7486 <_ZN9TimeClass7isValidEv+0x2c>
   d746e:	4620      	mov	r0, r4
   d7470:	f7ff fa0c 	bl	d688c <system_thread_get_state>
   d7474:	b938      	cbnz	r0, d7486 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d7476:	f7ff ffe3 	bl	d7440 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d747a:	b930      	cbnz	r0, d748a <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d747c:	f7ff fa22 	bl	d68c4 <spark_process>
   d7480:	e7f9      	b.n	d7476 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d7482:	2001      	movs	r0, #1
   d7484:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d7486:	2000      	movs	r0, #0
   d7488:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d748a:	f7ff ffd9 	bl	d7440 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d748e:	2000      	movs	r0, #0
   d7490:	f7ff f874 	bl	d657c <HAL_RTC_Time_Is_Valid>
   d7494:	3000      	adds	r0, #0
   d7496:	bf18      	it	ne
   d7498:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d749a:	bd10      	pop	{r4, pc}

000d749c <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d749c:	b508      	push	{r3, lr}
    (void)isValid();
   d749e:	f7ff ffdc 	bl	d745a <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d74a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d74a6:	f7ff b861 	b.w	d656c <HAL_RTC_Get_UnixTime>
	...

000d74ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d74ac:	4b02      	ldr	r3, [pc, #8]	; (d74b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d74ae:	681a      	ldr	r2, [r3, #0]
   d74b0:	4b02      	ldr	r3, [pc, #8]	; (d74bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d74b2:	601a      	str	r2, [r3, #0]
   d74b4:	4770      	bx	lr
   d74b6:	bf00      	nop
   d74b8:	2003ded0 	.word	0x2003ded0
   d74bc:	2003e6d4 	.word	0x2003e6d4

000d74c0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d74c0:	4770      	bx	lr

000d74c2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d74c2:	7441      	strb	r1, [r0, #17]
   d74c4:	4770      	bx	lr

000d74c6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d74c6:	7c00      	ldrb	r0, [r0, #16]
   d74c8:	f7ff b978 	b.w	d67bc <HAL_USART_Available_Data_For_Write>

000d74cc <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d74cc:	7c00      	ldrb	r0, [r0, #16]
   d74ce:	f7ff b94d 	b.w	d676c <HAL_USART_Available_Data>

000d74d2 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d74d2:	7c00      	ldrb	r0, [r0, #16]
   d74d4:	f7ff b95a 	b.w	d678c <HAL_USART_Peek_Data>

000d74d8 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d74d8:	7c00      	ldrb	r0, [r0, #16]
   d74da:	f7ff b94f 	b.w	d677c <HAL_USART_Read_Data>

000d74de <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d74de:	7c00      	ldrb	r0, [r0, #16]
   d74e0:	f7ff b95c 	b.w	d679c <HAL_USART_Flush_Data>

000d74e4 <_ZN11USARTSerialD0Ev>:
   d74e4:	b510      	push	{r4, lr}
   d74e6:	4604      	mov	r4, r0
   d74e8:	f7fc fdd7 	bl	d409a <_ZdlPv>
   d74ec:	4620      	mov	r0, r4
   d74ee:	bd10      	pop	{r4, pc}

000d74f0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d74f0:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d74f2:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d74f4:	4604      	mov	r4, r0
   d74f6:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d74f8:	b925      	cbnz	r5, d7504 <_ZN11USARTSerial5writeEh+0x14>
   d74fa:	7c00      	ldrb	r0, [r0, #16]
   d74fc:	f7ff f95e 	bl	d67bc <HAL_USART_Available_Data_For_Write>
   d7500:	2800      	cmp	r0, #0
   d7502:	dd05      	ble.n	d7510 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7504:	4631      	mov	r1, r6
   d7506:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d750c:	f7ff b926 	b.w	d675c <HAL_USART_Write_Data>
  }
  return 0;
}
   d7510:	4628      	mov	r0, r5
   d7512:	bd70      	pop	{r4, r5, r6, pc}

000d7514 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7514:	b510      	push	{r4, lr}
   d7516:	4604      	mov	r4, r0
   d7518:	4608      	mov	r0, r1
   d751a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d751c:	2200      	movs	r2, #0
   d751e:	6062      	str	r2, [r4, #4]
   d7520:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7524:	60a2      	str	r2, [r4, #8]
   d7526:	4a05      	ldr	r2, [pc, #20]	; (d753c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7528:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d752a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d752c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d752e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7530:	461a      	mov	r2, r3
   d7532:	f7ff f90b 	bl	d674c <HAL_USART_Init>
}
   d7536:	4620      	mov	r0, r4
   d7538:	bd10      	pop	{r4, pc}
   d753a:	bf00      	nop
   d753c:	000d8aec 	.word	0x000d8aec

000d7540 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d7540:	2300      	movs	r3, #0
   d7542:	7c00      	ldrb	r0, [r0, #16]
   d7544:	f7ff b942 	b.w	d67cc <HAL_USART_BeginConfig>

000d7548 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d7548:	2200      	movs	r2, #0
   d754a:	f7ff bff9 	b.w	d7540 <_ZN11USARTSerial5beginEmm>

000d754e <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d754e:	7c00      	ldrb	r0, [r0, #16]
   d7550:	f7ff b92c 	b.w	d67ac <HAL_USART_Is_Enabled>

000d7554 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d7556:	4c19      	ldr	r4, [pc, #100]	; (d75bc <_Z22__fetch_global_Serial1v+0x68>)
   d7558:	6825      	ldr	r5, [r4, #0]
   d755a:	b94d      	cbnz	r5, d7570 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d755c:	2084      	movs	r0, #132	; 0x84
   d755e:	f7fc fd9a 	bl	d4096 <_Znwj>
   d7562:	4606      	mov	r6, r0
   d7564:	b118      	cbz	r0, d756e <_Z22__fetch_global_Serial1v+0x1a>
   d7566:	2284      	movs	r2, #132	; 0x84
   d7568:	4629      	mov	r1, r5
   d756a:	f001 f84f 	bl	d860c <memset>
   d756e:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d7570:	4d13      	ldr	r5, [pc, #76]	; (d75c0 <_Z22__fetch_global_Serial1v+0x6c>)
   d7572:	682e      	ldr	r6, [r5, #0]
   d7574:	b94e      	cbnz	r6, d758a <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d7576:	2084      	movs	r0, #132	; 0x84
   d7578:	f7fc fd8d 	bl	d4096 <_Znwj>
   d757c:	4607      	mov	r7, r0
   d757e:	b118      	cbz	r0, d7588 <_Z22__fetch_global_Serial1v+0x34>
   d7580:	2284      	movs	r2, #132	; 0x84
   d7582:	4631      	mov	r1, r6
   d7584:	f001 f842 	bl	d860c <memset>
   d7588:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d758a:	4f0e      	ldr	r7, [pc, #56]	; (d75c4 <_Z22__fetch_global_Serial1v+0x70>)
   d758c:	6839      	ldr	r1, [r7, #0]
   d758e:	f011 0601 	ands.w	r6, r1, #1
   d7592:	d111      	bne.n	d75b8 <_Z22__fetch_global_Serial1v+0x64>
   d7594:	4638      	mov	r0, r7
   d7596:	f7fc fd84 	bl	d40a2 <__cxa_guard_acquire>
   d759a:	b168      	cbz	r0, d75b8 <_Z22__fetch_global_Serial1v+0x64>
   d759c:	6822      	ldr	r2, [r4, #0]
   d759e:	682b      	ldr	r3, [r5, #0]
   d75a0:	4809      	ldr	r0, [pc, #36]	; (d75c8 <_Z22__fetch_global_Serial1v+0x74>)
   d75a2:	4631      	mov	r1, r6
   d75a4:	f7ff ffb6 	bl	d7514 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d75a8:	4638      	mov	r0, r7
   d75aa:	f7fc fd7f 	bl	d40ac <__cxa_guard_release>
   d75ae:	4a07      	ldr	r2, [pc, #28]	; (d75cc <_Z22__fetch_global_Serial1v+0x78>)
   d75b0:	4907      	ldr	r1, [pc, #28]	; (d75d0 <_Z22__fetch_global_Serial1v+0x7c>)
   d75b2:	4805      	ldr	r0, [pc, #20]	; (d75c8 <_Z22__fetch_global_Serial1v+0x74>)
   d75b4:	f000 f978 	bl	d78a8 <__aeabi_atexit>
#endif
	return serial1;
}
   d75b8:	4803      	ldr	r0, [pc, #12]	; (d75c8 <_Z22__fetch_global_Serial1v+0x74>)
   d75ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d75bc:	2003e6f4 	.word	0x2003e6f4
   d75c0:	2003e6ec 	.word	0x2003e6ec
   d75c4:	2003e6f0 	.word	0x2003e6f0
   d75c8:	2003e6d8 	.word	0x2003e6d8
   d75cc:	2003df38 	.word	0x2003df38
   d75d0:	000d74c1 	.word	0x000d74c1

000d75d4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d75d4:	7441      	strb	r1, [r0, #17]
   d75d6:	4770      	bx	lr

000d75d8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d75d8:	4770      	bx	lr

000d75da <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d75da:	2100      	movs	r1, #0
   d75dc:	7c00      	ldrb	r0, [r0, #16]
   d75de:	f7ff b91d 	b.w	d681c <HAL_USB_USART_Receive_Data>

000d75e2 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d75e2:	2101      	movs	r1, #1
   d75e4:	7c00      	ldrb	r0, [r0, #16]
   d75e6:	f7ff b919 	b.w	d681c <HAL_USB_USART_Receive_Data>

000d75ea <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d75ea:	7c00      	ldrb	r0, [r0, #16]
   d75ec:	f7ff b90e 	b.w	d680c <HAL_USB_USART_Available_Data_For_Write>

000d75f0 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d75f0:	7c00      	ldrb	r0, [r0, #16]
   d75f2:	f7ff b903 	b.w	d67fc <HAL_USB_USART_Available_Data>

000d75f6 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d75f6:	b538      	push	{r3, r4, r5, lr}
   d75f8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d75fa:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d75fc:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d75fe:	f7ff f905 	bl	d680c <HAL_USB_USART_Available_Data_For_Write>
   d7602:	2800      	cmp	r0, #0
   d7604:	dc01      	bgt.n	d760a <_ZN9USBSerial5writeEh+0x14>
   d7606:	7c60      	ldrb	r0, [r4, #17]
   d7608:	b120      	cbz	r0, d7614 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d760a:	4629      	mov	r1, r5
   d760c:	7c20      	ldrb	r0, [r4, #16]
   d760e:	f7ff f90d 	bl	d682c <HAL_USB_USART_Send_Data>
    return 1;
   d7612:	2001      	movs	r0, #1
  }
  return 0;
}
   d7614:	bd38      	pop	{r3, r4, r5, pc}

000d7616 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7616:	7c00      	ldrb	r0, [r0, #16]
   d7618:	f7ff b910 	b.w	d683c <HAL_USB_USART_Flush_Data>

000d761c <_ZN9USBSerialD0Ev>:
   d761c:	b510      	push	{r4, lr}
   d761e:	4604      	mov	r4, r0
   d7620:	f7fc fd3b 	bl	d409a <_ZdlPv>
   d7624:	4620      	mov	r0, r4
   d7626:	bd10      	pop	{r4, pc}

000d7628 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7628:	b510      	push	{r4, lr}
   d762a:	4604      	mov	r4, r0
   d762c:	2300      	movs	r3, #0
   d762e:	6063      	str	r3, [r4, #4]
   d7630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7634:	60a3      	str	r3, [r4, #8]
   d7636:	4b05      	ldr	r3, [pc, #20]	; (d764c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7638:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d763a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d763c:	4608      	mov	r0, r1
{
  _serial = serial;
   d763e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7640:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7642:	4611      	mov	r1, r2
   d7644:	f7ff f8ca 	bl	d67dc <HAL_USB_USART_Init>
}
   d7648:	4620      	mov	r0, r4
   d764a:	bd10      	pop	{r4, pc}
   d764c:	000d8b1c 	.word	0x000d8b1c

000d7650 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7650:	2200      	movs	r2, #0
   d7652:	7c00      	ldrb	r0, [r0, #16]
   d7654:	f7ff b8ca 	b.w	d67ec <HAL_USB_USART_Begin>

000d7658 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7658:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d765a:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d765c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d765e:	2100      	movs	r1, #0
   d7660:	f000 ffd4 	bl	d860c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7664:	4620      	mov	r0, r4
   d7666:	bd10      	pop	{r4, pc}

000d7668 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7668:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d766a:	4d0e      	ldr	r5, [pc, #56]	; (d76a4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d766c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d766e:	a801      	add	r0, sp, #4
   d7670:	f7ff fff2 	bl	d7658 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7674:	6829      	ldr	r1, [r5, #0]
   d7676:	f011 0401 	ands.w	r4, r1, #1
   d767a:	d110      	bne.n	d769e <_Z16_fetch_usbserialv+0x36>
   d767c:	4628      	mov	r0, r5
   d767e:	f7fc fd10 	bl	d40a2 <__cxa_guard_acquire>
   d7682:	b160      	cbz	r0, d769e <_Z16_fetch_usbserialv+0x36>
   d7684:	aa01      	add	r2, sp, #4
   d7686:	4621      	mov	r1, r4
   d7688:	4807      	ldr	r0, [pc, #28]	; (d76a8 <_Z16_fetch_usbserialv+0x40>)
   d768a:	f7ff ffcd 	bl	d7628 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d768e:	4628      	mov	r0, r5
   d7690:	f7fc fd0c 	bl	d40ac <__cxa_guard_release>
   d7694:	4a05      	ldr	r2, [pc, #20]	; (d76ac <_Z16_fetch_usbserialv+0x44>)
   d7696:	4906      	ldr	r1, [pc, #24]	; (d76b0 <_Z16_fetch_usbserialv+0x48>)
   d7698:	4803      	ldr	r0, [pc, #12]	; (d76a8 <_Z16_fetch_usbserialv+0x40>)
   d769a:	f000 f905 	bl	d78a8 <__aeabi_atexit>
	return _usbserial;
}
   d769e:	4802      	ldr	r0, [pc, #8]	; (d76a8 <_Z16_fetch_usbserialv+0x40>)
   d76a0:	b007      	add	sp, #28
   d76a2:	bd30      	pop	{r4, r5, pc}
   d76a4:	2003e6f8 	.word	0x2003e6f8
   d76a8:	2003e6fc 	.word	0x2003e6fc
   d76ac:	2003df38 	.word	0x2003df38
   d76b0:	000d75d9 	.word	0x000d75d9

000d76b4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d76b4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d76b6:	4b0c      	ldr	r3, [pc, #48]	; (d76e8 <serialEventRun+0x34>)
   d76b8:	b133      	cbz	r3, d76c8 <serialEventRun+0x14>
   d76ba:	f7ff ffd5 	bl	d7668 <_Z16_fetch_usbserialv>
   d76be:	6803      	ldr	r3, [r0, #0]
   d76c0:	691b      	ldr	r3, [r3, #16]
   d76c2:	4798      	blx	r3
   d76c4:	2800      	cmp	r0, #0
   d76c6:	dc09      	bgt.n	d76dc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d76c8:	4b08      	ldr	r3, [pc, #32]	; (d76ec <serialEventRun+0x38>)
   d76ca:	b163      	cbz	r3, d76e6 <serialEventRun+0x32>
   d76cc:	f7ff ff42 	bl	d7554 <_Z22__fetch_global_Serial1v>
   d76d0:	6803      	ldr	r3, [r0, #0]
   d76d2:	691b      	ldr	r3, [r3, #16]
   d76d4:	4798      	blx	r3
   d76d6:	2800      	cmp	r0, #0
   d76d8:	dc03      	bgt.n	d76e2 <serialEventRun+0x2e>
   d76da:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d76dc:	f3af 8000 	nop.w
   d76e0:	e7f2      	b.n	d76c8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d76e2:	f3af 8000 	nop.w
   d76e6:	bd08      	pop	{r3, pc}
	...

000d76f0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d76f0:	b508      	push	{r3, lr}
	serialEventRun();
   d76f2:	f7ff ffdf 	bl	d76b4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d76f6:	f7fe ff31 	bl	d655c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d76fa:	4b01      	ldr	r3, [pc, #4]	; (d7700 <_post_loop+0x10>)
   d76fc:	6018      	str	r0, [r3, #0]
   d76fe:	bd08      	pop	{r3, pc}
   d7700:	2003e714 	.word	0x2003e714

000d7704 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7704:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7706:	2300      	movs	r3, #0
   d7708:	9300      	str	r3, [sp, #0]
   d770a:	461a      	mov	r2, r3
   d770c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7710:	f7ff f8ce 	bl	d68b0 <system_ctrl_set_result>
}
   d7714:	b003      	add	sp, #12
   d7716:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d771c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d771c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d771e:	8843      	ldrh	r3, [r0, #2]
   d7720:	2b0a      	cmp	r3, #10
   d7722:	d008      	beq.n	d7736 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7724:	2b50      	cmp	r3, #80	; 0x50
   d7726:	d109      	bne.n	d773c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7728:	4b09      	ldr	r3, [pc, #36]	; (d7750 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d772a:	681b      	ldr	r3, [r3, #0]
   d772c:	b13b      	cbz	r3, d773e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d772e:	b003      	add	sp, #12
   d7730:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7734:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7736:	f7ff ffe5 	bl	d7704 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d773a:	e006      	b.n	d774a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d773c:	2300      	movs	r3, #0
   d773e:	9300      	str	r3, [sp, #0]
   d7740:	461a      	mov	r2, r3
   d7742:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7746:	f7ff f8b3 	bl	d68b0 <system_ctrl_set_result>
        break;
    }
}
   d774a:	b003      	add	sp, #12
   d774c:	f85d fb04 	ldr.w	pc, [sp], #4
   d7750:	2003e710 	.word	0x2003e710

000d7754 <module_user_init_hook>:

void module_user_init_hook()
{
   d7754:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7756:	f7fe fee9 	bl	d652c <HAL_RNG_GetRandomNumber>
   d775a:	4604      	mov	r4, r0
    srand(seed);
   d775c:	f000 ff5e 	bl	d861c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7760:	4b07      	ldr	r3, [pc, #28]	; (d7780 <module_user_init_hook+0x2c>)
   d7762:	b113      	cbz	r3, d776a <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d7764:	4620      	mov	r0, r4
   d7766:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d776a:	2100      	movs	r1, #0
   d776c:	4804      	ldr	r0, [pc, #16]	; (d7780 <module_user_init_hook+0x2c>)
   d776e:	f7ff f8c1 	bl	d68f4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7772:	2100      	movs	r1, #0
   d7774:	4803      	ldr	r0, [pc, #12]	; (d7784 <module_user_init_hook+0x30>)
}
   d7776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d777a:	f7ff b88f 	b.w	d689c <system_ctrl_set_app_request_handler>
   d777e:	bf00      	nop
   d7780:	00000000 	.word	0x00000000
   d7784:	000d771d 	.word	0x000d771d

000d7788 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7788:	b510      	push	{r4, lr}
   d778a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d778c:	480f      	ldr	r0, [pc, #60]	; (d77cc <pinAvailable+0x44>)
   d778e:	f7ff fe18 	bl	d73c2 <_ZN8SPIClass9isEnabledEv>
   d7792:	b128      	cbz	r0, d77a0 <pinAvailable+0x18>
   d7794:	f1a4 030b 	sub.w	r3, r4, #11
   d7798:	2b02      	cmp	r3, #2
   d779a:	d801      	bhi.n	d77a0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d779c:	2000      	movs	r0, #0
   d779e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d77a0:	f000 f840 	bl	d7824 <_Z19__fetch_global_Wirev>
   d77a4:	f7ff fa16 	bl	d6bd4 <_ZN7TwoWire9isEnabledEv>
   d77a8:	b108      	cbz	r0, d77ae <pinAvailable+0x26>
   d77aa:	2c01      	cmp	r4, #1
   d77ac:	d9f6      	bls.n	d779c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d77ae:	f7ff fed1 	bl	d7554 <_Z22__fetch_global_Serial1v>
   d77b2:	f7ff fecc 	bl	d754e <_ZN11USARTSerial9isEnabledEv>
   d77b6:	b118      	cbz	r0, d77c0 <pinAvailable+0x38>
   d77b8:	f1a4 0309 	sub.w	r3, r4, #9
   d77bc:	2b01      	cmp	r3, #1
   d77be:	d9ed      	bls.n	d779c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d77c0:	2c23      	cmp	r4, #35	; 0x23
   d77c2:	bf8c      	ite	hi
   d77c4:	2000      	movhi	r0, #0
   d77c6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d77c8:	bd10      	pop	{r4, pc}
   d77ca:	bf00      	nop
   d77cc:	2003e730 	.word	0x2003e730

000d77d0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d77d0:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d77d2:	b538      	push	{r3, r4, r5, lr}
   d77d4:	4604      	mov	r4, r0
   d77d6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d77d8:	d80a      	bhi.n	d77f0 <pinMode+0x20>
   d77da:	29ff      	cmp	r1, #255	; 0xff
   d77dc:	d008      	beq.n	d77f0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d77de:	f7ff ffd3 	bl	d7788 <pinAvailable>
   d77e2:	b128      	cbz	r0, d77f0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d77e4:	4629      	mov	r1, r5
   d77e6:	4620      	mov	r0, r4
}
   d77e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d77ec:	f7fe bed6 	b.w	d659c <HAL_Pin_Mode>
   d77f0:	bd38      	pop	{r3, r4, r5, pc}

000d77f2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d77f2:	b538      	push	{r3, r4, r5, lr}
   d77f4:	4604      	mov	r4, r0
   d77f6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d77f8:	f7fe fed8 	bl	d65ac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d77fc:	28ff      	cmp	r0, #255	; 0xff
   d77fe:	d010      	beq.n	d7822 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7800:	2806      	cmp	r0, #6
   d7802:	d804      	bhi.n	d780e <digitalWrite+0x1c>
   d7804:	234d      	movs	r3, #77	; 0x4d
   d7806:	fa23 f000 	lsr.w	r0, r3, r0
   d780a:	07c3      	lsls	r3, r0, #31
   d780c:	d409      	bmi.n	d7822 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d780e:	4620      	mov	r0, r4
   d7810:	f7ff ffba 	bl	d7788 <pinAvailable>
   d7814:	b128      	cbz	r0, d7822 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7816:	4629      	mov	r1, r5
   d7818:	4620      	mov	r0, r4
}
   d781a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d781e:	f7fe becd 	b.w	d65bc <HAL_GPIO_Write>
   d7822:	bd38      	pop	{r3, r4, r5, pc}

000d7824 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d7824:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d7826:	4d0b      	ldr	r5, [pc, #44]	; (d7854 <_Z19__fetch_global_Wirev+0x30>)
   d7828:	6829      	ldr	r1, [r5, #0]
   d782a:	f011 0401 	ands.w	r4, r1, #1
   d782e:	d10f      	bne.n	d7850 <_Z19__fetch_global_Wirev+0x2c>
   d7830:	4628      	mov	r0, r5
   d7832:	f7fc fc36 	bl	d40a2 <__cxa_guard_acquire>
   d7836:	b158      	cbz	r0, d7850 <_Z19__fetch_global_Wirev+0x2c>
   d7838:	4621      	mov	r1, r4
   d783a:	4807      	ldr	r0, [pc, #28]	; (d7858 <_Z19__fetch_global_Wirev+0x34>)
   d783c:	f7ff f996 	bl	d6b6c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7840:	4628      	mov	r0, r5
   d7842:	f7fc fc33 	bl	d40ac <__cxa_guard_release>
   d7846:	4a05      	ldr	r2, [pc, #20]	; (d785c <_Z19__fetch_global_Wirev+0x38>)
   d7848:	4905      	ldr	r1, [pc, #20]	; (d7860 <_Z19__fetch_global_Wirev+0x3c>)
   d784a:	4803      	ldr	r0, [pc, #12]	; (d7858 <_Z19__fetch_global_Wirev+0x34>)
   d784c:	f000 f82c 	bl	d78a8 <__aeabi_atexit>
	return wire;
}
   d7850:	4801      	ldr	r0, [pc, #4]	; (d7858 <_Z19__fetch_global_Wirev+0x34>)
   d7852:	bd38      	pop	{r3, r4, r5, pc}
   d7854:	2003e718 	.word	0x2003e718
   d7858:	2003e71c 	.word	0x2003e71c
   d785c:	2003df38 	.word	0x2003df38
   d7860:	000d6b15 	.word	0x000d6b15

000d7864 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7864:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7866:	4c0c      	ldr	r4, [pc, #48]	; (d7898 <_GLOBAL__sub_I_SPI+0x34>)
   d7868:	4e0c      	ldr	r6, [pc, #48]	; (d789c <_GLOBAL__sub_I_SPI+0x38>)
   d786a:	4d0d      	ldr	r5, [pc, #52]	; (d78a0 <_GLOBAL__sub_I_SPI+0x3c>)
   d786c:	2100      	movs	r1, #0
   d786e:	4620      	mov	r0, r4
   d7870:	f7ff fcec 	bl	d724c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7874:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7876:	4c0b      	ldr	r4, [pc, #44]	; (d78a4 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7878:	4632      	mov	r2, r6
   d787a:	4629      	mov	r1, r5
   d787c:	f000 f814 	bl	d78a8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7880:	2101      	movs	r1, #1
   d7882:	4620      	mov	r0, r4
   d7884:	f7ff fce2 	bl	d724c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7888:	4632      	mov	r2, r6
   d788a:	4629      	mov	r1, r5
   d788c:	4620      	mov	r0, r4
   d788e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7892:	f000 b809 	b.w	d78a8 <__aeabi_atexit>
   d7896:	bf00      	nop
   d7898:	2003e730 	.word	0x2003e730
   d789c:	2003df38 	.word	0x2003df38
   d78a0:	000d723d 	.word	0x000d723d
   d78a4:	2003e740 	.word	0x2003e740

000d78a8 <__aeabi_atexit>:
   d78a8:	460b      	mov	r3, r1
   d78aa:	4601      	mov	r1, r0
   d78ac:	4618      	mov	r0, r3
   d78ae:	f000 be85 	b.w	d85bc <__cxa_atexit>
	...

000d78b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d78b4:	4b24      	ldr	r3, [pc, #144]	; (d7948 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d78b6:	681a      	ldr	r2, [r3, #0]
   d78b8:	07d0      	lsls	r0, r2, #31
   d78ba:	bf5c      	itt	pl
   d78bc:	2201      	movpl	r2, #1
   d78be:	601a      	strpl	r2, [r3, #0]
   d78c0:	4b22      	ldr	r3, [pc, #136]	; (d794c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d78c2:	681a      	ldr	r2, [r3, #0]
   d78c4:	07d1      	lsls	r1, r2, #31
   d78c6:	bf5c      	itt	pl
   d78c8:	2201      	movpl	r2, #1
   d78ca:	601a      	strpl	r2, [r3, #0]
   d78cc:	4b20      	ldr	r3, [pc, #128]	; (d7950 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d78ce:	681a      	ldr	r2, [r3, #0]
   d78d0:	07d2      	lsls	r2, r2, #31
   d78d2:	bf5c      	itt	pl
   d78d4:	2201      	movpl	r2, #1
   d78d6:	601a      	strpl	r2, [r3, #0]
   d78d8:	4b1e      	ldr	r3, [pc, #120]	; (d7954 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d78da:	681a      	ldr	r2, [r3, #0]
   d78dc:	07d0      	lsls	r0, r2, #31
   d78de:	bf5c      	itt	pl
   d78e0:	2201      	movpl	r2, #1
   d78e2:	601a      	strpl	r2, [r3, #0]
   d78e4:	4b1c      	ldr	r3, [pc, #112]	; (d7958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d78e6:	681a      	ldr	r2, [r3, #0]
   d78e8:	07d1      	lsls	r1, r2, #31
   d78ea:	bf5c      	itt	pl
   d78ec:	2201      	movpl	r2, #1
   d78ee:	601a      	strpl	r2, [r3, #0]
   d78f0:	4b1a      	ldr	r3, [pc, #104]	; (d795c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d78f2:	681a      	ldr	r2, [r3, #0]
   d78f4:	07d2      	lsls	r2, r2, #31
   d78f6:	bf5c      	itt	pl
   d78f8:	2201      	movpl	r2, #1
   d78fa:	601a      	strpl	r2, [r3, #0]
   d78fc:	4b18      	ldr	r3, [pc, #96]	; (d7960 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d78fe:	681a      	ldr	r2, [r3, #0]
   d7900:	07d0      	lsls	r0, r2, #31
   d7902:	bf5c      	itt	pl
   d7904:	2201      	movpl	r2, #1
   d7906:	601a      	strpl	r2, [r3, #0]
   d7908:	4b16      	ldr	r3, [pc, #88]	; (d7964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d790a:	681a      	ldr	r2, [r3, #0]
   d790c:	07d1      	lsls	r1, r2, #31
   d790e:	bf5c      	itt	pl
   d7910:	2201      	movpl	r2, #1
   d7912:	601a      	strpl	r2, [r3, #0]
   d7914:	4b14      	ldr	r3, [pc, #80]	; (d7968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7916:	681a      	ldr	r2, [r3, #0]
   d7918:	07d2      	lsls	r2, r2, #31
   d791a:	bf5c      	itt	pl
   d791c:	2201      	movpl	r2, #1
   d791e:	601a      	strpl	r2, [r3, #0]
   d7920:	4b12      	ldr	r3, [pc, #72]	; (d796c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7922:	681a      	ldr	r2, [r3, #0]
   d7924:	07d0      	lsls	r0, r2, #31
   d7926:	bf5c      	itt	pl
   d7928:	2201      	movpl	r2, #1
   d792a:	601a      	strpl	r2, [r3, #0]
   d792c:	4b10      	ldr	r3, [pc, #64]	; (d7970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d792e:	681a      	ldr	r2, [r3, #0]
   d7930:	07d1      	lsls	r1, r2, #31
   d7932:	bf5c      	itt	pl
   d7934:	2201      	movpl	r2, #1
   d7936:	601a      	strpl	r2, [r3, #0]
   d7938:	4b0e      	ldr	r3, [pc, #56]	; (d7974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d793a:	681a      	ldr	r2, [r3, #0]
   d793c:	07d2      	lsls	r2, r2, #31
   d793e:	bf5c      	itt	pl
   d7940:	2201      	movpl	r2, #1
   d7942:	601a      	strpl	r2, [r3, #0]
   d7944:	4770      	bx	lr
   d7946:	bf00      	nop
   d7948:	2003e77c 	.word	0x2003e77c
   d794c:	2003e778 	.word	0x2003e778
   d7950:	2003e774 	.word	0x2003e774
   d7954:	2003e770 	.word	0x2003e770
   d7958:	2003e76c 	.word	0x2003e76c
   d795c:	2003e768 	.word	0x2003e768
   d7960:	2003e764 	.word	0x2003e764
   d7964:	2003e760 	.word	0x2003e760
   d7968:	2003e75c 	.word	0x2003e75c
   d796c:	2003e758 	.word	0x2003e758
   d7970:	2003e754 	.word	0x2003e754
   d7974:	2003e750 	.word	0x2003e750

000d7978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7978:	4b18      	ldr	r3, [pc, #96]	; (d79dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d797a:	681a      	ldr	r2, [r3, #0]
   d797c:	07d1      	lsls	r1, r2, #31
   d797e:	bf5c      	itt	pl
   d7980:	2201      	movpl	r2, #1
   d7982:	601a      	strpl	r2, [r3, #0]
   d7984:	4b16      	ldr	r3, [pc, #88]	; (d79e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7986:	681a      	ldr	r2, [r3, #0]
   d7988:	07d2      	lsls	r2, r2, #31
   d798a:	bf5c      	itt	pl
   d798c:	2201      	movpl	r2, #1
   d798e:	601a      	strpl	r2, [r3, #0]
   d7990:	4b14      	ldr	r3, [pc, #80]	; (d79e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7992:	681a      	ldr	r2, [r3, #0]
   d7994:	07d0      	lsls	r0, r2, #31
   d7996:	bf5c      	itt	pl
   d7998:	2201      	movpl	r2, #1
   d799a:	601a      	strpl	r2, [r3, #0]
   d799c:	4b12      	ldr	r3, [pc, #72]	; (d79e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d799e:	681a      	ldr	r2, [r3, #0]
   d79a0:	07d1      	lsls	r1, r2, #31
   d79a2:	bf5c      	itt	pl
   d79a4:	2201      	movpl	r2, #1
   d79a6:	601a      	strpl	r2, [r3, #0]
   d79a8:	4b10      	ldr	r3, [pc, #64]	; (d79ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d79aa:	681a      	ldr	r2, [r3, #0]
   d79ac:	07d2      	lsls	r2, r2, #31
   d79ae:	bf5c      	itt	pl
   d79b0:	2201      	movpl	r2, #1
   d79b2:	601a      	strpl	r2, [r3, #0]
   d79b4:	4b0e      	ldr	r3, [pc, #56]	; (d79f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d79b6:	681a      	ldr	r2, [r3, #0]
   d79b8:	07d0      	lsls	r0, r2, #31
   d79ba:	bf5c      	itt	pl
   d79bc:	2201      	movpl	r2, #1
   d79be:	601a      	strpl	r2, [r3, #0]
   d79c0:	4b0c      	ldr	r3, [pc, #48]	; (d79f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d79c2:	681a      	ldr	r2, [r3, #0]
   d79c4:	07d1      	lsls	r1, r2, #31
   d79c6:	bf5c      	itt	pl
   d79c8:	2201      	movpl	r2, #1
   d79ca:	601a      	strpl	r2, [r3, #0]
   d79cc:	4b0a      	ldr	r3, [pc, #40]	; (d79f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d79ce:	681a      	ldr	r2, [r3, #0]
   d79d0:	07d2      	lsls	r2, r2, #31
   d79d2:	bf5c      	itt	pl
   d79d4:	2201      	movpl	r2, #1
   d79d6:	601a      	strpl	r2, [r3, #0]
   d79d8:	4770      	bx	lr
   d79da:	bf00      	nop
   d79dc:	2003e79c 	.word	0x2003e79c
   d79e0:	2003e798 	.word	0x2003e798
   d79e4:	2003e794 	.word	0x2003e794
   d79e8:	2003e790 	.word	0x2003e790
   d79ec:	2003e78c 	.word	0x2003e78c
   d79f0:	2003e788 	.word	0x2003e788
   d79f4:	2003e784 	.word	0x2003e784
   d79f8:	2003e780 	.word	0x2003e780

000d79fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d79fc:	4b18      	ldr	r3, [pc, #96]	; (d7a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d79fe:	681a      	ldr	r2, [r3, #0]
   d7a00:	07d1      	lsls	r1, r2, #31
   d7a02:	bf5c      	itt	pl
   d7a04:	2201      	movpl	r2, #1
   d7a06:	601a      	strpl	r2, [r3, #0]
   d7a08:	4b16      	ldr	r3, [pc, #88]	; (d7a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7a0a:	681a      	ldr	r2, [r3, #0]
   d7a0c:	07d2      	lsls	r2, r2, #31
   d7a0e:	bf5c      	itt	pl
   d7a10:	2201      	movpl	r2, #1
   d7a12:	601a      	strpl	r2, [r3, #0]
   d7a14:	4b14      	ldr	r3, [pc, #80]	; (d7a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7a16:	681a      	ldr	r2, [r3, #0]
   d7a18:	07d0      	lsls	r0, r2, #31
   d7a1a:	bf5c      	itt	pl
   d7a1c:	2201      	movpl	r2, #1
   d7a1e:	601a      	strpl	r2, [r3, #0]
   d7a20:	4b12      	ldr	r3, [pc, #72]	; (d7a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7a22:	681a      	ldr	r2, [r3, #0]
   d7a24:	07d1      	lsls	r1, r2, #31
   d7a26:	bf5c      	itt	pl
   d7a28:	2201      	movpl	r2, #1
   d7a2a:	601a      	strpl	r2, [r3, #0]
   d7a2c:	4b10      	ldr	r3, [pc, #64]	; (d7a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7a2e:	681a      	ldr	r2, [r3, #0]
   d7a30:	07d2      	lsls	r2, r2, #31
   d7a32:	bf5c      	itt	pl
   d7a34:	2201      	movpl	r2, #1
   d7a36:	601a      	strpl	r2, [r3, #0]
   d7a38:	4b0e      	ldr	r3, [pc, #56]	; (d7a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7a3a:	681a      	ldr	r2, [r3, #0]
   d7a3c:	07d0      	lsls	r0, r2, #31
   d7a3e:	bf5c      	itt	pl
   d7a40:	2201      	movpl	r2, #1
   d7a42:	601a      	strpl	r2, [r3, #0]
   d7a44:	4b0c      	ldr	r3, [pc, #48]	; (d7a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7a46:	681a      	ldr	r2, [r3, #0]
   d7a48:	07d1      	lsls	r1, r2, #31
   d7a4a:	bf5c      	itt	pl
   d7a4c:	2201      	movpl	r2, #1
   d7a4e:	601a      	strpl	r2, [r3, #0]
   d7a50:	4b0a      	ldr	r3, [pc, #40]	; (d7a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7a52:	681a      	ldr	r2, [r3, #0]
   d7a54:	07d2      	lsls	r2, r2, #31
   d7a56:	bf5c      	itt	pl
   d7a58:	2201      	movpl	r2, #1
   d7a5a:	601a      	strpl	r2, [r3, #0]
   d7a5c:	4770      	bx	lr
   d7a5e:	bf00      	nop
   d7a60:	2003e7bc 	.word	0x2003e7bc
   d7a64:	2003e7b8 	.word	0x2003e7b8
   d7a68:	2003e7b4 	.word	0x2003e7b4
   d7a6c:	2003e7b0 	.word	0x2003e7b0
   d7a70:	2003e7ac 	.word	0x2003e7ac
   d7a74:	2003e7a8 	.word	0x2003e7a8
   d7a78:	2003e7a4 	.word	0x2003e7a4
   d7a7c:	2003e7a0 	.word	0x2003e7a0

000d7a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7a80:	4b24      	ldr	r3, [pc, #144]	; (d7b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7a82:	681a      	ldr	r2, [r3, #0]
   d7a84:	07d0      	lsls	r0, r2, #31
   d7a86:	bf5c      	itt	pl
   d7a88:	2201      	movpl	r2, #1
   d7a8a:	601a      	strpl	r2, [r3, #0]
   d7a8c:	4b22      	ldr	r3, [pc, #136]	; (d7b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7a8e:	681a      	ldr	r2, [r3, #0]
   d7a90:	07d1      	lsls	r1, r2, #31
   d7a92:	bf5c      	itt	pl
   d7a94:	2201      	movpl	r2, #1
   d7a96:	601a      	strpl	r2, [r3, #0]
   d7a98:	4b20      	ldr	r3, [pc, #128]	; (d7b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7a9a:	681a      	ldr	r2, [r3, #0]
   d7a9c:	07d2      	lsls	r2, r2, #31
   d7a9e:	bf5c      	itt	pl
   d7aa0:	2201      	movpl	r2, #1
   d7aa2:	601a      	strpl	r2, [r3, #0]
   d7aa4:	4b1e      	ldr	r3, [pc, #120]	; (d7b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7aa6:	681a      	ldr	r2, [r3, #0]
   d7aa8:	07d0      	lsls	r0, r2, #31
   d7aaa:	bf5c      	itt	pl
   d7aac:	2201      	movpl	r2, #1
   d7aae:	601a      	strpl	r2, [r3, #0]
   d7ab0:	4b1c      	ldr	r3, [pc, #112]	; (d7b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7ab2:	681a      	ldr	r2, [r3, #0]
   d7ab4:	07d1      	lsls	r1, r2, #31
   d7ab6:	bf5c      	itt	pl
   d7ab8:	2201      	movpl	r2, #1
   d7aba:	601a      	strpl	r2, [r3, #0]
   d7abc:	4b1a      	ldr	r3, [pc, #104]	; (d7b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7abe:	681a      	ldr	r2, [r3, #0]
   d7ac0:	07d2      	lsls	r2, r2, #31
   d7ac2:	bf5c      	itt	pl
   d7ac4:	2201      	movpl	r2, #1
   d7ac6:	601a      	strpl	r2, [r3, #0]
   d7ac8:	4b18      	ldr	r3, [pc, #96]	; (d7b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7aca:	681a      	ldr	r2, [r3, #0]
   d7acc:	07d0      	lsls	r0, r2, #31
   d7ace:	bf5c      	itt	pl
   d7ad0:	2201      	movpl	r2, #1
   d7ad2:	601a      	strpl	r2, [r3, #0]
   d7ad4:	4b16      	ldr	r3, [pc, #88]	; (d7b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7ad6:	681a      	ldr	r2, [r3, #0]
   d7ad8:	07d1      	lsls	r1, r2, #31
   d7ada:	bf5c      	itt	pl
   d7adc:	2201      	movpl	r2, #1
   d7ade:	601a      	strpl	r2, [r3, #0]
   d7ae0:	4b14      	ldr	r3, [pc, #80]	; (d7b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7ae2:	681a      	ldr	r2, [r3, #0]
   d7ae4:	07d2      	lsls	r2, r2, #31
   d7ae6:	bf5c      	itt	pl
   d7ae8:	2201      	movpl	r2, #1
   d7aea:	601a      	strpl	r2, [r3, #0]
   d7aec:	4b12      	ldr	r3, [pc, #72]	; (d7b38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7aee:	681a      	ldr	r2, [r3, #0]
   d7af0:	07d0      	lsls	r0, r2, #31
   d7af2:	bf5c      	itt	pl
   d7af4:	2201      	movpl	r2, #1
   d7af6:	601a      	strpl	r2, [r3, #0]
   d7af8:	4b10      	ldr	r3, [pc, #64]	; (d7b3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7afa:	681a      	ldr	r2, [r3, #0]
   d7afc:	07d1      	lsls	r1, r2, #31
   d7afe:	bf5c      	itt	pl
   d7b00:	2201      	movpl	r2, #1
   d7b02:	601a      	strpl	r2, [r3, #0]
   d7b04:	4b0e      	ldr	r3, [pc, #56]	; (d7b40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7b06:	681a      	ldr	r2, [r3, #0]
   d7b08:	07d2      	lsls	r2, r2, #31
   d7b0a:	bf5c      	itt	pl
   d7b0c:	2201      	movpl	r2, #1
   d7b0e:	601a      	strpl	r2, [r3, #0]
   d7b10:	4770      	bx	lr
   d7b12:	bf00      	nop
   d7b14:	2003e7ec 	.word	0x2003e7ec
   d7b18:	2003e7e8 	.word	0x2003e7e8
   d7b1c:	2003e7e4 	.word	0x2003e7e4
   d7b20:	2003e7e0 	.word	0x2003e7e0
   d7b24:	2003e7dc 	.word	0x2003e7dc
   d7b28:	2003e7d8 	.word	0x2003e7d8
   d7b2c:	2003e7d4 	.word	0x2003e7d4
   d7b30:	2003e7d0 	.word	0x2003e7d0
   d7b34:	2003e7cc 	.word	0x2003e7cc
   d7b38:	2003e7c8 	.word	0x2003e7c8
   d7b3c:	2003e7c4 	.word	0x2003e7c4
   d7b40:	2003e7c0 	.word	0x2003e7c0

000d7b44 <__aeabi_drsub>:
   d7b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7b48:	e002      	b.n	d7b50 <__adddf3>
   d7b4a:	bf00      	nop

000d7b4c <__aeabi_dsub>:
   d7b4c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7b50 <__adddf3>:
   d7b50:	b530      	push	{r4, r5, lr}
   d7b52:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7b56:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7b5a:	ea94 0f05 	teq	r4, r5
   d7b5e:	bf08      	it	eq
   d7b60:	ea90 0f02 	teqeq	r0, r2
   d7b64:	bf1f      	itttt	ne
   d7b66:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7b6a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7b6e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7b72:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7b76:	f000 80e2 	beq.w	d7d3e <__adddf3+0x1ee>
   d7b7a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7b7e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7b82:	bfb8      	it	lt
   d7b84:	426d      	neglt	r5, r5
   d7b86:	dd0c      	ble.n	d7ba2 <__adddf3+0x52>
   d7b88:	442c      	add	r4, r5
   d7b8a:	ea80 0202 	eor.w	r2, r0, r2
   d7b8e:	ea81 0303 	eor.w	r3, r1, r3
   d7b92:	ea82 0000 	eor.w	r0, r2, r0
   d7b96:	ea83 0101 	eor.w	r1, r3, r1
   d7b9a:	ea80 0202 	eor.w	r2, r0, r2
   d7b9e:	ea81 0303 	eor.w	r3, r1, r3
   d7ba2:	2d36      	cmp	r5, #54	; 0x36
   d7ba4:	bf88      	it	hi
   d7ba6:	bd30      	pophi	{r4, r5, pc}
   d7ba8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7bac:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7bb0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7bb4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7bb8:	d002      	beq.n	d7bc0 <__adddf3+0x70>
   d7bba:	4240      	negs	r0, r0
   d7bbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7bc0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7bc4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7bc8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7bcc:	d002      	beq.n	d7bd4 <__adddf3+0x84>
   d7bce:	4252      	negs	r2, r2
   d7bd0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7bd4:	ea94 0f05 	teq	r4, r5
   d7bd8:	f000 80a7 	beq.w	d7d2a <__adddf3+0x1da>
   d7bdc:	f1a4 0401 	sub.w	r4, r4, #1
   d7be0:	f1d5 0e20 	rsbs	lr, r5, #32
   d7be4:	db0d      	blt.n	d7c02 <__adddf3+0xb2>
   d7be6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7bea:	fa22 f205 	lsr.w	r2, r2, r5
   d7bee:	1880      	adds	r0, r0, r2
   d7bf0:	f141 0100 	adc.w	r1, r1, #0
   d7bf4:	fa03 f20e 	lsl.w	r2, r3, lr
   d7bf8:	1880      	adds	r0, r0, r2
   d7bfa:	fa43 f305 	asr.w	r3, r3, r5
   d7bfe:	4159      	adcs	r1, r3
   d7c00:	e00e      	b.n	d7c20 <__adddf3+0xd0>
   d7c02:	f1a5 0520 	sub.w	r5, r5, #32
   d7c06:	f10e 0e20 	add.w	lr, lr, #32
   d7c0a:	2a01      	cmp	r2, #1
   d7c0c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7c10:	bf28      	it	cs
   d7c12:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7c16:	fa43 f305 	asr.w	r3, r3, r5
   d7c1a:	18c0      	adds	r0, r0, r3
   d7c1c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7c20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7c24:	d507      	bpl.n	d7c36 <__adddf3+0xe6>
   d7c26:	f04f 0e00 	mov.w	lr, #0
   d7c2a:	f1dc 0c00 	rsbs	ip, ip, #0
   d7c2e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7c32:	eb6e 0101 	sbc.w	r1, lr, r1
   d7c36:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7c3a:	d31b      	bcc.n	d7c74 <__adddf3+0x124>
   d7c3c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7c40:	d30c      	bcc.n	d7c5c <__adddf3+0x10c>
   d7c42:	0849      	lsrs	r1, r1, #1
   d7c44:	ea5f 0030 	movs.w	r0, r0, rrx
   d7c48:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7c4c:	f104 0401 	add.w	r4, r4, #1
   d7c50:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7c54:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7c58:	f080 809a 	bcs.w	d7d90 <__adddf3+0x240>
   d7c5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7c60:	bf08      	it	eq
   d7c62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7c66:	f150 0000 	adcs.w	r0, r0, #0
   d7c6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7c6e:	ea41 0105 	orr.w	r1, r1, r5
   d7c72:	bd30      	pop	{r4, r5, pc}
   d7c74:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7c78:	4140      	adcs	r0, r0
   d7c7a:	eb41 0101 	adc.w	r1, r1, r1
   d7c7e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7c82:	f1a4 0401 	sub.w	r4, r4, #1
   d7c86:	d1e9      	bne.n	d7c5c <__adddf3+0x10c>
   d7c88:	f091 0f00 	teq	r1, #0
   d7c8c:	bf04      	itt	eq
   d7c8e:	4601      	moveq	r1, r0
   d7c90:	2000      	moveq	r0, #0
   d7c92:	fab1 f381 	clz	r3, r1
   d7c96:	bf08      	it	eq
   d7c98:	3320      	addeq	r3, #32
   d7c9a:	f1a3 030b 	sub.w	r3, r3, #11
   d7c9e:	f1b3 0220 	subs.w	r2, r3, #32
   d7ca2:	da0c      	bge.n	d7cbe <__adddf3+0x16e>
   d7ca4:	320c      	adds	r2, #12
   d7ca6:	dd08      	ble.n	d7cba <__adddf3+0x16a>
   d7ca8:	f102 0c14 	add.w	ip, r2, #20
   d7cac:	f1c2 020c 	rsb	r2, r2, #12
   d7cb0:	fa01 f00c 	lsl.w	r0, r1, ip
   d7cb4:	fa21 f102 	lsr.w	r1, r1, r2
   d7cb8:	e00c      	b.n	d7cd4 <__adddf3+0x184>
   d7cba:	f102 0214 	add.w	r2, r2, #20
   d7cbe:	bfd8      	it	le
   d7cc0:	f1c2 0c20 	rsble	ip, r2, #32
   d7cc4:	fa01 f102 	lsl.w	r1, r1, r2
   d7cc8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7ccc:	bfdc      	itt	le
   d7cce:	ea41 010c 	orrle.w	r1, r1, ip
   d7cd2:	4090      	lslle	r0, r2
   d7cd4:	1ae4      	subs	r4, r4, r3
   d7cd6:	bfa2      	ittt	ge
   d7cd8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7cdc:	4329      	orrge	r1, r5
   d7cde:	bd30      	popge	{r4, r5, pc}
   d7ce0:	ea6f 0404 	mvn.w	r4, r4
   d7ce4:	3c1f      	subs	r4, #31
   d7ce6:	da1c      	bge.n	d7d22 <__adddf3+0x1d2>
   d7ce8:	340c      	adds	r4, #12
   d7cea:	dc0e      	bgt.n	d7d0a <__adddf3+0x1ba>
   d7cec:	f104 0414 	add.w	r4, r4, #20
   d7cf0:	f1c4 0220 	rsb	r2, r4, #32
   d7cf4:	fa20 f004 	lsr.w	r0, r0, r4
   d7cf8:	fa01 f302 	lsl.w	r3, r1, r2
   d7cfc:	ea40 0003 	orr.w	r0, r0, r3
   d7d00:	fa21 f304 	lsr.w	r3, r1, r4
   d7d04:	ea45 0103 	orr.w	r1, r5, r3
   d7d08:	bd30      	pop	{r4, r5, pc}
   d7d0a:	f1c4 040c 	rsb	r4, r4, #12
   d7d0e:	f1c4 0220 	rsb	r2, r4, #32
   d7d12:	fa20 f002 	lsr.w	r0, r0, r2
   d7d16:	fa01 f304 	lsl.w	r3, r1, r4
   d7d1a:	ea40 0003 	orr.w	r0, r0, r3
   d7d1e:	4629      	mov	r1, r5
   d7d20:	bd30      	pop	{r4, r5, pc}
   d7d22:	fa21 f004 	lsr.w	r0, r1, r4
   d7d26:	4629      	mov	r1, r5
   d7d28:	bd30      	pop	{r4, r5, pc}
   d7d2a:	f094 0f00 	teq	r4, #0
   d7d2e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7d32:	bf06      	itte	eq
   d7d34:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7d38:	3401      	addeq	r4, #1
   d7d3a:	3d01      	subne	r5, #1
   d7d3c:	e74e      	b.n	d7bdc <__adddf3+0x8c>
   d7d3e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7d42:	bf18      	it	ne
   d7d44:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7d48:	d029      	beq.n	d7d9e <__adddf3+0x24e>
   d7d4a:	ea94 0f05 	teq	r4, r5
   d7d4e:	bf08      	it	eq
   d7d50:	ea90 0f02 	teqeq	r0, r2
   d7d54:	d005      	beq.n	d7d62 <__adddf3+0x212>
   d7d56:	ea54 0c00 	orrs.w	ip, r4, r0
   d7d5a:	bf04      	itt	eq
   d7d5c:	4619      	moveq	r1, r3
   d7d5e:	4610      	moveq	r0, r2
   d7d60:	bd30      	pop	{r4, r5, pc}
   d7d62:	ea91 0f03 	teq	r1, r3
   d7d66:	bf1e      	ittt	ne
   d7d68:	2100      	movne	r1, #0
   d7d6a:	2000      	movne	r0, #0
   d7d6c:	bd30      	popne	{r4, r5, pc}
   d7d6e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7d72:	d105      	bne.n	d7d80 <__adddf3+0x230>
   d7d74:	0040      	lsls	r0, r0, #1
   d7d76:	4149      	adcs	r1, r1
   d7d78:	bf28      	it	cs
   d7d7a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7d7e:	bd30      	pop	{r4, r5, pc}
   d7d80:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7d84:	bf3c      	itt	cc
   d7d86:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7d8a:	bd30      	popcc	{r4, r5, pc}
   d7d8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7d90:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7d94:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7d98:	f04f 0000 	mov.w	r0, #0
   d7d9c:	bd30      	pop	{r4, r5, pc}
   d7d9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7da2:	bf1a      	itte	ne
   d7da4:	4619      	movne	r1, r3
   d7da6:	4610      	movne	r0, r2
   d7da8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7dac:	bf1c      	itt	ne
   d7dae:	460b      	movne	r3, r1
   d7db0:	4602      	movne	r2, r0
   d7db2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7db6:	bf06      	itte	eq
   d7db8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7dbc:	ea91 0f03 	teqeq	r1, r3
   d7dc0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7dc4:	bd30      	pop	{r4, r5, pc}
   d7dc6:	bf00      	nop

000d7dc8 <__aeabi_ui2d>:
   d7dc8:	f090 0f00 	teq	r0, #0
   d7dcc:	bf04      	itt	eq
   d7dce:	2100      	moveq	r1, #0
   d7dd0:	4770      	bxeq	lr
   d7dd2:	b530      	push	{r4, r5, lr}
   d7dd4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7dd8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7ddc:	f04f 0500 	mov.w	r5, #0
   d7de0:	f04f 0100 	mov.w	r1, #0
   d7de4:	e750      	b.n	d7c88 <__adddf3+0x138>
   d7de6:	bf00      	nop

000d7de8 <__aeabi_i2d>:
   d7de8:	f090 0f00 	teq	r0, #0
   d7dec:	bf04      	itt	eq
   d7dee:	2100      	moveq	r1, #0
   d7df0:	4770      	bxeq	lr
   d7df2:	b530      	push	{r4, r5, lr}
   d7df4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7df8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7dfc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7e00:	bf48      	it	mi
   d7e02:	4240      	negmi	r0, r0
   d7e04:	f04f 0100 	mov.w	r1, #0
   d7e08:	e73e      	b.n	d7c88 <__adddf3+0x138>
   d7e0a:	bf00      	nop

000d7e0c <__aeabi_f2d>:
   d7e0c:	0042      	lsls	r2, r0, #1
   d7e0e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7e12:	ea4f 0131 	mov.w	r1, r1, rrx
   d7e16:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7e1a:	bf1f      	itttt	ne
   d7e1c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7e20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7e24:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7e28:	4770      	bxne	lr
   d7e2a:	f092 0f00 	teq	r2, #0
   d7e2e:	bf14      	ite	ne
   d7e30:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7e34:	4770      	bxeq	lr
   d7e36:	b530      	push	{r4, r5, lr}
   d7e38:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7e3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7e40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7e44:	e720      	b.n	d7c88 <__adddf3+0x138>
   d7e46:	bf00      	nop

000d7e48 <__aeabi_ul2d>:
   d7e48:	ea50 0201 	orrs.w	r2, r0, r1
   d7e4c:	bf08      	it	eq
   d7e4e:	4770      	bxeq	lr
   d7e50:	b530      	push	{r4, r5, lr}
   d7e52:	f04f 0500 	mov.w	r5, #0
   d7e56:	e00a      	b.n	d7e6e <__aeabi_l2d+0x16>

000d7e58 <__aeabi_l2d>:
   d7e58:	ea50 0201 	orrs.w	r2, r0, r1
   d7e5c:	bf08      	it	eq
   d7e5e:	4770      	bxeq	lr
   d7e60:	b530      	push	{r4, r5, lr}
   d7e62:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7e66:	d502      	bpl.n	d7e6e <__aeabi_l2d+0x16>
   d7e68:	4240      	negs	r0, r0
   d7e6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7e6e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7e72:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7e76:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7e7a:	f43f aedc 	beq.w	d7c36 <__adddf3+0xe6>
   d7e7e:	f04f 0203 	mov.w	r2, #3
   d7e82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7e86:	bf18      	it	ne
   d7e88:	3203      	addne	r2, #3
   d7e8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7e8e:	bf18      	it	ne
   d7e90:	3203      	addne	r2, #3
   d7e92:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7e96:	f1c2 0320 	rsb	r3, r2, #32
   d7e9a:	fa00 fc03 	lsl.w	ip, r0, r3
   d7e9e:	fa20 f002 	lsr.w	r0, r0, r2
   d7ea2:	fa01 fe03 	lsl.w	lr, r1, r3
   d7ea6:	ea40 000e 	orr.w	r0, r0, lr
   d7eaa:	fa21 f102 	lsr.w	r1, r1, r2
   d7eae:	4414      	add	r4, r2
   d7eb0:	e6c1      	b.n	d7c36 <__adddf3+0xe6>
   d7eb2:	bf00      	nop

000d7eb4 <__aeabi_dmul>:
   d7eb4:	b570      	push	{r4, r5, r6, lr}
   d7eb6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7eba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7ebe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7ec2:	bf1d      	ittte	ne
   d7ec4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7ec8:	ea94 0f0c 	teqne	r4, ip
   d7ecc:	ea95 0f0c 	teqne	r5, ip
   d7ed0:	f000 f8de 	bleq	d8090 <__aeabi_dmul+0x1dc>
   d7ed4:	442c      	add	r4, r5
   d7ed6:	ea81 0603 	eor.w	r6, r1, r3
   d7eda:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7ede:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7ee2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7ee6:	bf18      	it	ne
   d7ee8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7eec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7ef0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7ef4:	d038      	beq.n	d7f68 <__aeabi_dmul+0xb4>
   d7ef6:	fba0 ce02 	umull	ip, lr, r0, r2
   d7efa:	f04f 0500 	mov.w	r5, #0
   d7efe:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7f02:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7f06:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7f0a:	f04f 0600 	mov.w	r6, #0
   d7f0e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7f12:	f09c 0f00 	teq	ip, #0
   d7f16:	bf18      	it	ne
   d7f18:	f04e 0e01 	orrne.w	lr, lr, #1
   d7f1c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7f20:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7f24:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7f28:	d204      	bcs.n	d7f34 <__aeabi_dmul+0x80>
   d7f2a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7f2e:	416d      	adcs	r5, r5
   d7f30:	eb46 0606 	adc.w	r6, r6, r6
   d7f34:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7f38:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7f3c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7f40:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7f44:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7f48:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7f4c:	bf88      	it	hi
   d7f4e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7f52:	d81e      	bhi.n	d7f92 <__aeabi_dmul+0xde>
   d7f54:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7f58:	bf08      	it	eq
   d7f5a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7f5e:	f150 0000 	adcs.w	r0, r0, #0
   d7f62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7f66:	bd70      	pop	{r4, r5, r6, pc}
   d7f68:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7f6c:	ea46 0101 	orr.w	r1, r6, r1
   d7f70:	ea40 0002 	orr.w	r0, r0, r2
   d7f74:	ea81 0103 	eor.w	r1, r1, r3
   d7f78:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7f7c:	bfc2      	ittt	gt
   d7f7e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7f82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7f86:	bd70      	popgt	{r4, r5, r6, pc}
   d7f88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7f8c:	f04f 0e00 	mov.w	lr, #0
   d7f90:	3c01      	subs	r4, #1
   d7f92:	f300 80ab 	bgt.w	d80ec <__aeabi_dmul+0x238>
   d7f96:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7f9a:	bfde      	ittt	le
   d7f9c:	2000      	movle	r0, #0
   d7f9e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7fa2:	bd70      	pople	{r4, r5, r6, pc}
   d7fa4:	f1c4 0400 	rsb	r4, r4, #0
   d7fa8:	3c20      	subs	r4, #32
   d7faa:	da35      	bge.n	d8018 <__aeabi_dmul+0x164>
   d7fac:	340c      	adds	r4, #12
   d7fae:	dc1b      	bgt.n	d7fe8 <__aeabi_dmul+0x134>
   d7fb0:	f104 0414 	add.w	r4, r4, #20
   d7fb4:	f1c4 0520 	rsb	r5, r4, #32
   d7fb8:	fa00 f305 	lsl.w	r3, r0, r5
   d7fbc:	fa20 f004 	lsr.w	r0, r0, r4
   d7fc0:	fa01 f205 	lsl.w	r2, r1, r5
   d7fc4:	ea40 0002 	orr.w	r0, r0, r2
   d7fc8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7fcc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7fd0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7fd4:	fa21 f604 	lsr.w	r6, r1, r4
   d7fd8:	eb42 0106 	adc.w	r1, r2, r6
   d7fdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7fe0:	bf08      	it	eq
   d7fe2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7fe6:	bd70      	pop	{r4, r5, r6, pc}
   d7fe8:	f1c4 040c 	rsb	r4, r4, #12
   d7fec:	f1c4 0520 	rsb	r5, r4, #32
   d7ff0:	fa00 f304 	lsl.w	r3, r0, r4
   d7ff4:	fa20 f005 	lsr.w	r0, r0, r5
   d7ff8:	fa01 f204 	lsl.w	r2, r1, r4
   d7ffc:	ea40 0002 	orr.w	r0, r0, r2
   d8000:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8004:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8008:	f141 0100 	adc.w	r1, r1, #0
   d800c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8010:	bf08      	it	eq
   d8012:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8016:	bd70      	pop	{r4, r5, r6, pc}
   d8018:	f1c4 0520 	rsb	r5, r4, #32
   d801c:	fa00 f205 	lsl.w	r2, r0, r5
   d8020:	ea4e 0e02 	orr.w	lr, lr, r2
   d8024:	fa20 f304 	lsr.w	r3, r0, r4
   d8028:	fa01 f205 	lsl.w	r2, r1, r5
   d802c:	ea43 0302 	orr.w	r3, r3, r2
   d8030:	fa21 f004 	lsr.w	r0, r1, r4
   d8034:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8038:	fa21 f204 	lsr.w	r2, r1, r4
   d803c:	ea20 0002 	bic.w	r0, r0, r2
   d8040:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8044:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8048:	bf08      	it	eq
   d804a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d804e:	bd70      	pop	{r4, r5, r6, pc}
   d8050:	f094 0f00 	teq	r4, #0
   d8054:	d10f      	bne.n	d8076 <__aeabi_dmul+0x1c2>
   d8056:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d805a:	0040      	lsls	r0, r0, #1
   d805c:	eb41 0101 	adc.w	r1, r1, r1
   d8060:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8064:	bf08      	it	eq
   d8066:	3c01      	subeq	r4, #1
   d8068:	d0f7      	beq.n	d805a <__aeabi_dmul+0x1a6>
   d806a:	ea41 0106 	orr.w	r1, r1, r6
   d806e:	f095 0f00 	teq	r5, #0
   d8072:	bf18      	it	ne
   d8074:	4770      	bxne	lr
   d8076:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d807a:	0052      	lsls	r2, r2, #1
   d807c:	eb43 0303 	adc.w	r3, r3, r3
   d8080:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8084:	bf08      	it	eq
   d8086:	3d01      	subeq	r5, #1
   d8088:	d0f7      	beq.n	d807a <__aeabi_dmul+0x1c6>
   d808a:	ea43 0306 	orr.w	r3, r3, r6
   d808e:	4770      	bx	lr
   d8090:	ea94 0f0c 	teq	r4, ip
   d8094:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8098:	bf18      	it	ne
   d809a:	ea95 0f0c 	teqne	r5, ip
   d809e:	d00c      	beq.n	d80ba <__aeabi_dmul+0x206>
   d80a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d80a4:	bf18      	it	ne
   d80a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d80aa:	d1d1      	bne.n	d8050 <__aeabi_dmul+0x19c>
   d80ac:	ea81 0103 	eor.w	r1, r1, r3
   d80b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d80b4:	f04f 0000 	mov.w	r0, #0
   d80b8:	bd70      	pop	{r4, r5, r6, pc}
   d80ba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d80be:	bf06      	itte	eq
   d80c0:	4610      	moveq	r0, r2
   d80c2:	4619      	moveq	r1, r3
   d80c4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d80c8:	d019      	beq.n	d80fe <__aeabi_dmul+0x24a>
   d80ca:	ea94 0f0c 	teq	r4, ip
   d80ce:	d102      	bne.n	d80d6 <__aeabi_dmul+0x222>
   d80d0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d80d4:	d113      	bne.n	d80fe <__aeabi_dmul+0x24a>
   d80d6:	ea95 0f0c 	teq	r5, ip
   d80da:	d105      	bne.n	d80e8 <__aeabi_dmul+0x234>
   d80dc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d80e0:	bf1c      	itt	ne
   d80e2:	4610      	movne	r0, r2
   d80e4:	4619      	movne	r1, r3
   d80e6:	d10a      	bne.n	d80fe <__aeabi_dmul+0x24a>
   d80e8:	ea81 0103 	eor.w	r1, r1, r3
   d80ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d80f0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d80f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d80f8:	f04f 0000 	mov.w	r0, #0
   d80fc:	bd70      	pop	{r4, r5, r6, pc}
   d80fe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8102:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8106:	bd70      	pop	{r4, r5, r6, pc}

000d8108 <__aeabi_ddiv>:
   d8108:	b570      	push	{r4, r5, r6, lr}
   d810a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d810e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8112:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8116:	bf1d      	ittte	ne
   d8118:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d811c:	ea94 0f0c 	teqne	r4, ip
   d8120:	ea95 0f0c 	teqne	r5, ip
   d8124:	f000 f8a7 	bleq	d8276 <__aeabi_ddiv+0x16e>
   d8128:	eba4 0405 	sub.w	r4, r4, r5
   d812c:	ea81 0e03 	eor.w	lr, r1, r3
   d8130:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8134:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8138:	f000 8088 	beq.w	d824c <__aeabi_ddiv+0x144>
   d813c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8140:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8144:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8148:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d814c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8150:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8154:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8158:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d815c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8160:	429d      	cmp	r5, r3
   d8162:	bf08      	it	eq
   d8164:	4296      	cmpeq	r6, r2
   d8166:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d816a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d816e:	d202      	bcs.n	d8176 <__aeabi_ddiv+0x6e>
   d8170:	085b      	lsrs	r3, r3, #1
   d8172:	ea4f 0232 	mov.w	r2, r2, rrx
   d8176:	1ab6      	subs	r6, r6, r2
   d8178:	eb65 0503 	sbc.w	r5, r5, r3
   d817c:	085b      	lsrs	r3, r3, #1
   d817e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8182:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8186:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d818a:	ebb6 0e02 	subs.w	lr, r6, r2
   d818e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8192:	bf22      	ittt	cs
   d8194:	1ab6      	subcs	r6, r6, r2
   d8196:	4675      	movcs	r5, lr
   d8198:	ea40 000c 	orrcs.w	r0, r0, ip
   d819c:	085b      	lsrs	r3, r3, #1
   d819e:	ea4f 0232 	mov.w	r2, r2, rrx
   d81a2:	ebb6 0e02 	subs.w	lr, r6, r2
   d81a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d81aa:	bf22      	ittt	cs
   d81ac:	1ab6      	subcs	r6, r6, r2
   d81ae:	4675      	movcs	r5, lr
   d81b0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d81b4:	085b      	lsrs	r3, r3, #1
   d81b6:	ea4f 0232 	mov.w	r2, r2, rrx
   d81ba:	ebb6 0e02 	subs.w	lr, r6, r2
   d81be:	eb75 0e03 	sbcs.w	lr, r5, r3
   d81c2:	bf22      	ittt	cs
   d81c4:	1ab6      	subcs	r6, r6, r2
   d81c6:	4675      	movcs	r5, lr
   d81c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d81cc:	085b      	lsrs	r3, r3, #1
   d81ce:	ea4f 0232 	mov.w	r2, r2, rrx
   d81d2:	ebb6 0e02 	subs.w	lr, r6, r2
   d81d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d81da:	bf22      	ittt	cs
   d81dc:	1ab6      	subcs	r6, r6, r2
   d81de:	4675      	movcs	r5, lr
   d81e0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d81e4:	ea55 0e06 	orrs.w	lr, r5, r6
   d81e8:	d018      	beq.n	d821c <__aeabi_ddiv+0x114>
   d81ea:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d81ee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d81f2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d81f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d81fa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d81fe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8202:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8206:	d1c0      	bne.n	d818a <__aeabi_ddiv+0x82>
   d8208:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d820c:	d10b      	bne.n	d8226 <__aeabi_ddiv+0x11e>
   d820e:	ea41 0100 	orr.w	r1, r1, r0
   d8212:	f04f 0000 	mov.w	r0, #0
   d8216:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d821a:	e7b6      	b.n	d818a <__aeabi_ddiv+0x82>
   d821c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8220:	bf04      	itt	eq
   d8222:	4301      	orreq	r1, r0
   d8224:	2000      	moveq	r0, #0
   d8226:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d822a:	bf88      	it	hi
   d822c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8230:	f63f aeaf 	bhi.w	d7f92 <__aeabi_dmul+0xde>
   d8234:	ebb5 0c03 	subs.w	ip, r5, r3
   d8238:	bf04      	itt	eq
   d823a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d823e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8242:	f150 0000 	adcs.w	r0, r0, #0
   d8246:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d824a:	bd70      	pop	{r4, r5, r6, pc}
   d824c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8250:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8254:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8258:	bfc2      	ittt	gt
   d825a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d825e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8262:	bd70      	popgt	{r4, r5, r6, pc}
   d8264:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8268:	f04f 0e00 	mov.w	lr, #0
   d826c:	3c01      	subs	r4, #1
   d826e:	e690      	b.n	d7f92 <__aeabi_dmul+0xde>
   d8270:	ea45 0e06 	orr.w	lr, r5, r6
   d8274:	e68d      	b.n	d7f92 <__aeabi_dmul+0xde>
   d8276:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d827a:	ea94 0f0c 	teq	r4, ip
   d827e:	bf08      	it	eq
   d8280:	ea95 0f0c 	teqeq	r5, ip
   d8284:	f43f af3b 	beq.w	d80fe <__aeabi_dmul+0x24a>
   d8288:	ea94 0f0c 	teq	r4, ip
   d828c:	d10a      	bne.n	d82a4 <__aeabi_ddiv+0x19c>
   d828e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8292:	f47f af34 	bne.w	d80fe <__aeabi_dmul+0x24a>
   d8296:	ea95 0f0c 	teq	r5, ip
   d829a:	f47f af25 	bne.w	d80e8 <__aeabi_dmul+0x234>
   d829e:	4610      	mov	r0, r2
   d82a0:	4619      	mov	r1, r3
   d82a2:	e72c      	b.n	d80fe <__aeabi_dmul+0x24a>
   d82a4:	ea95 0f0c 	teq	r5, ip
   d82a8:	d106      	bne.n	d82b8 <__aeabi_ddiv+0x1b0>
   d82aa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d82ae:	f43f aefd 	beq.w	d80ac <__aeabi_dmul+0x1f8>
   d82b2:	4610      	mov	r0, r2
   d82b4:	4619      	mov	r1, r3
   d82b6:	e722      	b.n	d80fe <__aeabi_dmul+0x24a>
   d82b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d82bc:	bf18      	it	ne
   d82be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d82c2:	f47f aec5 	bne.w	d8050 <__aeabi_dmul+0x19c>
   d82c6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d82ca:	f47f af0d 	bne.w	d80e8 <__aeabi_dmul+0x234>
   d82ce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d82d2:	f47f aeeb 	bne.w	d80ac <__aeabi_dmul+0x1f8>
   d82d6:	e712      	b.n	d80fe <__aeabi_dmul+0x24a>

000d82d8 <__gedf2>:
   d82d8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d82dc:	e006      	b.n	d82ec <__cmpdf2+0x4>
   d82de:	bf00      	nop

000d82e0 <__ledf2>:
   d82e0:	f04f 0c01 	mov.w	ip, #1
   d82e4:	e002      	b.n	d82ec <__cmpdf2+0x4>
   d82e6:	bf00      	nop

000d82e8 <__cmpdf2>:
   d82e8:	f04f 0c01 	mov.w	ip, #1
   d82ec:	f84d cd04 	str.w	ip, [sp, #-4]!
   d82f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d82f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d82f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d82fc:	bf18      	it	ne
   d82fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8302:	d01b      	beq.n	d833c <__cmpdf2+0x54>
   d8304:	b001      	add	sp, #4
   d8306:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d830a:	bf0c      	ite	eq
   d830c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8310:	ea91 0f03 	teqne	r1, r3
   d8314:	bf02      	ittt	eq
   d8316:	ea90 0f02 	teqeq	r0, r2
   d831a:	2000      	moveq	r0, #0
   d831c:	4770      	bxeq	lr
   d831e:	f110 0f00 	cmn.w	r0, #0
   d8322:	ea91 0f03 	teq	r1, r3
   d8326:	bf58      	it	pl
   d8328:	4299      	cmppl	r1, r3
   d832a:	bf08      	it	eq
   d832c:	4290      	cmpeq	r0, r2
   d832e:	bf2c      	ite	cs
   d8330:	17d8      	asrcs	r0, r3, #31
   d8332:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8336:	f040 0001 	orr.w	r0, r0, #1
   d833a:	4770      	bx	lr
   d833c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8340:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8344:	d102      	bne.n	d834c <__cmpdf2+0x64>
   d8346:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d834a:	d107      	bne.n	d835c <__cmpdf2+0x74>
   d834c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8350:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8354:	d1d6      	bne.n	d8304 <__cmpdf2+0x1c>
   d8356:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d835a:	d0d3      	beq.n	d8304 <__cmpdf2+0x1c>
   d835c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8360:	4770      	bx	lr
   d8362:	bf00      	nop

000d8364 <__aeabi_cdrcmple>:
   d8364:	4684      	mov	ip, r0
   d8366:	4610      	mov	r0, r2
   d8368:	4662      	mov	r2, ip
   d836a:	468c      	mov	ip, r1
   d836c:	4619      	mov	r1, r3
   d836e:	4663      	mov	r3, ip
   d8370:	e000      	b.n	d8374 <__aeabi_cdcmpeq>
   d8372:	bf00      	nop

000d8374 <__aeabi_cdcmpeq>:
   d8374:	b501      	push	{r0, lr}
   d8376:	f7ff ffb7 	bl	d82e8 <__cmpdf2>
   d837a:	2800      	cmp	r0, #0
   d837c:	bf48      	it	mi
   d837e:	f110 0f00 	cmnmi.w	r0, #0
   d8382:	bd01      	pop	{r0, pc}

000d8384 <__aeabi_dcmpeq>:
   d8384:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8388:	f7ff fff4 	bl	d8374 <__aeabi_cdcmpeq>
   d838c:	bf0c      	ite	eq
   d838e:	2001      	moveq	r0, #1
   d8390:	2000      	movne	r0, #0
   d8392:	f85d fb08 	ldr.w	pc, [sp], #8
   d8396:	bf00      	nop

000d8398 <__aeabi_dcmplt>:
   d8398:	f84d ed08 	str.w	lr, [sp, #-8]!
   d839c:	f7ff ffea 	bl	d8374 <__aeabi_cdcmpeq>
   d83a0:	bf34      	ite	cc
   d83a2:	2001      	movcc	r0, #1
   d83a4:	2000      	movcs	r0, #0
   d83a6:	f85d fb08 	ldr.w	pc, [sp], #8
   d83aa:	bf00      	nop

000d83ac <__aeabi_dcmple>:
   d83ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   d83b0:	f7ff ffe0 	bl	d8374 <__aeabi_cdcmpeq>
   d83b4:	bf94      	ite	ls
   d83b6:	2001      	movls	r0, #1
   d83b8:	2000      	movhi	r0, #0
   d83ba:	f85d fb08 	ldr.w	pc, [sp], #8
   d83be:	bf00      	nop

000d83c0 <__aeabi_dcmpge>:
   d83c0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d83c4:	f7ff ffce 	bl	d8364 <__aeabi_cdrcmple>
   d83c8:	bf94      	ite	ls
   d83ca:	2001      	movls	r0, #1
   d83cc:	2000      	movhi	r0, #0
   d83ce:	f85d fb08 	ldr.w	pc, [sp], #8
   d83d2:	bf00      	nop

000d83d4 <__aeabi_dcmpgt>:
   d83d4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d83d8:	f7ff ffc4 	bl	d8364 <__aeabi_cdrcmple>
   d83dc:	bf34      	ite	cc
   d83de:	2001      	movcc	r0, #1
   d83e0:	2000      	movcs	r0, #0
   d83e2:	f85d fb08 	ldr.w	pc, [sp], #8
   d83e6:	bf00      	nop

000d83e8 <__aeabi_dcmpun>:
   d83e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d83ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d83f0:	d102      	bne.n	d83f8 <__aeabi_dcmpun+0x10>
   d83f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d83f6:	d10a      	bne.n	d840e <__aeabi_dcmpun+0x26>
   d83f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d83fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8400:	d102      	bne.n	d8408 <__aeabi_dcmpun+0x20>
   d8402:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8406:	d102      	bne.n	d840e <__aeabi_dcmpun+0x26>
   d8408:	f04f 0000 	mov.w	r0, #0
   d840c:	4770      	bx	lr
   d840e:	f04f 0001 	mov.w	r0, #1
   d8412:	4770      	bx	lr

000d8414 <__aeabi_d2iz>:
   d8414:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8418:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d841c:	d215      	bcs.n	d844a <__aeabi_d2iz+0x36>
   d841e:	d511      	bpl.n	d8444 <__aeabi_d2iz+0x30>
   d8420:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8424:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8428:	d912      	bls.n	d8450 <__aeabi_d2iz+0x3c>
   d842a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d842e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8432:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8436:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d843a:	fa23 f002 	lsr.w	r0, r3, r2
   d843e:	bf18      	it	ne
   d8440:	4240      	negne	r0, r0
   d8442:	4770      	bx	lr
   d8444:	f04f 0000 	mov.w	r0, #0
   d8448:	4770      	bx	lr
   d844a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d844e:	d105      	bne.n	d845c <__aeabi_d2iz+0x48>
   d8450:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8454:	bf08      	it	eq
   d8456:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d845a:	4770      	bx	lr
   d845c:	f04f 0000 	mov.w	r0, #0
   d8460:	4770      	bx	lr
   d8462:	bf00      	nop

000d8464 <__aeabi_d2uiz>:
   d8464:	004a      	lsls	r2, r1, #1
   d8466:	d211      	bcs.n	d848c <__aeabi_d2uiz+0x28>
   d8468:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d846c:	d211      	bcs.n	d8492 <__aeabi_d2uiz+0x2e>
   d846e:	d50d      	bpl.n	d848c <__aeabi_d2uiz+0x28>
   d8470:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8474:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8478:	d40e      	bmi.n	d8498 <__aeabi_d2uiz+0x34>
   d847a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d847e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8482:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8486:	fa23 f002 	lsr.w	r0, r3, r2
   d848a:	4770      	bx	lr
   d848c:	f04f 0000 	mov.w	r0, #0
   d8490:	4770      	bx	lr
   d8492:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8496:	d102      	bne.n	d849e <__aeabi_d2uiz+0x3a>
   d8498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d849c:	4770      	bx	lr
   d849e:	f04f 0000 	mov.w	r0, #0
   d84a2:	4770      	bx	lr

000d84a4 <__aeabi_d2f>:
   d84a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d84a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d84ac:	bf24      	itt	cs
   d84ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d84b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d84b6:	d90d      	bls.n	d84d4 <__aeabi_d2f+0x30>
   d84b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d84bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d84c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d84c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d84c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d84cc:	bf08      	it	eq
   d84ce:	f020 0001 	biceq.w	r0, r0, #1
   d84d2:	4770      	bx	lr
   d84d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d84d8:	d121      	bne.n	d851e <__aeabi_d2f+0x7a>
   d84da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d84de:	bfbc      	itt	lt
   d84e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d84e4:	4770      	bxlt	lr
   d84e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d84ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d84ee:	f1c2 0218 	rsb	r2, r2, #24
   d84f2:	f1c2 0c20 	rsb	ip, r2, #32
   d84f6:	fa10 f30c 	lsls.w	r3, r0, ip
   d84fa:	fa20 f002 	lsr.w	r0, r0, r2
   d84fe:	bf18      	it	ne
   d8500:	f040 0001 	orrne.w	r0, r0, #1
   d8504:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8508:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d850c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8510:	ea40 000c 	orr.w	r0, r0, ip
   d8514:	fa23 f302 	lsr.w	r3, r3, r2
   d8518:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d851c:	e7cc      	b.n	d84b8 <__aeabi_d2f+0x14>
   d851e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8522:	d107      	bne.n	d8534 <__aeabi_d2f+0x90>
   d8524:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8528:	bf1e      	ittt	ne
   d852a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d852e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8532:	4770      	bxne	lr
   d8534:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8538:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d853c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8540:	4770      	bx	lr
   d8542:	bf00      	nop

000d8544 <__aeabi_d2lz>:
   d8544:	b538      	push	{r3, r4, r5, lr}
   d8546:	2200      	movs	r2, #0
   d8548:	2300      	movs	r3, #0
   d854a:	4604      	mov	r4, r0
   d854c:	460d      	mov	r5, r1
   d854e:	f7ff ff23 	bl	d8398 <__aeabi_dcmplt>
   d8552:	b928      	cbnz	r0, d8560 <__aeabi_d2lz+0x1c>
   d8554:	4620      	mov	r0, r4
   d8556:	4629      	mov	r1, r5
   d8558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d855c:	f000 b80a 	b.w	d8574 <__aeabi_d2ulz>
   d8560:	4620      	mov	r0, r4
   d8562:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   d8566:	f000 f805 	bl	d8574 <__aeabi_d2ulz>
   d856a:	4240      	negs	r0, r0
   d856c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8570:	bd38      	pop	{r3, r4, r5, pc}
   d8572:	bf00      	nop

000d8574 <__aeabi_d2ulz>:
   d8574:	b5d0      	push	{r4, r6, r7, lr}
   d8576:	2200      	movs	r2, #0
   d8578:	4b0e      	ldr	r3, [pc, #56]	; (d85b4 <__aeabi_d2ulz+0x40>)
   d857a:	4606      	mov	r6, r0
   d857c:	460f      	mov	r7, r1
   d857e:	f7ff fc99 	bl	d7eb4 <__aeabi_dmul>
   d8582:	f7ff ff6f 	bl	d8464 <__aeabi_d2uiz>
   d8586:	4604      	mov	r4, r0
   d8588:	f7ff fc1e 	bl	d7dc8 <__aeabi_ui2d>
   d858c:	2200      	movs	r2, #0
   d858e:	4b0a      	ldr	r3, [pc, #40]	; (d85b8 <__aeabi_d2ulz+0x44>)
   d8590:	f7ff fc90 	bl	d7eb4 <__aeabi_dmul>
   d8594:	4602      	mov	r2, r0
   d8596:	460b      	mov	r3, r1
   d8598:	4630      	mov	r0, r6
   d859a:	4639      	mov	r1, r7
   d859c:	f7ff fad6 	bl	d7b4c <__aeabi_dsub>
   d85a0:	f7ff ff60 	bl	d8464 <__aeabi_d2uiz>
   d85a4:	4623      	mov	r3, r4
   d85a6:	2200      	movs	r2, #0
   d85a8:	ea42 0200 	orr.w	r2, r2, r0
   d85ac:	4610      	mov	r0, r2
   d85ae:	4619      	mov	r1, r3
   d85b0:	bdd0      	pop	{r4, r6, r7, pc}
   d85b2:	bf00      	nop
   d85b4:	3df00000 	.word	0x3df00000
   d85b8:	41f00000 	.word	0x41f00000

000d85bc <__cxa_atexit>:
   d85bc:	b510      	push	{r4, lr}
   d85be:	4c05      	ldr	r4, [pc, #20]	; (d85d4 <__cxa_atexit+0x18>)
   d85c0:	4613      	mov	r3, r2
   d85c2:	b12c      	cbz	r4, d85d0 <__cxa_atexit+0x14>
   d85c4:	460a      	mov	r2, r1
   d85c6:	4601      	mov	r1, r0
   d85c8:	2002      	movs	r0, #2
   d85ca:	f3af 8000 	nop.w
   d85ce:	bd10      	pop	{r4, pc}
   d85d0:	4620      	mov	r0, r4
   d85d2:	bd10      	pop	{r4, pc}
   d85d4:	00000000 	.word	0x00000000

000d85d8 <memcmp>:
   d85d8:	b510      	push	{r4, lr}
   d85da:	3901      	subs	r1, #1
   d85dc:	4402      	add	r2, r0
   d85de:	4290      	cmp	r0, r2
   d85e0:	d007      	beq.n	d85f2 <memcmp+0x1a>
   d85e2:	f810 3b01 	ldrb.w	r3, [r0], #1
   d85e6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d85ea:	42a3      	cmp	r3, r4
   d85ec:	d0f7      	beq.n	d85de <memcmp+0x6>
   d85ee:	1b18      	subs	r0, r3, r4
   d85f0:	bd10      	pop	{r4, pc}
   d85f2:	2000      	movs	r0, #0
   d85f4:	bd10      	pop	{r4, pc}

000d85f6 <memcpy>:
   d85f6:	b510      	push	{r4, lr}
   d85f8:	1e43      	subs	r3, r0, #1
   d85fa:	440a      	add	r2, r1
   d85fc:	4291      	cmp	r1, r2
   d85fe:	d004      	beq.n	d860a <memcpy+0x14>
   d8600:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8604:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8608:	e7f8      	b.n	d85fc <memcpy+0x6>
   d860a:	bd10      	pop	{r4, pc}

000d860c <memset>:
   d860c:	4402      	add	r2, r0
   d860e:	4603      	mov	r3, r0
   d8610:	4293      	cmp	r3, r2
   d8612:	d002      	beq.n	d861a <memset+0xe>
   d8614:	f803 1b01 	strb.w	r1, [r3], #1
   d8618:	e7fa      	b.n	d8610 <memset+0x4>
   d861a:	4770      	bx	lr

000d861c <srand>:
   d861c:	b538      	push	{r3, r4, r5, lr}
   d861e:	4b12      	ldr	r3, [pc, #72]	; (d8668 <srand+0x4c>)
   d8620:	681c      	ldr	r4, [r3, #0]
   d8622:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8624:	4605      	mov	r5, r0
   d8626:	b9d3      	cbnz	r3, d865e <srand+0x42>
   d8628:	2018      	movs	r0, #24
   d862a:	f7fe f9bb 	bl	d69a4 <malloc>
   d862e:	f243 330e 	movw	r3, #13070	; 0x330e
   d8632:	63a0      	str	r0, [r4, #56]	; 0x38
   d8634:	8003      	strh	r3, [r0, #0]
   d8636:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d863a:	8043      	strh	r3, [r0, #2]
   d863c:	f241 2334 	movw	r3, #4660	; 0x1234
   d8640:	8083      	strh	r3, [r0, #4]
   d8642:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8646:	80c3      	strh	r3, [r0, #6]
   d8648:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d864c:	8103      	strh	r3, [r0, #8]
   d864e:	2305      	movs	r3, #5
   d8650:	8143      	strh	r3, [r0, #10]
   d8652:	230b      	movs	r3, #11
   d8654:	8183      	strh	r3, [r0, #12]
   d8656:	2201      	movs	r2, #1
   d8658:	2300      	movs	r3, #0
   d865a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d865e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8660:	2200      	movs	r2, #0
   d8662:	611d      	str	r5, [r3, #16]
   d8664:	615a      	str	r2, [r3, #20]
   d8666:	bd38      	pop	{r3, r4, r5, pc}
   d8668:	2003df34 	.word	0x2003df34

000d866c <strlen>:
   d866c:	4603      	mov	r3, r0
   d866e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8672:	2a00      	cmp	r2, #0
   d8674:	d1fb      	bne.n	d866e <strlen+0x2>
   d8676:	1a18      	subs	r0, r3, r0
   d8678:	3801      	subs	r0, #1
   d867a:	4770      	bx	lr

000d867c <strtok>:
   d867c:	4b17      	ldr	r3, [pc, #92]	; (d86dc <strtok+0x60>)
   d867e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8682:	681d      	ldr	r5, [r3, #0]
   d8684:	6dac      	ldr	r4, [r5, #88]	; 0x58
   d8686:	4606      	mov	r6, r0
   d8688:	460f      	mov	r7, r1
   d868a:	b9fc      	cbnz	r4, d86cc <strtok+0x50>
   d868c:	2050      	movs	r0, #80	; 0x50
   d868e:	f7fe f989 	bl	d69a4 <malloc>
   d8692:	65a8      	str	r0, [r5, #88]	; 0x58
   d8694:	6084      	str	r4, [r0, #8]
   d8696:	6dab      	ldr	r3, [r5, #88]	; 0x58
   d8698:	6004      	str	r4, [r0, #0]
   d869a:	6044      	str	r4, [r0, #4]
   d869c:	611c      	str	r4, [r3, #16]
   d869e:	60dc      	str	r4, [r3, #12]
   d86a0:	6dab      	ldr	r3, [r5, #88]	; 0x58
   d86a2:	619c      	str	r4, [r3, #24]
   d86a4:	615c      	str	r4, [r3, #20]
   d86a6:	6dab      	ldr	r3, [r5, #88]	; 0x58
   d86a8:	62dc      	str	r4, [r3, #44]	; 0x2c
   d86aa:	629c      	str	r4, [r3, #40]	; 0x28
   d86ac:	6dab      	ldr	r3, [r5, #88]	; 0x58
   d86ae:	635c      	str	r4, [r3, #52]	; 0x34
   d86b0:	631c      	str	r4, [r3, #48]	; 0x30
   d86b2:	6dab      	ldr	r3, [r5, #88]	; 0x58
   d86b4:	63dc      	str	r4, [r3, #60]	; 0x3c
   d86b6:	639c      	str	r4, [r3, #56]	; 0x38
   d86b8:	6dab      	ldr	r3, [r5, #88]	; 0x58
   d86ba:	645c      	str	r4, [r3, #68]	; 0x44
   d86bc:	641c      	str	r4, [r3, #64]	; 0x40
   d86be:	6dab      	ldr	r3, [r5, #88]	; 0x58
   d86c0:	64dc      	str	r4, [r3, #76]	; 0x4c
   d86c2:	649c      	str	r4, [r3, #72]	; 0x48
   d86c4:	6dab      	ldr	r3, [r5, #88]	; 0x58
   d86c6:	771c      	strb	r4, [r3, #28]
   d86c8:	6dab      	ldr	r3, [r5, #88]	; 0x58
   d86ca:	625c      	str	r4, [r3, #36]	; 0x24
   d86cc:	6daa      	ldr	r2, [r5, #88]	; 0x58
   d86ce:	4639      	mov	r1, r7
   d86d0:	4630      	mov	r0, r6
   d86d2:	2301      	movs	r3, #1
   d86d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d86d8:	f000 b802 	b.w	d86e0 <__strtok_r>
   d86dc:	2003df34 	.word	0x2003df34

000d86e0 <__strtok_r>:
   d86e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d86e2:	b948      	cbnz	r0, d86f8 <__strtok_r+0x18>
   d86e4:	6810      	ldr	r0, [r2, #0]
   d86e6:	b938      	cbnz	r0, d86f8 <__strtok_r+0x18>
   d86e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d86ea:	f817 6b01 	ldrb.w	r6, [r7], #1
   d86ee:	b15e      	cbz	r6, d8708 <__strtok_r+0x28>
   d86f0:	42b5      	cmp	r5, r6
   d86f2:	d1fa      	bne.n	d86ea <__strtok_r+0xa>
   d86f4:	b12b      	cbz	r3, d8702 <__strtok_r+0x22>
   d86f6:	4620      	mov	r0, r4
   d86f8:	4604      	mov	r4, r0
   d86fa:	460f      	mov	r7, r1
   d86fc:	f814 5b01 	ldrb.w	r5, [r4], #1
   d8700:	e7f3      	b.n	d86ea <__strtok_r+0xa>
   d8702:	6014      	str	r4, [r2, #0]
   d8704:	7003      	strb	r3, [r0, #0]
   d8706:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8708:	b94d      	cbnz	r5, d871e <__strtok_r+0x3e>
   d870a:	6015      	str	r5, [r2, #0]
   d870c:	4628      	mov	r0, r5
   d870e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8710:	f817 6b01 	ldrb.w	r6, [r7], #1
   d8714:	42b5      	cmp	r5, r6
   d8716:	d007      	beq.n	d8728 <__strtok_r+0x48>
   d8718:	2e00      	cmp	r6, #0
   d871a:	d1f9      	bne.n	d8710 <__strtok_r+0x30>
   d871c:	461c      	mov	r4, r3
   d871e:	4623      	mov	r3, r4
   d8720:	460f      	mov	r7, r1
   d8722:	f813 5b01 	ldrb.w	r5, [r3], #1
   d8726:	e7f3      	b.n	d8710 <__strtok_r+0x30>
   d8728:	b115      	cbz	r5, d8730 <__strtok_r+0x50>
   d872a:	2100      	movs	r1, #0
   d872c:	7021      	strb	r1, [r4, #0]
   d872e:	e000      	b.n	d8732 <__strtok_r+0x52>
   d8730:	462b      	mov	r3, r5
   d8732:	6013      	str	r3, [r2, #0]
   d8734:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8736 <link_code_end>:
	...

000d8738 <dynalib_user>:
   d8738:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d8748:	0000 0000                                   ....

000d874c <_ZTVN8particle13__SPISettingsE>:
	...
   d8754:	40b5 000d                                   .@..

000d8758 <_ZTV6SdFile>:
	...
   d8760:	40b3 000d 410d 000d 411f 000d 4119 000d     .@...A...A...A..
   d8770:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   d8780:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   d8790:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   d87a0:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   d87b0:	2545 3e64 2c00 4900 766e 6c61 6469 7220     E%d>.,.Invalid r
   d87c0:	6165 6964 676e 6400 7461 6c61 676f 632e     eading.datalog.c
   d87d0:	7673 4300 6e61 7427 6120 6363 7365 2073     sv.Can't access 
   d87e0:	4453 6320 7261 2e64 4420 206f 6f6e 2074     SD card. Do not 
   d87f0:	6572 6f66 6d72 7461 002e 6f4e 6320 7261     reformat..No car
   d8800:	2c64 7720 6f72 676e 6320 6968 2070 6573     d, wrong chip se
   d8810:	656c 7463 7020 6e69 202c 726f 5320 4950     lect pin, or SPI
   d8820:	7020 6f72 6c62 6d65 003f 4453 6520 7272      problem?.SD err
   d8830:	726f 6f43 6564 203a 5830 2c00 5830 4900     orCode: 0X.,0X.I
   d8840:	766e 6c61 6469 6620 726f 616d 2c74 7220     nvalid format, r
   d8850:	6665 726f 616d 2074 4453 002e 6143 276e     eformat SD..Can'
   d8860:	2074 706f 6e65 7220 6f6f 2074 6964 6572     t open root dire
   d8870:	7463 726f 2e79 4e00 206f 7265 6f72 2072     ctory..No error 
   d8880:	6f66 6e75 2e64 3d00 3d3d 4e20 7765 4320     found..=== New C
   d8890:	7361 2074 3d3d 003d 4453 4320 7261 2064     ast ===.SD Card 
   d88a0:	7245 6f72 2172 0000                         Error!..

000d88a8 <_ZTVN5spark13CellularClassE>:
	...
   d88b0:	6a39 000d 6a2f 000d 6a25 000d 69db 000d     9j../j..%j...i..
   d88c0:	6a19 000d 6a0d 000d 6a01 000d 69f9 000d     .j...j...j...i..
   d88d0:	69ef 000d 69e5 000d 6e75 000d               .i...i..un..

000d88dc <_ZTVN5spark13EthernetClassE>:
	...
   d88e4:	6af5 000d 6aeb 000d 6ae1 000d 6ad7 000d     .j...j...j...j..
   d88f4:	6acb 000d 6abf 000d 6ab3 000d 6aab 000d     .j...j...j...j..
   d8904:	6aa1 000d 6a97 000d 6e75 000d               .j...j..un..

000d8910 <_ZTV7TwoWire>:
	...
   d8918:	6b15 000d 6b5f 000d 6b37 000d 6b17 000d     .k.._k..7k...k..
   d8928:	6b3f 000d 6b47 000d 6b4f 000d 6b57 000d     ?k..Gk..Ok..Wk..

000d8938 <_ZTV9IPAddress>:
	...
   d8940:	6bf3 000d 6be5 000d 6be7 000d 6e6c 6600     .k...k...k..ln.f
   d8950:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
   d8960:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
   d8970:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
   d8980:	2500 0069 6564 6174 6c69 2073 203d 6200     .%i.details = .b
   d8990:	7561 0064 6553 6972 6c61 5300 7265 6169     aud.Serial.Seria
   d89a0:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
   d89b0:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
   d89c0:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
   d89d0:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
   d89e0:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
   d89f0:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
   d8a00:	0072 7061 0070 6f6e 656e 7400 6172 6563     r.app.none.trace
   d8a10:	6900 666e 006f 6177 6e72 6500 7272 726f     .info.warn.error
   d8a20:	7000 6e61 6369 6100 6c6c 0000               .panic.all..

000d8a2c <_ZTVN5spark9MeshClassE>:
	...
   d8a34:	6d37 000d 6d2d 000d 6d23 000d 6d19 000d     7m..-m..#m...m..
   d8a44:	6d0d 000d 6d01 000d 6cf5 000d 6ced 000d     .m...m...l...l..
   d8a54:	6ce3 000d 6cd9 000d 6e75 000d               .l...l..un..

000d8a60 <_ZTVN5spark12NetworkClassE>:
	...
   d8a68:	6e0d 000d 6e17 000d 6e21 000d 6e2b 000d     .n...n..!n..+n..
   d8a78:	6e35 000d 6e41 000d 6e4d 000d 6e59 000d     5n..An..Mn..Yn..
   d8a88:	6e61 000d 6e6b 000d 6e75 000d 616e 006e     an..kn..un..nan.
   d8a98:	766f 0066 6e69 0066                         ovf.inf.

000d8aa0 <_ZTV8SPIClass>:
	...
   d8aa8:	723d 000d 723f 000d                         =r..?r..

000d8ab0 <_ZL14clock_divisors>:
   d8ab0:	0800 1810 2820 3830 005a 2b25 3330 3a64     .... (08Z.%+03d:
   d8ac0:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d8ad0:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d8ae0:	0000 0000                                   ....

000d8ae4 <_ZTV11USARTSerial>:
	...
   d8aec:	74c1 000d 74e5 000d 74f1 000d 6f0d 000d     .t...t...t...o..
   d8afc:	74cd 000d 74d9 000d 74d3 000d 74df 000d     .t...t...t...t..
   d8b0c:	74c3 000d 74c7 000d                         .t...t..

000d8b14 <_ZTV9USBSerial>:
	...
   d8b1c:	75d9 000d 761d 000d 75f7 000d 6f0d 000d     .u...v...u...o..
   d8b2c:	75f1 000d 75db 000d 75e3 000d 7617 000d     .u...u...u...v..
   d8b3c:	75eb 000d 75d5 000d                         .u...u..

000d8b44 <__sf_fake_stdin>:
	...

000d8b64 <__sf_fake_stdout>:
	...

000d8b84 <__sf_fake_stderr>:
	...
   d8ba4:	0043                                        C.

000d8ba6 <link_const_variable_data_end>:
	...

000d8ba8 <link_constructors_location>:
   d8ba8:	000d44d1 	.word	0x000d44d1
   d8bac:	000d47b5 	.word	0x000d47b5
   d8bb0:	000d4a8f 	.word	0x000d4a8f
   d8bb4:	000d4a93 	.word	0x000d4a93
   d8bb8:	000d4e7d 	.word	0x000d4e7d
   d8bbc:	000d4e8d 	.word	0x000d4e8d
   d8bc0:	000d554d 	.word	0x000d554d
   d8bc4:	000d5b5d 	.word	0x000d5b5d
   d8bc8:	000d5b81 	.word	0x000d5b81
   d8bcc:	000d5b85 	.word	0x000d5b85
   d8bd0:	000d5ea9 	.word	0x000d5ea9
   d8bd4:	000d5ead 	.word	0x000d5ead
   d8bd8:	000d5eb1 	.word	0x000d5eb1
   d8bdc:	000d5eb5 	.word	0x000d5eb5
   d8be0:	000d5eb9 	.word	0x000d5eb9
   d8be4:	000d63f3 	.word	0x000d63f3
   d8be8:	000d63f7 	.word	0x000d63f7
   d8bec:	000d63fb 	.word	0x000d63fb
   d8bf0:	000d64a1 	.word	0x000d64a1
   d8bf4:	000d64a5 	.word	0x000d64a5
   d8bf8:	000d64a9 	.word	0x000d64a9
   d8bfc:	000d6a45 	.word	0x000d6a45
   d8c00:	000d6b01 	.word	0x000d6b01
   d8c04:	000d6cc9 	.word	0x000d6cc9
   d8c08:	000d6dc1 	.word	0x000d6dc1
   d8c0c:	000d6ef9 	.word	0x000d6ef9
   d8c10:	000d7221 	.word	0x000d7221
   d8c14:	000d7429 	.word	0x000d7429
   d8c18:	000d74ad 	.word	0x000d74ad
   d8c1c:	000d7865 	.word	0x000d7865
   d8c20:	000d78b5 	.word	0x000d78b5
   d8c24:	000d7979 	.word	0x000d7979
   d8c28:	000d79fd 	.word	0x000d79fd
   d8c2c:	000d7a81 	.word	0x000d7a81
